# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openframeworks', [dirname(__file__)])
        except ImportError:
            import _openframeworks
            return _openframeworks
        if fp is not None:
            try:
                _mod = imp.load_module('_openframeworks', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openframeworks = swig_import_helper()
    del swig_import_helper
else:
    import _openframeworks
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


GL_FALSE = _openframeworks.GL_FALSE
GL_TRUE = _openframeworks.GL_TRUE
GL_BYTE = _openframeworks.GL_BYTE
GL_UNSIGNED_BYTE = _openframeworks.GL_UNSIGNED_BYTE
GL_SHORT = _openframeworks.GL_SHORT
GL_UNSIGNED_SHORT = _openframeworks.GL_UNSIGNED_SHORT
GL_INT = _openframeworks.GL_INT
GL_UNSIGNED_INT = _openframeworks.GL_UNSIGNED_INT
GL_FLOAT = _openframeworks.GL_FLOAT
GL_DOUBLE = _openframeworks.GL_DOUBLE
GL_2_BYTES = _openframeworks.GL_2_BYTES
GL_3_BYTES = _openframeworks.GL_3_BYTES
GL_4_BYTES = _openframeworks.GL_4_BYTES
GL_POINTS = _openframeworks.GL_POINTS
GL_LINES = _openframeworks.GL_LINES
GL_LINE_LOOP = _openframeworks.GL_LINE_LOOP
GL_LINE_STRIP = _openframeworks.GL_LINE_STRIP
GL_TRIANGLES = _openframeworks.GL_TRIANGLES
GL_TRIANGLE_STRIP = _openframeworks.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _openframeworks.GL_TRIANGLE_FAN
GL_QUADS = _openframeworks.GL_QUADS
GL_QUAD_STRIP = _openframeworks.GL_QUAD_STRIP
GL_POLYGON = _openframeworks.GL_POLYGON
GL_VERTEX_ARRAY = _openframeworks.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _openframeworks.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _openframeworks.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _openframeworks.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _openframeworks.GL_TEXTURE_COORD_ARRAY
GL_EDGE_FLAG_ARRAY = _openframeworks.GL_EDGE_FLAG_ARRAY
GL_VERTEX_ARRAY_SIZE = _openframeworks.GL_VERTEX_ARRAY_SIZE
GL_VERTEX_ARRAY_TYPE = _openframeworks.GL_VERTEX_ARRAY_TYPE
GL_VERTEX_ARRAY_STRIDE = _openframeworks.GL_VERTEX_ARRAY_STRIDE
GL_NORMAL_ARRAY_TYPE = _openframeworks.GL_NORMAL_ARRAY_TYPE
GL_NORMAL_ARRAY_STRIDE = _openframeworks.GL_NORMAL_ARRAY_STRIDE
GL_COLOR_ARRAY_SIZE = _openframeworks.GL_COLOR_ARRAY_SIZE
GL_COLOR_ARRAY_TYPE = _openframeworks.GL_COLOR_ARRAY_TYPE
GL_COLOR_ARRAY_STRIDE = _openframeworks.GL_COLOR_ARRAY_STRIDE
GL_INDEX_ARRAY_TYPE = _openframeworks.GL_INDEX_ARRAY_TYPE
GL_INDEX_ARRAY_STRIDE = _openframeworks.GL_INDEX_ARRAY_STRIDE
GL_TEXTURE_COORD_ARRAY_SIZE = _openframeworks.GL_TEXTURE_COORD_ARRAY_SIZE
GL_TEXTURE_COORD_ARRAY_TYPE = _openframeworks.GL_TEXTURE_COORD_ARRAY_TYPE
GL_TEXTURE_COORD_ARRAY_STRIDE = _openframeworks.GL_TEXTURE_COORD_ARRAY_STRIDE
GL_EDGE_FLAG_ARRAY_STRIDE = _openframeworks.GL_EDGE_FLAG_ARRAY_STRIDE
GL_VERTEX_ARRAY_POINTER = _openframeworks.GL_VERTEX_ARRAY_POINTER
GL_NORMAL_ARRAY_POINTER = _openframeworks.GL_NORMAL_ARRAY_POINTER
GL_COLOR_ARRAY_POINTER = _openframeworks.GL_COLOR_ARRAY_POINTER
GL_INDEX_ARRAY_POINTER = _openframeworks.GL_INDEX_ARRAY_POINTER
GL_TEXTURE_COORD_ARRAY_POINTER = _openframeworks.GL_TEXTURE_COORD_ARRAY_POINTER
GL_EDGE_FLAG_ARRAY_POINTER = _openframeworks.GL_EDGE_FLAG_ARRAY_POINTER
GL_V2F = _openframeworks.GL_V2F
GL_V3F = _openframeworks.GL_V3F
GL_C4UB_V2F = _openframeworks.GL_C4UB_V2F
GL_C4UB_V3F = _openframeworks.GL_C4UB_V3F
GL_C3F_V3F = _openframeworks.GL_C3F_V3F
GL_N3F_V3F = _openframeworks.GL_N3F_V3F
GL_C4F_N3F_V3F = _openframeworks.GL_C4F_N3F_V3F
GL_T2F_V3F = _openframeworks.GL_T2F_V3F
GL_T4F_V4F = _openframeworks.GL_T4F_V4F
GL_T2F_C4UB_V3F = _openframeworks.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _openframeworks.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _openframeworks.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _openframeworks.GL_T2F_C4F_N3F_V3F
GL_T4F_C4F_N3F_V4F = _openframeworks.GL_T4F_C4F_N3F_V4F
GL_MATRIX_MODE = _openframeworks.GL_MATRIX_MODE
GL_MODELVIEW = _openframeworks.GL_MODELVIEW
GL_PROJECTION = _openframeworks.GL_PROJECTION
GL_TEXTURE = _openframeworks.GL_TEXTURE
GL_POINT_SMOOTH = _openframeworks.GL_POINT_SMOOTH
GL_POINT_SIZE = _openframeworks.GL_POINT_SIZE
GL_POINT_SIZE_GRANULARITY = _openframeworks.GL_POINT_SIZE_GRANULARITY
GL_POINT_SIZE_RANGE = _openframeworks.GL_POINT_SIZE_RANGE
GL_LINE_SMOOTH = _openframeworks.GL_LINE_SMOOTH
GL_LINE_STIPPLE = _openframeworks.GL_LINE_STIPPLE
GL_LINE_STIPPLE_PATTERN = _openframeworks.GL_LINE_STIPPLE_PATTERN
GL_LINE_STIPPLE_REPEAT = _openframeworks.GL_LINE_STIPPLE_REPEAT
GL_LINE_WIDTH = _openframeworks.GL_LINE_WIDTH
GL_LINE_WIDTH_GRANULARITY = _openframeworks.GL_LINE_WIDTH_GRANULARITY
GL_LINE_WIDTH_RANGE = _openframeworks.GL_LINE_WIDTH_RANGE
GL_POINT = _openframeworks.GL_POINT
GL_LINE = _openframeworks.GL_LINE
GL_FILL = _openframeworks.GL_FILL
GL_CW = _openframeworks.GL_CW
GL_CCW = _openframeworks.GL_CCW
GL_FRONT = _openframeworks.GL_FRONT
GL_BACK = _openframeworks.GL_BACK
GL_POLYGON_MODE = _openframeworks.GL_POLYGON_MODE
GL_POLYGON_SMOOTH = _openframeworks.GL_POLYGON_SMOOTH
GL_POLYGON_STIPPLE = _openframeworks.GL_POLYGON_STIPPLE
GL_EDGE_FLAG = _openframeworks.GL_EDGE_FLAG
GL_CULL_FACE = _openframeworks.GL_CULL_FACE
GL_CULL_FACE_MODE = _openframeworks.GL_CULL_FACE_MODE
GL_FRONT_FACE = _openframeworks.GL_FRONT_FACE
GL_POLYGON_OFFSET_FACTOR = _openframeworks.GL_POLYGON_OFFSET_FACTOR
GL_POLYGON_OFFSET_UNITS = _openframeworks.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_POINT = _openframeworks.GL_POLYGON_OFFSET_POINT
GL_POLYGON_OFFSET_LINE = _openframeworks.GL_POLYGON_OFFSET_LINE
GL_POLYGON_OFFSET_FILL = _openframeworks.GL_POLYGON_OFFSET_FILL
GL_COMPILE = _openframeworks.GL_COMPILE
GL_COMPILE_AND_EXECUTE = _openframeworks.GL_COMPILE_AND_EXECUTE
GL_LIST_BASE = _openframeworks.GL_LIST_BASE
GL_LIST_INDEX = _openframeworks.GL_LIST_INDEX
GL_LIST_MODE = _openframeworks.GL_LIST_MODE
GL_NEVER = _openframeworks.GL_NEVER
GL_LESS = _openframeworks.GL_LESS
GL_EQUAL = _openframeworks.GL_EQUAL
GL_LEQUAL = _openframeworks.GL_LEQUAL
GL_GREATER = _openframeworks.GL_GREATER
GL_NOTEQUAL = _openframeworks.GL_NOTEQUAL
GL_GEQUAL = _openframeworks.GL_GEQUAL
GL_ALWAYS = _openframeworks.GL_ALWAYS
GL_DEPTH_TEST = _openframeworks.GL_DEPTH_TEST
GL_DEPTH_BITS = _openframeworks.GL_DEPTH_BITS
GL_DEPTH_CLEAR_VALUE = _openframeworks.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _openframeworks.GL_DEPTH_FUNC
GL_DEPTH_RANGE = _openframeworks.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _openframeworks.GL_DEPTH_WRITEMASK
GL_DEPTH_COMPONENT = _openframeworks.GL_DEPTH_COMPONENT
GL_LIGHTING = _openframeworks.GL_LIGHTING
GL_LIGHT0 = _openframeworks.GL_LIGHT0
GL_LIGHT1 = _openframeworks.GL_LIGHT1
GL_LIGHT2 = _openframeworks.GL_LIGHT2
GL_LIGHT3 = _openframeworks.GL_LIGHT3
GL_LIGHT4 = _openframeworks.GL_LIGHT4
GL_LIGHT5 = _openframeworks.GL_LIGHT5
GL_LIGHT6 = _openframeworks.GL_LIGHT6
GL_LIGHT7 = _openframeworks.GL_LIGHT7
GL_SPOT_EXPONENT = _openframeworks.GL_SPOT_EXPONENT
GL_SPOT_CUTOFF = _openframeworks.GL_SPOT_CUTOFF
GL_CONSTANT_ATTENUATION = _openframeworks.GL_CONSTANT_ATTENUATION
GL_LINEAR_ATTENUATION = _openframeworks.GL_LINEAR_ATTENUATION
GL_QUADRATIC_ATTENUATION = _openframeworks.GL_QUADRATIC_ATTENUATION
GL_AMBIENT = _openframeworks.GL_AMBIENT
GL_DIFFUSE = _openframeworks.GL_DIFFUSE
GL_SPECULAR = _openframeworks.GL_SPECULAR
GL_SHININESS = _openframeworks.GL_SHININESS
GL_EMISSION = _openframeworks.GL_EMISSION
GL_POSITION = _openframeworks.GL_POSITION
GL_SPOT_DIRECTION = _openframeworks.GL_SPOT_DIRECTION
GL_AMBIENT_AND_DIFFUSE = _openframeworks.GL_AMBIENT_AND_DIFFUSE
GL_COLOR_INDEXES = _openframeworks.GL_COLOR_INDEXES
GL_LIGHT_MODEL_TWO_SIDE = _openframeworks.GL_LIGHT_MODEL_TWO_SIDE
GL_LIGHT_MODEL_LOCAL_VIEWER = _openframeworks.GL_LIGHT_MODEL_LOCAL_VIEWER
GL_LIGHT_MODEL_AMBIENT = _openframeworks.GL_LIGHT_MODEL_AMBIENT
GL_FRONT_AND_BACK = _openframeworks.GL_FRONT_AND_BACK
GL_SHADE_MODEL = _openframeworks.GL_SHADE_MODEL
GL_FLAT = _openframeworks.GL_FLAT
GL_SMOOTH = _openframeworks.GL_SMOOTH
GL_COLOR_MATERIAL = _openframeworks.GL_COLOR_MATERIAL
GL_COLOR_MATERIAL_FACE = _openframeworks.GL_COLOR_MATERIAL_FACE
GL_COLOR_MATERIAL_PARAMETER = _openframeworks.GL_COLOR_MATERIAL_PARAMETER
GL_NORMALIZE = _openframeworks.GL_NORMALIZE
GL_CLIP_PLANE0 = _openframeworks.GL_CLIP_PLANE0
GL_CLIP_PLANE1 = _openframeworks.GL_CLIP_PLANE1
GL_CLIP_PLANE2 = _openframeworks.GL_CLIP_PLANE2
GL_CLIP_PLANE3 = _openframeworks.GL_CLIP_PLANE3
GL_CLIP_PLANE4 = _openframeworks.GL_CLIP_PLANE4
GL_CLIP_PLANE5 = _openframeworks.GL_CLIP_PLANE5
GL_ACCUM_RED_BITS = _openframeworks.GL_ACCUM_RED_BITS
GL_ACCUM_GREEN_BITS = _openframeworks.GL_ACCUM_GREEN_BITS
GL_ACCUM_BLUE_BITS = _openframeworks.GL_ACCUM_BLUE_BITS
GL_ACCUM_ALPHA_BITS = _openframeworks.GL_ACCUM_ALPHA_BITS
GL_ACCUM_CLEAR_VALUE = _openframeworks.GL_ACCUM_CLEAR_VALUE
GL_ACCUM = _openframeworks.GL_ACCUM
GL_ADD = _openframeworks.GL_ADD
GL_LOAD = _openframeworks.GL_LOAD
GL_MULT = _openframeworks.GL_MULT
GL_RETURN = _openframeworks.GL_RETURN
GL_ALPHA_TEST = _openframeworks.GL_ALPHA_TEST
GL_ALPHA_TEST_REF = _openframeworks.GL_ALPHA_TEST_REF
GL_ALPHA_TEST_FUNC = _openframeworks.GL_ALPHA_TEST_FUNC
GL_BLEND = _openframeworks.GL_BLEND
GL_BLEND_SRC = _openframeworks.GL_BLEND_SRC
GL_BLEND_DST = _openframeworks.GL_BLEND_DST
GL_ZERO = _openframeworks.GL_ZERO
GL_ONE = _openframeworks.GL_ONE
GL_SRC_COLOR = _openframeworks.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _openframeworks.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _openframeworks.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _openframeworks.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _openframeworks.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _openframeworks.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _openframeworks.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _openframeworks.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _openframeworks.GL_SRC_ALPHA_SATURATE
GL_CONSTANT_COLOR = _openframeworks.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _openframeworks.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _openframeworks.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _openframeworks.GL_ONE_MINUS_CONSTANT_ALPHA
GL_FEEDBACK = _openframeworks.GL_FEEDBACK
GL_RENDER = _openframeworks.GL_RENDER
GL_SELECT = _openframeworks.GL_SELECT
GL_2D = _openframeworks.GL_2D
GL_3D = _openframeworks.GL_3D
GL_3D_COLOR = _openframeworks.GL_3D_COLOR
GL_3D_COLOR_TEXTURE = _openframeworks.GL_3D_COLOR_TEXTURE
GL_4D_COLOR_TEXTURE = _openframeworks.GL_4D_COLOR_TEXTURE
GL_POINT_TOKEN = _openframeworks.GL_POINT_TOKEN
GL_LINE_TOKEN = _openframeworks.GL_LINE_TOKEN
GL_LINE_RESET_TOKEN = _openframeworks.GL_LINE_RESET_TOKEN
GL_POLYGON_TOKEN = _openframeworks.GL_POLYGON_TOKEN
GL_BITMAP_TOKEN = _openframeworks.GL_BITMAP_TOKEN
GL_DRAW_PIXEL_TOKEN = _openframeworks.GL_DRAW_PIXEL_TOKEN
GL_COPY_PIXEL_TOKEN = _openframeworks.GL_COPY_PIXEL_TOKEN
GL_PASS_THROUGH_TOKEN = _openframeworks.GL_PASS_THROUGH_TOKEN
GL_FEEDBACK_BUFFER_POINTER = _openframeworks.GL_FEEDBACK_BUFFER_POINTER
GL_FEEDBACK_BUFFER_SIZE = _openframeworks.GL_FEEDBACK_BUFFER_SIZE
GL_FEEDBACK_BUFFER_TYPE = _openframeworks.GL_FEEDBACK_BUFFER_TYPE
GL_SELECTION_BUFFER_POINTER = _openframeworks.GL_SELECTION_BUFFER_POINTER
GL_SELECTION_BUFFER_SIZE = _openframeworks.GL_SELECTION_BUFFER_SIZE
GL_FOG = _openframeworks.GL_FOG
GL_FOG_MODE = _openframeworks.GL_FOG_MODE
GL_FOG_DENSITY = _openframeworks.GL_FOG_DENSITY
GL_FOG_COLOR = _openframeworks.GL_FOG_COLOR
GL_FOG_INDEX = _openframeworks.GL_FOG_INDEX
GL_FOG_START = _openframeworks.GL_FOG_START
GL_FOG_END = _openframeworks.GL_FOG_END
GL_LINEAR = _openframeworks.GL_LINEAR
GL_EXP = _openframeworks.GL_EXP
GL_EXP2 = _openframeworks.GL_EXP2
GL_LOGIC_OP = _openframeworks.GL_LOGIC_OP
GL_INDEX_LOGIC_OP = _openframeworks.GL_INDEX_LOGIC_OP
GL_COLOR_LOGIC_OP = _openframeworks.GL_COLOR_LOGIC_OP
GL_LOGIC_OP_MODE = _openframeworks.GL_LOGIC_OP_MODE
GL_CLEAR = _openframeworks.GL_CLEAR
GL_SET = _openframeworks.GL_SET
GL_COPY = _openframeworks.GL_COPY
GL_COPY_INVERTED = _openframeworks.GL_COPY_INVERTED
GL_NOOP = _openframeworks.GL_NOOP
GL_INVERT = _openframeworks.GL_INVERT
GL_AND = _openframeworks.GL_AND
GL_NAND = _openframeworks.GL_NAND
GL_OR = _openframeworks.GL_OR
GL_NOR = _openframeworks.GL_NOR
GL_XOR = _openframeworks.GL_XOR
GL_EQUIV = _openframeworks.GL_EQUIV
GL_AND_REVERSE = _openframeworks.GL_AND_REVERSE
GL_AND_INVERTED = _openframeworks.GL_AND_INVERTED
GL_OR_REVERSE = _openframeworks.GL_OR_REVERSE
GL_OR_INVERTED = _openframeworks.GL_OR_INVERTED
GL_STENCIL_TEST = _openframeworks.GL_STENCIL_TEST
GL_STENCIL_WRITEMASK = _openframeworks.GL_STENCIL_WRITEMASK
GL_STENCIL_BITS = _openframeworks.GL_STENCIL_BITS
GL_STENCIL_FUNC = _openframeworks.GL_STENCIL_FUNC
GL_STENCIL_VALUE_MASK = _openframeworks.GL_STENCIL_VALUE_MASK
GL_STENCIL_REF = _openframeworks.GL_STENCIL_REF
GL_STENCIL_FAIL = _openframeworks.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _openframeworks.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_PASS_DEPTH_FAIL = _openframeworks.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_CLEAR_VALUE = _openframeworks.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_INDEX = _openframeworks.GL_STENCIL_INDEX
GL_KEEP = _openframeworks.GL_KEEP
GL_REPLACE = _openframeworks.GL_REPLACE
GL_INCR = _openframeworks.GL_INCR
GL_DECR = _openframeworks.GL_DECR
GL_NONE = _openframeworks.GL_NONE
GL_LEFT = _openframeworks.GL_LEFT
GL_RIGHT = _openframeworks.GL_RIGHT
GL_FRONT_LEFT = _openframeworks.GL_FRONT_LEFT
GL_FRONT_RIGHT = _openframeworks.GL_FRONT_RIGHT
GL_BACK_LEFT = _openframeworks.GL_BACK_LEFT
GL_BACK_RIGHT = _openframeworks.GL_BACK_RIGHT
GL_AUX0 = _openframeworks.GL_AUX0
GL_AUX1 = _openframeworks.GL_AUX1
GL_AUX2 = _openframeworks.GL_AUX2
GL_AUX3 = _openframeworks.GL_AUX3
GL_COLOR_INDEX = _openframeworks.GL_COLOR_INDEX
GL_RED = _openframeworks.GL_RED
GL_GREEN = _openframeworks.GL_GREEN
GL_BLUE = _openframeworks.GL_BLUE
GL_ALPHA = _openframeworks.GL_ALPHA
GL_LUMINANCE = _openframeworks.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _openframeworks.GL_LUMINANCE_ALPHA
GL_ALPHA_BITS = _openframeworks.GL_ALPHA_BITS
GL_RED_BITS = _openframeworks.GL_RED_BITS
GL_GREEN_BITS = _openframeworks.GL_GREEN_BITS
GL_BLUE_BITS = _openframeworks.GL_BLUE_BITS
GL_INDEX_BITS = _openframeworks.GL_INDEX_BITS
GL_SUBPIXEL_BITS = _openframeworks.GL_SUBPIXEL_BITS
GL_AUX_BUFFERS = _openframeworks.GL_AUX_BUFFERS
GL_READ_BUFFER = _openframeworks.GL_READ_BUFFER
GL_DRAW_BUFFER = _openframeworks.GL_DRAW_BUFFER
GL_DOUBLEBUFFER = _openframeworks.GL_DOUBLEBUFFER
GL_STEREO = _openframeworks.GL_STEREO
GL_BITMAP = _openframeworks.GL_BITMAP
GL_COLOR = _openframeworks.GL_COLOR
GL_DEPTH = _openframeworks.GL_DEPTH
GL_STENCIL = _openframeworks.GL_STENCIL
GL_DITHER = _openframeworks.GL_DITHER
GL_RGB = _openframeworks.GL_RGB
GL_RGBA = _openframeworks.GL_RGBA
GL_MAX_LIST_NESTING = _openframeworks.GL_MAX_LIST_NESTING
GL_MAX_ATTRIB_STACK_DEPTH = _openframeworks.GL_MAX_ATTRIB_STACK_DEPTH
GL_MAX_MODELVIEW_STACK_DEPTH = _openframeworks.GL_MAX_MODELVIEW_STACK_DEPTH
GL_MAX_NAME_STACK_DEPTH = _openframeworks.GL_MAX_NAME_STACK_DEPTH
GL_MAX_PROJECTION_STACK_DEPTH = _openframeworks.GL_MAX_PROJECTION_STACK_DEPTH
GL_MAX_TEXTURE_STACK_DEPTH = _openframeworks.GL_MAX_TEXTURE_STACK_DEPTH
GL_MAX_EVAL_ORDER = _openframeworks.GL_MAX_EVAL_ORDER
GL_MAX_LIGHTS = _openframeworks.GL_MAX_LIGHTS
GL_MAX_CLIP_PLANES = _openframeworks.GL_MAX_CLIP_PLANES
GL_MAX_TEXTURE_SIZE = _openframeworks.GL_MAX_TEXTURE_SIZE
GL_MAX_PIXEL_MAP_TABLE = _openframeworks.GL_MAX_PIXEL_MAP_TABLE
GL_MAX_VIEWPORT_DIMS = _openframeworks.GL_MAX_VIEWPORT_DIMS
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _openframeworks.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
GL_ATTRIB_STACK_DEPTH = _openframeworks.GL_ATTRIB_STACK_DEPTH
GL_CLIENT_ATTRIB_STACK_DEPTH = _openframeworks.GL_CLIENT_ATTRIB_STACK_DEPTH
GL_COLOR_CLEAR_VALUE = _openframeworks.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _openframeworks.GL_COLOR_WRITEMASK
GL_CURRENT_INDEX = _openframeworks.GL_CURRENT_INDEX
GL_CURRENT_COLOR = _openframeworks.GL_CURRENT_COLOR
GL_CURRENT_NORMAL = _openframeworks.GL_CURRENT_NORMAL
GL_CURRENT_RASTER_COLOR = _openframeworks.GL_CURRENT_RASTER_COLOR
GL_CURRENT_RASTER_DISTANCE = _openframeworks.GL_CURRENT_RASTER_DISTANCE
GL_CURRENT_RASTER_INDEX = _openframeworks.GL_CURRENT_RASTER_INDEX
GL_CURRENT_RASTER_POSITION = _openframeworks.GL_CURRENT_RASTER_POSITION
GL_CURRENT_RASTER_TEXTURE_COORDS = _openframeworks.GL_CURRENT_RASTER_TEXTURE_COORDS
GL_CURRENT_RASTER_POSITION_VALID = _openframeworks.GL_CURRENT_RASTER_POSITION_VALID
GL_CURRENT_TEXTURE_COORDS = _openframeworks.GL_CURRENT_TEXTURE_COORDS
GL_INDEX_CLEAR_VALUE = _openframeworks.GL_INDEX_CLEAR_VALUE
GL_INDEX_MODE = _openframeworks.GL_INDEX_MODE
GL_INDEX_WRITEMASK = _openframeworks.GL_INDEX_WRITEMASK
GL_MODELVIEW_MATRIX = _openframeworks.GL_MODELVIEW_MATRIX
GL_MODELVIEW_STACK_DEPTH = _openframeworks.GL_MODELVIEW_STACK_DEPTH
GL_NAME_STACK_DEPTH = _openframeworks.GL_NAME_STACK_DEPTH
GL_PROJECTION_MATRIX = _openframeworks.GL_PROJECTION_MATRIX
GL_PROJECTION_STACK_DEPTH = _openframeworks.GL_PROJECTION_STACK_DEPTH
GL_RENDER_MODE = _openframeworks.GL_RENDER_MODE
GL_RGBA_MODE = _openframeworks.GL_RGBA_MODE
GL_TEXTURE_MATRIX = _openframeworks.GL_TEXTURE_MATRIX
GL_TEXTURE_STACK_DEPTH = _openframeworks.GL_TEXTURE_STACK_DEPTH
GL_VIEWPORT = _openframeworks.GL_VIEWPORT
GL_AUTO_NORMAL = _openframeworks.GL_AUTO_NORMAL
GL_MAP1_COLOR_4 = _openframeworks.GL_MAP1_COLOR_4
GL_MAP1_GRID_DOMAIN = _openframeworks.GL_MAP1_GRID_DOMAIN
GL_MAP1_GRID_SEGMENTS = _openframeworks.GL_MAP1_GRID_SEGMENTS
GL_MAP1_INDEX = _openframeworks.GL_MAP1_INDEX
GL_MAP1_NORMAL = _openframeworks.GL_MAP1_NORMAL
GL_MAP1_TEXTURE_COORD_1 = _openframeworks.GL_MAP1_TEXTURE_COORD_1
GL_MAP1_TEXTURE_COORD_2 = _openframeworks.GL_MAP1_TEXTURE_COORD_2
GL_MAP1_TEXTURE_COORD_3 = _openframeworks.GL_MAP1_TEXTURE_COORD_3
GL_MAP1_TEXTURE_COORD_4 = _openframeworks.GL_MAP1_TEXTURE_COORD_4
GL_MAP1_VERTEX_3 = _openframeworks.GL_MAP1_VERTEX_3
GL_MAP1_VERTEX_4 = _openframeworks.GL_MAP1_VERTEX_4
GL_MAP2_COLOR_4 = _openframeworks.GL_MAP2_COLOR_4
GL_MAP2_GRID_DOMAIN = _openframeworks.GL_MAP2_GRID_DOMAIN
GL_MAP2_GRID_SEGMENTS = _openframeworks.GL_MAP2_GRID_SEGMENTS
GL_MAP2_INDEX = _openframeworks.GL_MAP2_INDEX
GL_MAP2_NORMAL = _openframeworks.GL_MAP2_NORMAL
GL_MAP2_TEXTURE_COORD_1 = _openframeworks.GL_MAP2_TEXTURE_COORD_1
GL_MAP2_TEXTURE_COORD_2 = _openframeworks.GL_MAP2_TEXTURE_COORD_2
GL_MAP2_TEXTURE_COORD_3 = _openframeworks.GL_MAP2_TEXTURE_COORD_3
GL_MAP2_TEXTURE_COORD_4 = _openframeworks.GL_MAP2_TEXTURE_COORD_4
GL_MAP2_VERTEX_3 = _openframeworks.GL_MAP2_VERTEX_3
GL_MAP2_VERTEX_4 = _openframeworks.GL_MAP2_VERTEX_4
GL_COEFF = _openframeworks.GL_COEFF
GL_DOMAIN = _openframeworks.GL_DOMAIN
GL_ORDER = _openframeworks.GL_ORDER
GL_FOG_HINT = _openframeworks.GL_FOG_HINT
GL_LINE_SMOOTH_HINT = _openframeworks.GL_LINE_SMOOTH_HINT
GL_PERSPECTIVE_CORRECTION_HINT = _openframeworks.GL_PERSPECTIVE_CORRECTION_HINT
GL_POINT_SMOOTH_HINT = _openframeworks.GL_POINT_SMOOTH_HINT
GL_POLYGON_SMOOTH_HINT = _openframeworks.GL_POLYGON_SMOOTH_HINT
GL_DONT_CARE = _openframeworks.GL_DONT_CARE
GL_FASTEST = _openframeworks.GL_FASTEST
GL_NICEST = _openframeworks.GL_NICEST
GL_SCISSOR_TEST = _openframeworks.GL_SCISSOR_TEST
GL_SCISSOR_BOX = _openframeworks.GL_SCISSOR_BOX
GL_MAP_COLOR = _openframeworks.GL_MAP_COLOR
GL_MAP_STENCIL = _openframeworks.GL_MAP_STENCIL
GL_INDEX_SHIFT = _openframeworks.GL_INDEX_SHIFT
GL_INDEX_OFFSET = _openframeworks.GL_INDEX_OFFSET
GL_RED_SCALE = _openframeworks.GL_RED_SCALE
GL_RED_BIAS = _openframeworks.GL_RED_BIAS
GL_GREEN_SCALE = _openframeworks.GL_GREEN_SCALE
GL_GREEN_BIAS = _openframeworks.GL_GREEN_BIAS
GL_BLUE_SCALE = _openframeworks.GL_BLUE_SCALE
GL_BLUE_BIAS = _openframeworks.GL_BLUE_BIAS
GL_ALPHA_SCALE = _openframeworks.GL_ALPHA_SCALE
GL_ALPHA_BIAS = _openframeworks.GL_ALPHA_BIAS
GL_DEPTH_SCALE = _openframeworks.GL_DEPTH_SCALE
GL_DEPTH_BIAS = _openframeworks.GL_DEPTH_BIAS
GL_PIXEL_MAP_S_TO_S_SIZE = _openframeworks.GL_PIXEL_MAP_S_TO_S_SIZE
GL_PIXEL_MAP_I_TO_I_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_I_SIZE
GL_PIXEL_MAP_I_TO_R_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_R_SIZE
GL_PIXEL_MAP_I_TO_G_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_G_SIZE
GL_PIXEL_MAP_I_TO_B_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_B_SIZE
GL_PIXEL_MAP_I_TO_A_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_A_SIZE
GL_PIXEL_MAP_R_TO_R_SIZE = _openframeworks.GL_PIXEL_MAP_R_TO_R_SIZE
GL_PIXEL_MAP_G_TO_G_SIZE = _openframeworks.GL_PIXEL_MAP_G_TO_G_SIZE
GL_PIXEL_MAP_B_TO_B_SIZE = _openframeworks.GL_PIXEL_MAP_B_TO_B_SIZE
GL_PIXEL_MAP_A_TO_A_SIZE = _openframeworks.GL_PIXEL_MAP_A_TO_A_SIZE
GL_PIXEL_MAP_S_TO_S = _openframeworks.GL_PIXEL_MAP_S_TO_S
GL_PIXEL_MAP_I_TO_I = _openframeworks.GL_PIXEL_MAP_I_TO_I
GL_PIXEL_MAP_I_TO_R = _openframeworks.GL_PIXEL_MAP_I_TO_R
GL_PIXEL_MAP_I_TO_G = _openframeworks.GL_PIXEL_MAP_I_TO_G
GL_PIXEL_MAP_I_TO_B = _openframeworks.GL_PIXEL_MAP_I_TO_B
GL_PIXEL_MAP_I_TO_A = _openframeworks.GL_PIXEL_MAP_I_TO_A
GL_PIXEL_MAP_R_TO_R = _openframeworks.GL_PIXEL_MAP_R_TO_R
GL_PIXEL_MAP_G_TO_G = _openframeworks.GL_PIXEL_MAP_G_TO_G
GL_PIXEL_MAP_B_TO_B = _openframeworks.GL_PIXEL_MAP_B_TO_B
GL_PIXEL_MAP_A_TO_A = _openframeworks.GL_PIXEL_MAP_A_TO_A
GL_PACK_ALIGNMENT = _openframeworks.GL_PACK_ALIGNMENT
GL_PACK_LSB_FIRST = _openframeworks.GL_PACK_LSB_FIRST
GL_PACK_ROW_LENGTH = _openframeworks.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_PIXELS = _openframeworks.GL_PACK_SKIP_PIXELS
GL_PACK_SKIP_ROWS = _openframeworks.GL_PACK_SKIP_ROWS
GL_PACK_SWAP_BYTES = _openframeworks.GL_PACK_SWAP_BYTES
GL_UNPACK_ALIGNMENT = _openframeworks.GL_UNPACK_ALIGNMENT
GL_UNPACK_LSB_FIRST = _openframeworks.GL_UNPACK_LSB_FIRST
GL_UNPACK_ROW_LENGTH = _openframeworks.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_PIXELS = _openframeworks.GL_UNPACK_SKIP_PIXELS
GL_UNPACK_SKIP_ROWS = _openframeworks.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SWAP_BYTES = _openframeworks.GL_UNPACK_SWAP_BYTES
GL_ZOOM_X = _openframeworks.GL_ZOOM_X
GL_ZOOM_Y = _openframeworks.GL_ZOOM_Y
GL_TEXTURE_ENV = _openframeworks.GL_TEXTURE_ENV
GL_TEXTURE_ENV_MODE = _openframeworks.GL_TEXTURE_ENV_MODE
GL_TEXTURE_1D = _openframeworks.GL_TEXTURE_1D
GL_TEXTURE_2D = _openframeworks.GL_TEXTURE_2D
GL_TEXTURE_WRAP_S = _openframeworks.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _openframeworks.GL_TEXTURE_WRAP_T
GL_TEXTURE_MAG_FILTER = _openframeworks.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _openframeworks.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_ENV_COLOR = _openframeworks.GL_TEXTURE_ENV_COLOR
GL_TEXTURE_GEN_S = _openframeworks.GL_TEXTURE_GEN_S
GL_TEXTURE_GEN_T = _openframeworks.GL_TEXTURE_GEN_T
GL_TEXTURE_GEN_MODE = _openframeworks.GL_TEXTURE_GEN_MODE
GL_TEXTURE_BORDER_COLOR = _openframeworks.GL_TEXTURE_BORDER_COLOR
GL_TEXTURE_WIDTH = _openframeworks.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _openframeworks.GL_TEXTURE_HEIGHT
GL_TEXTURE_BORDER = _openframeworks.GL_TEXTURE_BORDER
GL_TEXTURE_COMPONENTS = _openframeworks.GL_TEXTURE_COMPONENTS
GL_TEXTURE_RED_SIZE = _openframeworks.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _openframeworks.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _openframeworks.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _openframeworks.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_LUMINANCE_SIZE = _openframeworks.GL_TEXTURE_LUMINANCE_SIZE
GL_TEXTURE_INTENSITY_SIZE = _openframeworks.GL_TEXTURE_INTENSITY_SIZE
GL_NEAREST_MIPMAP_NEAREST = _openframeworks.GL_NEAREST_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _openframeworks.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_NEAREST = _openframeworks.GL_LINEAR_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_LINEAR = _openframeworks.GL_LINEAR_MIPMAP_LINEAR
GL_OBJECT_LINEAR = _openframeworks.GL_OBJECT_LINEAR
GL_OBJECT_PLANE = _openframeworks.GL_OBJECT_PLANE
GL_EYE_LINEAR = _openframeworks.GL_EYE_LINEAR
GL_EYE_PLANE = _openframeworks.GL_EYE_PLANE
GL_SPHERE_MAP = _openframeworks.GL_SPHERE_MAP
GL_DECAL = _openframeworks.GL_DECAL
GL_MODULATE = _openframeworks.GL_MODULATE
GL_NEAREST = _openframeworks.GL_NEAREST
GL_REPEAT = _openframeworks.GL_REPEAT
GL_CLAMP = _openframeworks.GL_CLAMP
GL_S = _openframeworks.GL_S
GL_T = _openframeworks.GL_T
GL_R = _openframeworks.GL_R
GL_Q = _openframeworks.GL_Q
GL_TEXTURE_GEN_R = _openframeworks.GL_TEXTURE_GEN_R
GL_TEXTURE_GEN_Q = _openframeworks.GL_TEXTURE_GEN_Q
GL_VENDOR = _openframeworks.GL_VENDOR
GL_RENDERER = _openframeworks.GL_RENDERER
GL_VERSION = _openframeworks.GL_VERSION
GL_EXTENSIONS = _openframeworks.GL_EXTENSIONS
GL_NO_ERROR = _openframeworks.GL_NO_ERROR
GL_INVALID_VALUE = _openframeworks.GL_INVALID_VALUE
GL_INVALID_ENUM = _openframeworks.GL_INVALID_ENUM
GL_INVALID_OPERATION = _openframeworks.GL_INVALID_OPERATION
GL_STACK_OVERFLOW = _openframeworks.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _openframeworks.GL_STACK_UNDERFLOW
GL_OUT_OF_MEMORY = _openframeworks.GL_OUT_OF_MEMORY
GL_CURRENT_BIT = _openframeworks.GL_CURRENT_BIT
GL_POINT_BIT = _openframeworks.GL_POINT_BIT
GL_LINE_BIT = _openframeworks.GL_LINE_BIT
GL_POLYGON_BIT = _openframeworks.GL_POLYGON_BIT
GL_POLYGON_STIPPLE_BIT = _openframeworks.GL_POLYGON_STIPPLE_BIT
GL_PIXEL_MODE_BIT = _openframeworks.GL_PIXEL_MODE_BIT
GL_LIGHTING_BIT = _openframeworks.GL_LIGHTING_BIT
GL_FOG_BIT = _openframeworks.GL_FOG_BIT
GL_DEPTH_BUFFER_BIT = _openframeworks.GL_DEPTH_BUFFER_BIT
GL_ACCUM_BUFFER_BIT = _openframeworks.GL_ACCUM_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _openframeworks.GL_STENCIL_BUFFER_BIT
GL_VIEWPORT_BIT = _openframeworks.GL_VIEWPORT_BIT
GL_TRANSFORM_BIT = _openframeworks.GL_TRANSFORM_BIT
GL_ENABLE_BIT = _openframeworks.GL_ENABLE_BIT
GL_COLOR_BUFFER_BIT = _openframeworks.GL_COLOR_BUFFER_BIT
GL_HINT_BIT = _openframeworks.GL_HINT_BIT
GL_EVAL_BIT = _openframeworks.GL_EVAL_BIT
GL_LIST_BIT = _openframeworks.GL_LIST_BIT
GL_TEXTURE_BIT = _openframeworks.GL_TEXTURE_BIT
GL_SCISSOR_BIT = _openframeworks.GL_SCISSOR_BIT
GL_ALL_ATTRIB_BITS = _openframeworks.GL_ALL_ATTRIB_BITS
GL_PROXY_TEXTURE_1D = _openframeworks.GL_PROXY_TEXTURE_1D
GL_PROXY_TEXTURE_2D = _openframeworks.GL_PROXY_TEXTURE_2D
GL_TEXTURE_PRIORITY = _openframeworks.GL_TEXTURE_PRIORITY
GL_TEXTURE_RESIDENT = _openframeworks.GL_TEXTURE_RESIDENT
GL_TEXTURE_BINDING_1D = _openframeworks.GL_TEXTURE_BINDING_1D
GL_TEXTURE_BINDING_2D = _openframeworks.GL_TEXTURE_BINDING_2D
GL_TEXTURE_INTERNAL_FORMAT = _openframeworks.GL_TEXTURE_INTERNAL_FORMAT
GL_ALPHA4 = _openframeworks.GL_ALPHA4
GL_ALPHA8 = _openframeworks.GL_ALPHA8
GL_ALPHA12 = _openframeworks.GL_ALPHA12
GL_ALPHA16 = _openframeworks.GL_ALPHA16
GL_LUMINANCE4 = _openframeworks.GL_LUMINANCE4
GL_LUMINANCE8 = _openframeworks.GL_LUMINANCE8
GL_LUMINANCE12 = _openframeworks.GL_LUMINANCE12
GL_LUMINANCE16 = _openframeworks.GL_LUMINANCE16
GL_LUMINANCE4_ALPHA4 = _openframeworks.GL_LUMINANCE4_ALPHA4
GL_LUMINANCE6_ALPHA2 = _openframeworks.GL_LUMINANCE6_ALPHA2
GL_LUMINANCE8_ALPHA8 = _openframeworks.GL_LUMINANCE8_ALPHA8
GL_LUMINANCE12_ALPHA4 = _openframeworks.GL_LUMINANCE12_ALPHA4
GL_LUMINANCE12_ALPHA12 = _openframeworks.GL_LUMINANCE12_ALPHA12
GL_LUMINANCE16_ALPHA16 = _openframeworks.GL_LUMINANCE16_ALPHA16
GL_INTENSITY = _openframeworks.GL_INTENSITY
GL_INTENSITY4 = _openframeworks.GL_INTENSITY4
GL_INTENSITY8 = _openframeworks.GL_INTENSITY8
GL_INTENSITY12 = _openframeworks.GL_INTENSITY12
GL_INTENSITY16 = _openframeworks.GL_INTENSITY16
GL_R3_G3_B2 = _openframeworks.GL_R3_G3_B2
GL_RGB4 = _openframeworks.GL_RGB4
GL_RGB5 = _openframeworks.GL_RGB5
GL_RGB8 = _openframeworks.GL_RGB8
GL_RGB10 = _openframeworks.GL_RGB10
GL_RGB12 = _openframeworks.GL_RGB12
GL_RGB16 = _openframeworks.GL_RGB16
GL_RGBA2 = _openframeworks.GL_RGBA2
GL_RGBA4 = _openframeworks.GL_RGBA4
GL_RGB5_A1 = _openframeworks.GL_RGB5_A1
GL_RGBA8 = _openframeworks.GL_RGBA8
GL_RGB10_A2 = _openframeworks.GL_RGB10_A2
GL_RGBA12 = _openframeworks.GL_RGBA12
GL_RGBA16 = _openframeworks.GL_RGBA16
GL_CLIENT_PIXEL_STORE_BIT = _openframeworks.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _openframeworks.GL_CLIENT_VERTEX_ARRAY_BIT
GL_ALL_CLIENT_ATTRIB_BITS = _openframeworks.GL_ALL_CLIENT_ATTRIB_BITS
GL_CLIENT_ALL_ATTRIB_BITS = _openframeworks.GL_CLIENT_ALL_ATTRIB_BITS

def glClearIndex(*args):
  return _openframeworks.glClearIndex(*args)
glClearIndex = _openframeworks.glClearIndex

def glClearColor(*args):
  return _openframeworks.glClearColor(*args)
glClearColor = _openframeworks.glClearColor

def glClear(*args):
  return _openframeworks.glClear(*args)
glClear = _openframeworks.glClear

def glIndexMask(*args):
  return _openframeworks.glIndexMask(*args)
glIndexMask = _openframeworks.glIndexMask

def glColorMask(*args):
  return _openframeworks.glColorMask(*args)
glColorMask = _openframeworks.glColorMask

def glAlphaFunc(*args):
  return _openframeworks.glAlphaFunc(*args)
glAlphaFunc = _openframeworks.glAlphaFunc

def glBlendFunc(*args):
  return _openframeworks.glBlendFunc(*args)
glBlendFunc = _openframeworks.glBlendFunc

def glLogicOp(*args):
  return _openframeworks.glLogicOp(*args)
glLogicOp = _openframeworks.glLogicOp

def glCullFace(*args):
  return _openframeworks.glCullFace(*args)
glCullFace = _openframeworks.glCullFace

def glFrontFace(*args):
  return _openframeworks.glFrontFace(*args)
glFrontFace = _openframeworks.glFrontFace

def glPointSize(*args):
  return _openframeworks.glPointSize(*args)
glPointSize = _openframeworks.glPointSize

def glLineWidth(*args):
  return _openframeworks.glLineWidth(*args)
glLineWidth = _openframeworks.glLineWidth

def glLineStipple(*args):
  return _openframeworks.glLineStipple(*args)
glLineStipple = _openframeworks.glLineStipple

def glPolygonMode(*args):
  return _openframeworks.glPolygonMode(*args)
glPolygonMode = _openframeworks.glPolygonMode

def glPolygonOffset(*args):
  return _openframeworks.glPolygonOffset(*args)
glPolygonOffset = _openframeworks.glPolygonOffset

def glPolygonStipple(*args):
  return _openframeworks.glPolygonStipple(*args)
glPolygonStipple = _openframeworks.glPolygonStipple

def glGetPolygonStipple(*args):
  return _openframeworks.glGetPolygonStipple(*args)
glGetPolygonStipple = _openframeworks.glGetPolygonStipple

def glEdgeFlag(*args):
  return _openframeworks.glEdgeFlag(*args)
glEdgeFlag = _openframeworks.glEdgeFlag

def glEdgeFlagv(*args):
  return _openframeworks.glEdgeFlagv(*args)
glEdgeFlagv = _openframeworks.glEdgeFlagv

def glScissor(*args):
  return _openframeworks.glScissor(*args)
glScissor = _openframeworks.glScissor

def glClipPlane(*args):
  return _openframeworks.glClipPlane(*args)
glClipPlane = _openframeworks.glClipPlane

def glGetClipPlane(*args):
  return _openframeworks.glGetClipPlane(*args)
glGetClipPlane = _openframeworks.glGetClipPlane

def glDrawBuffer(*args):
  return _openframeworks.glDrawBuffer(*args)
glDrawBuffer = _openframeworks.glDrawBuffer

def glReadBuffer(*args):
  return _openframeworks.glReadBuffer(*args)
glReadBuffer = _openframeworks.glReadBuffer

def glEnable(*args):
  return _openframeworks.glEnable(*args)
glEnable = _openframeworks.glEnable

def glDisable(*args):
  return _openframeworks.glDisable(*args)
glDisable = _openframeworks.glDisable

def glIsEnabled(*args):
  return _openframeworks.glIsEnabled(*args)
glIsEnabled = _openframeworks.glIsEnabled

def glEnableClientState(*args):
  return _openframeworks.glEnableClientState(*args)
glEnableClientState = _openframeworks.glEnableClientState

def glDisableClientState(*args):
  return _openframeworks.glDisableClientState(*args)
glDisableClientState = _openframeworks.glDisableClientState

def glGetBooleanv(*args):
  return _openframeworks.glGetBooleanv(*args)
glGetBooleanv = _openframeworks.glGetBooleanv

def glGetDoublev(*args):
  return _openframeworks.glGetDoublev(*args)
glGetDoublev = _openframeworks.glGetDoublev

def glGetFloatv(*args):
  return _openframeworks.glGetFloatv(*args)
glGetFloatv = _openframeworks.glGetFloatv

def glGetIntegerv(*args):
  return _openframeworks.glGetIntegerv(*args)
glGetIntegerv = _openframeworks.glGetIntegerv

def glPushAttrib(*args):
  return _openframeworks.glPushAttrib(*args)
glPushAttrib = _openframeworks.glPushAttrib

def glPopAttrib():
  return _openframeworks.glPopAttrib()
glPopAttrib = _openframeworks.glPopAttrib

def glPushClientAttrib(*args):
  return _openframeworks.glPushClientAttrib(*args)
glPushClientAttrib = _openframeworks.glPushClientAttrib

def glPopClientAttrib():
  return _openframeworks.glPopClientAttrib()
glPopClientAttrib = _openframeworks.glPopClientAttrib

def glRenderMode(*args):
  return _openframeworks.glRenderMode(*args)
glRenderMode = _openframeworks.glRenderMode

def glGetError():
  return _openframeworks.glGetError()
glGetError = _openframeworks.glGetError

def glGetString(*args):
  return _openframeworks.glGetString(*args)
glGetString = _openframeworks.glGetString

def glFinish():
  return _openframeworks.glFinish()
glFinish = _openframeworks.glFinish

def glFlush():
  return _openframeworks.glFlush()
glFlush = _openframeworks.glFlush

def glHint(*args):
  return _openframeworks.glHint(*args)
glHint = _openframeworks.glHint

def glClearDepth(*args):
  return _openframeworks.glClearDepth(*args)
glClearDepth = _openframeworks.glClearDepth

def glDepthFunc(*args):
  return _openframeworks.glDepthFunc(*args)
glDepthFunc = _openframeworks.glDepthFunc

def glDepthMask(*args):
  return _openframeworks.glDepthMask(*args)
glDepthMask = _openframeworks.glDepthMask

def glDepthRange(*args):
  return _openframeworks.glDepthRange(*args)
glDepthRange = _openframeworks.glDepthRange

def glClearAccum(*args):
  return _openframeworks.glClearAccum(*args)
glClearAccum = _openframeworks.glClearAccum

def glAccum(*args):
  return _openframeworks.glAccum(*args)
glAccum = _openframeworks.glAccum

def glMatrixMode(*args):
  return _openframeworks.glMatrixMode(*args)
glMatrixMode = _openframeworks.glMatrixMode

def glOrtho(*args):
  return _openframeworks.glOrtho(*args)
glOrtho = _openframeworks.glOrtho

def glFrustum(*args):
  return _openframeworks.glFrustum(*args)
glFrustum = _openframeworks.glFrustum

def glViewport(*args):
  return _openframeworks.glViewport(*args)
glViewport = _openframeworks.glViewport

def glPushMatrix():
  return _openframeworks.glPushMatrix()
glPushMatrix = _openframeworks.glPushMatrix

def glPopMatrix():
  return _openframeworks.glPopMatrix()
glPopMatrix = _openframeworks.glPopMatrix

def glLoadIdentity():
  return _openframeworks.glLoadIdentity()
glLoadIdentity = _openframeworks.glLoadIdentity

def glLoadMatrixd(*args):
  return _openframeworks.glLoadMatrixd(*args)
glLoadMatrixd = _openframeworks.glLoadMatrixd

def glLoadMatrixf(*args):
  return _openframeworks.glLoadMatrixf(*args)
glLoadMatrixf = _openframeworks.glLoadMatrixf

def glMultMatrixd(*args):
  return _openframeworks.glMultMatrixd(*args)
glMultMatrixd = _openframeworks.glMultMatrixd

def glMultMatrixf(*args):
  return _openframeworks.glMultMatrixf(*args)
glMultMatrixf = _openframeworks.glMultMatrixf

def glRotated(*args):
  return _openframeworks.glRotated(*args)
glRotated = _openframeworks.glRotated

def glRotatef(*args):
  return _openframeworks.glRotatef(*args)
glRotatef = _openframeworks.glRotatef

def glScaled(*args):
  return _openframeworks.glScaled(*args)
glScaled = _openframeworks.glScaled

def glScalef(*args):
  return _openframeworks.glScalef(*args)
glScalef = _openframeworks.glScalef

def glTranslated(*args):
  return _openframeworks.glTranslated(*args)
glTranslated = _openframeworks.glTranslated

def glTranslatef(*args):
  return _openframeworks.glTranslatef(*args)
glTranslatef = _openframeworks.glTranslatef

def glIsList(*args):
  return _openframeworks.glIsList(*args)
glIsList = _openframeworks.glIsList

def glDeleteLists(*args):
  return _openframeworks.glDeleteLists(*args)
glDeleteLists = _openframeworks.glDeleteLists

def glGenLists(*args):
  return _openframeworks.glGenLists(*args)
glGenLists = _openframeworks.glGenLists

def glNewList(*args):
  return _openframeworks.glNewList(*args)
glNewList = _openframeworks.glNewList

def glEndList():
  return _openframeworks.glEndList()
glEndList = _openframeworks.glEndList

def glCallList(*args):
  return _openframeworks.glCallList(*args)
glCallList = _openframeworks.glCallList

def glCallLists(*args):
  return _openframeworks.glCallLists(*args)
glCallLists = _openframeworks.glCallLists

def glListBase(*args):
  return _openframeworks.glListBase(*args)
glListBase = _openframeworks.glListBase

def glBegin(*args):
  return _openframeworks.glBegin(*args)
glBegin = _openframeworks.glBegin

def glEnd():
  return _openframeworks.glEnd()
glEnd = _openframeworks.glEnd

def glVertex2d(*args):
  return _openframeworks.glVertex2d(*args)
glVertex2d = _openframeworks.glVertex2d

def glVertex2f(*args):
  return _openframeworks.glVertex2f(*args)
glVertex2f = _openframeworks.glVertex2f

def glVertex2i(*args):
  return _openframeworks.glVertex2i(*args)
glVertex2i = _openframeworks.glVertex2i

def glVertex2s(*args):
  return _openframeworks.glVertex2s(*args)
glVertex2s = _openframeworks.glVertex2s

def glVertex3d(*args):
  return _openframeworks.glVertex3d(*args)
glVertex3d = _openframeworks.glVertex3d

def glVertex3f(*args):
  return _openframeworks.glVertex3f(*args)
glVertex3f = _openframeworks.glVertex3f

def glVertex3i(*args):
  return _openframeworks.glVertex3i(*args)
glVertex3i = _openframeworks.glVertex3i

def glVertex3s(*args):
  return _openframeworks.glVertex3s(*args)
glVertex3s = _openframeworks.glVertex3s

def glVertex4d(*args):
  return _openframeworks.glVertex4d(*args)
glVertex4d = _openframeworks.glVertex4d

def glVertex4f(*args):
  return _openframeworks.glVertex4f(*args)
glVertex4f = _openframeworks.glVertex4f

def glVertex4i(*args):
  return _openframeworks.glVertex4i(*args)
glVertex4i = _openframeworks.glVertex4i

def glVertex4s(*args):
  return _openframeworks.glVertex4s(*args)
glVertex4s = _openframeworks.glVertex4s

def glVertex2dv(*args):
  return _openframeworks.glVertex2dv(*args)
glVertex2dv = _openframeworks.glVertex2dv

def glVertex2fv(*args):
  return _openframeworks.glVertex2fv(*args)
glVertex2fv = _openframeworks.glVertex2fv

def glVertex2iv(*args):
  return _openframeworks.glVertex2iv(*args)
glVertex2iv = _openframeworks.glVertex2iv

def glVertex2sv(*args):
  return _openframeworks.glVertex2sv(*args)
glVertex2sv = _openframeworks.glVertex2sv

def glVertex3dv(*args):
  return _openframeworks.glVertex3dv(*args)
glVertex3dv = _openframeworks.glVertex3dv

def glVertex3fv(*args):
  return _openframeworks.glVertex3fv(*args)
glVertex3fv = _openframeworks.glVertex3fv

def glVertex3iv(*args):
  return _openframeworks.glVertex3iv(*args)
glVertex3iv = _openframeworks.glVertex3iv

def glVertex3sv(*args):
  return _openframeworks.glVertex3sv(*args)
glVertex3sv = _openframeworks.glVertex3sv

def glVertex4dv(*args):
  return _openframeworks.glVertex4dv(*args)
glVertex4dv = _openframeworks.glVertex4dv

def glVertex4fv(*args):
  return _openframeworks.glVertex4fv(*args)
glVertex4fv = _openframeworks.glVertex4fv

def glVertex4iv(*args):
  return _openframeworks.glVertex4iv(*args)
glVertex4iv = _openframeworks.glVertex4iv

def glVertex4sv(*args):
  return _openframeworks.glVertex4sv(*args)
glVertex4sv = _openframeworks.glVertex4sv

def glNormal3b(*args):
  return _openframeworks.glNormal3b(*args)
glNormal3b = _openframeworks.glNormal3b

def glNormal3d(*args):
  return _openframeworks.glNormal3d(*args)
glNormal3d = _openframeworks.glNormal3d

def glNormal3f(*args):
  return _openframeworks.glNormal3f(*args)
glNormal3f = _openframeworks.glNormal3f

def glNormal3i(*args):
  return _openframeworks.glNormal3i(*args)
glNormal3i = _openframeworks.glNormal3i

def glNormal3s(*args):
  return _openframeworks.glNormal3s(*args)
glNormal3s = _openframeworks.glNormal3s

def glNormal3bv(*args):
  return _openframeworks.glNormal3bv(*args)
glNormal3bv = _openframeworks.glNormal3bv

def glNormal3dv(*args):
  return _openframeworks.glNormal3dv(*args)
glNormal3dv = _openframeworks.glNormal3dv

def glNormal3fv(*args):
  return _openframeworks.glNormal3fv(*args)
glNormal3fv = _openframeworks.glNormal3fv

def glNormal3iv(*args):
  return _openframeworks.glNormal3iv(*args)
glNormal3iv = _openframeworks.glNormal3iv

def glNormal3sv(*args):
  return _openframeworks.glNormal3sv(*args)
glNormal3sv = _openframeworks.glNormal3sv

def glIndexd(*args):
  return _openframeworks.glIndexd(*args)
glIndexd = _openframeworks.glIndexd

def glIndexf(*args):
  return _openframeworks.glIndexf(*args)
glIndexf = _openframeworks.glIndexf

def glIndexi(*args):
  return _openframeworks.glIndexi(*args)
glIndexi = _openframeworks.glIndexi

def glIndexs(*args):
  return _openframeworks.glIndexs(*args)
glIndexs = _openframeworks.glIndexs

def glIndexub(*args):
  return _openframeworks.glIndexub(*args)
glIndexub = _openframeworks.glIndexub

def glIndexdv(*args):
  return _openframeworks.glIndexdv(*args)
glIndexdv = _openframeworks.glIndexdv

def glIndexfv(*args):
  return _openframeworks.glIndexfv(*args)
glIndexfv = _openframeworks.glIndexfv

def glIndexiv(*args):
  return _openframeworks.glIndexiv(*args)
glIndexiv = _openframeworks.glIndexiv

def glIndexsv(*args):
  return _openframeworks.glIndexsv(*args)
glIndexsv = _openframeworks.glIndexsv

def glIndexubv(*args):
  return _openframeworks.glIndexubv(*args)
glIndexubv = _openframeworks.glIndexubv

def glColor3b(*args):
  return _openframeworks.glColor3b(*args)
glColor3b = _openframeworks.glColor3b

def glColor3d(*args):
  return _openframeworks.glColor3d(*args)
glColor3d = _openframeworks.glColor3d

def glColor3f(*args):
  return _openframeworks.glColor3f(*args)
glColor3f = _openframeworks.glColor3f

def glColor3i(*args):
  return _openframeworks.glColor3i(*args)
glColor3i = _openframeworks.glColor3i

def glColor3s(*args):
  return _openframeworks.glColor3s(*args)
glColor3s = _openframeworks.glColor3s

def glColor3ub(*args):
  return _openframeworks.glColor3ub(*args)
glColor3ub = _openframeworks.glColor3ub

def glColor3ui(*args):
  return _openframeworks.glColor3ui(*args)
glColor3ui = _openframeworks.glColor3ui

def glColor3us(*args):
  return _openframeworks.glColor3us(*args)
glColor3us = _openframeworks.glColor3us

def glColor4b(*args):
  return _openframeworks.glColor4b(*args)
glColor4b = _openframeworks.glColor4b

def glColor4d(*args):
  return _openframeworks.glColor4d(*args)
glColor4d = _openframeworks.glColor4d

def glColor4f(*args):
  return _openframeworks.glColor4f(*args)
glColor4f = _openframeworks.glColor4f

def glColor4i(*args):
  return _openframeworks.glColor4i(*args)
glColor4i = _openframeworks.glColor4i

def glColor4s(*args):
  return _openframeworks.glColor4s(*args)
glColor4s = _openframeworks.glColor4s

def glColor4ub(*args):
  return _openframeworks.glColor4ub(*args)
glColor4ub = _openframeworks.glColor4ub

def glColor4ui(*args):
  return _openframeworks.glColor4ui(*args)
glColor4ui = _openframeworks.glColor4ui

def glColor4us(*args):
  return _openframeworks.glColor4us(*args)
glColor4us = _openframeworks.glColor4us

def glColor3bv(*args):
  return _openframeworks.glColor3bv(*args)
glColor3bv = _openframeworks.glColor3bv

def glColor3dv(*args):
  return _openframeworks.glColor3dv(*args)
glColor3dv = _openframeworks.glColor3dv

def glColor3fv(*args):
  return _openframeworks.glColor3fv(*args)
glColor3fv = _openframeworks.glColor3fv

def glColor3iv(*args):
  return _openframeworks.glColor3iv(*args)
glColor3iv = _openframeworks.glColor3iv

def glColor3sv(*args):
  return _openframeworks.glColor3sv(*args)
glColor3sv = _openframeworks.glColor3sv

def glColor3ubv(*args):
  return _openframeworks.glColor3ubv(*args)
glColor3ubv = _openframeworks.glColor3ubv

def glColor3uiv(*args):
  return _openframeworks.glColor3uiv(*args)
glColor3uiv = _openframeworks.glColor3uiv

def glColor3usv(*args):
  return _openframeworks.glColor3usv(*args)
glColor3usv = _openframeworks.glColor3usv

def glColor4bv(*args):
  return _openframeworks.glColor4bv(*args)
glColor4bv = _openframeworks.glColor4bv

def glColor4dv(*args):
  return _openframeworks.glColor4dv(*args)
glColor4dv = _openframeworks.glColor4dv

def glColor4fv(*args):
  return _openframeworks.glColor4fv(*args)
glColor4fv = _openframeworks.glColor4fv

def glColor4iv(*args):
  return _openframeworks.glColor4iv(*args)
glColor4iv = _openframeworks.glColor4iv

def glColor4sv(*args):
  return _openframeworks.glColor4sv(*args)
glColor4sv = _openframeworks.glColor4sv

def glColor4ubv(*args):
  return _openframeworks.glColor4ubv(*args)
glColor4ubv = _openframeworks.glColor4ubv

def glColor4uiv(*args):
  return _openframeworks.glColor4uiv(*args)
glColor4uiv = _openframeworks.glColor4uiv

def glColor4usv(*args):
  return _openframeworks.glColor4usv(*args)
glColor4usv = _openframeworks.glColor4usv

def glTexCoord1d(*args):
  return _openframeworks.glTexCoord1d(*args)
glTexCoord1d = _openframeworks.glTexCoord1d

def glTexCoord1f(*args):
  return _openframeworks.glTexCoord1f(*args)
glTexCoord1f = _openframeworks.glTexCoord1f

def glTexCoord1i(*args):
  return _openframeworks.glTexCoord1i(*args)
glTexCoord1i = _openframeworks.glTexCoord1i

def glTexCoord1s(*args):
  return _openframeworks.glTexCoord1s(*args)
glTexCoord1s = _openframeworks.glTexCoord1s

def glTexCoord2d(*args):
  return _openframeworks.glTexCoord2d(*args)
glTexCoord2d = _openframeworks.glTexCoord2d

def glTexCoord2f(*args):
  return _openframeworks.glTexCoord2f(*args)
glTexCoord2f = _openframeworks.glTexCoord2f

def glTexCoord2i(*args):
  return _openframeworks.glTexCoord2i(*args)
glTexCoord2i = _openframeworks.glTexCoord2i

def glTexCoord2s(*args):
  return _openframeworks.glTexCoord2s(*args)
glTexCoord2s = _openframeworks.glTexCoord2s

def glTexCoord3d(*args):
  return _openframeworks.glTexCoord3d(*args)
glTexCoord3d = _openframeworks.glTexCoord3d

def glTexCoord3f(*args):
  return _openframeworks.glTexCoord3f(*args)
glTexCoord3f = _openframeworks.glTexCoord3f

def glTexCoord3i(*args):
  return _openframeworks.glTexCoord3i(*args)
glTexCoord3i = _openframeworks.glTexCoord3i

def glTexCoord3s(*args):
  return _openframeworks.glTexCoord3s(*args)
glTexCoord3s = _openframeworks.glTexCoord3s

def glTexCoord4d(*args):
  return _openframeworks.glTexCoord4d(*args)
glTexCoord4d = _openframeworks.glTexCoord4d

def glTexCoord4f(*args):
  return _openframeworks.glTexCoord4f(*args)
glTexCoord4f = _openframeworks.glTexCoord4f

def glTexCoord4i(*args):
  return _openframeworks.glTexCoord4i(*args)
glTexCoord4i = _openframeworks.glTexCoord4i

def glTexCoord4s(*args):
  return _openframeworks.glTexCoord4s(*args)
glTexCoord4s = _openframeworks.glTexCoord4s

def glTexCoord1dv(*args):
  return _openframeworks.glTexCoord1dv(*args)
glTexCoord1dv = _openframeworks.glTexCoord1dv

def glTexCoord1fv(*args):
  return _openframeworks.glTexCoord1fv(*args)
glTexCoord1fv = _openframeworks.glTexCoord1fv

def glTexCoord1iv(*args):
  return _openframeworks.glTexCoord1iv(*args)
glTexCoord1iv = _openframeworks.glTexCoord1iv

def glTexCoord1sv(*args):
  return _openframeworks.glTexCoord1sv(*args)
glTexCoord1sv = _openframeworks.glTexCoord1sv

def glTexCoord2dv(*args):
  return _openframeworks.glTexCoord2dv(*args)
glTexCoord2dv = _openframeworks.glTexCoord2dv

def glTexCoord2fv(*args):
  return _openframeworks.glTexCoord2fv(*args)
glTexCoord2fv = _openframeworks.glTexCoord2fv

def glTexCoord2iv(*args):
  return _openframeworks.glTexCoord2iv(*args)
glTexCoord2iv = _openframeworks.glTexCoord2iv

def glTexCoord2sv(*args):
  return _openframeworks.glTexCoord2sv(*args)
glTexCoord2sv = _openframeworks.glTexCoord2sv

def glTexCoord3dv(*args):
  return _openframeworks.glTexCoord3dv(*args)
glTexCoord3dv = _openframeworks.glTexCoord3dv

def glTexCoord3fv(*args):
  return _openframeworks.glTexCoord3fv(*args)
glTexCoord3fv = _openframeworks.glTexCoord3fv

def glTexCoord3iv(*args):
  return _openframeworks.glTexCoord3iv(*args)
glTexCoord3iv = _openframeworks.glTexCoord3iv

def glTexCoord3sv(*args):
  return _openframeworks.glTexCoord3sv(*args)
glTexCoord3sv = _openframeworks.glTexCoord3sv

def glTexCoord4dv(*args):
  return _openframeworks.glTexCoord4dv(*args)
glTexCoord4dv = _openframeworks.glTexCoord4dv

def glTexCoord4fv(*args):
  return _openframeworks.glTexCoord4fv(*args)
glTexCoord4fv = _openframeworks.glTexCoord4fv

def glTexCoord4iv(*args):
  return _openframeworks.glTexCoord4iv(*args)
glTexCoord4iv = _openframeworks.glTexCoord4iv

def glTexCoord4sv(*args):
  return _openframeworks.glTexCoord4sv(*args)
glTexCoord4sv = _openframeworks.glTexCoord4sv

def glRasterPos2d(*args):
  return _openframeworks.glRasterPos2d(*args)
glRasterPos2d = _openframeworks.glRasterPos2d

def glRasterPos2f(*args):
  return _openframeworks.glRasterPos2f(*args)
glRasterPos2f = _openframeworks.glRasterPos2f

def glRasterPos2i(*args):
  return _openframeworks.glRasterPos2i(*args)
glRasterPos2i = _openframeworks.glRasterPos2i

def glRasterPos2s(*args):
  return _openframeworks.glRasterPos2s(*args)
glRasterPos2s = _openframeworks.glRasterPos2s

def glRasterPos3d(*args):
  return _openframeworks.glRasterPos3d(*args)
glRasterPos3d = _openframeworks.glRasterPos3d

def glRasterPos3f(*args):
  return _openframeworks.glRasterPos3f(*args)
glRasterPos3f = _openframeworks.glRasterPos3f

def glRasterPos3i(*args):
  return _openframeworks.glRasterPos3i(*args)
glRasterPos3i = _openframeworks.glRasterPos3i

def glRasterPos3s(*args):
  return _openframeworks.glRasterPos3s(*args)
glRasterPos3s = _openframeworks.glRasterPos3s

def glRasterPos4d(*args):
  return _openframeworks.glRasterPos4d(*args)
glRasterPos4d = _openframeworks.glRasterPos4d

def glRasterPos4f(*args):
  return _openframeworks.glRasterPos4f(*args)
glRasterPos4f = _openframeworks.glRasterPos4f

def glRasterPos4i(*args):
  return _openframeworks.glRasterPos4i(*args)
glRasterPos4i = _openframeworks.glRasterPos4i

def glRasterPos4s(*args):
  return _openframeworks.glRasterPos4s(*args)
glRasterPos4s = _openframeworks.glRasterPos4s

def glRasterPos2dv(*args):
  return _openframeworks.glRasterPos2dv(*args)
glRasterPos2dv = _openframeworks.glRasterPos2dv

def glRasterPos2fv(*args):
  return _openframeworks.glRasterPos2fv(*args)
glRasterPos2fv = _openframeworks.glRasterPos2fv

def glRasterPos2iv(*args):
  return _openframeworks.glRasterPos2iv(*args)
glRasterPos2iv = _openframeworks.glRasterPos2iv

def glRasterPos2sv(*args):
  return _openframeworks.glRasterPos2sv(*args)
glRasterPos2sv = _openframeworks.glRasterPos2sv

def glRasterPos3dv(*args):
  return _openframeworks.glRasterPos3dv(*args)
glRasterPos3dv = _openframeworks.glRasterPos3dv

def glRasterPos3fv(*args):
  return _openframeworks.glRasterPos3fv(*args)
glRasterPos3fv = _openframeworks.glRasterPos3fv

def glRasterPos3iv(*args):
  return _openframeworks.glRasterPos3iv(*args)
glRasterPos3iv = _openframeworks.glRasterPos3iv

def glRasterPos3sv(*args):
  return _openframeworks.glRasterPos3sv(*args)
glRasterPos3sv = _openframeworks.glRasterPos3sv

def glRasterPos4dv(*args):
  return _openframeworks.glRasterPos4dv(*args)
glRasterPos4dv = _openframeworks.glRasterPos4dv

def glRasterPos4fv(*args):
  return _openframeworks.glRasterPos4fv(*args)
glRasterPos4fv = _openframeworks.glRasterPos4fv

def glRasterPos4iv(*args):
  return _openframeworks.glRasterPos4iv(*args)
glRasterPos4iv = _openframeworks.glRasterPos4iv

def glRasterPos4sv(*args):
  return _openframeworks.glRasterPos4sv(*args)
glRasterPos4sv = _openframeworks.glRasterPos4sv

def glRectd(*args):
  return _openframeworks.glRectd(*args)
glRectd = _openframeworks.glRectd

def glRectf(*args):
  return _openframeworks.glRectf(*args)
glRectf = _openframeworks.glRectf

def glRecti(*args):
  return _openframeworks.glRecti(*args)
glRecti = _openframeworks.glRecti

def glRects(*args):
  return _openframeworks.glRects(*args)
glRects = _openframeworks.glRects

def glRectdv(*args):
  return _openframeworks.glRectdv(*args)
glRectdv = _openframeworks.glRectdv

def glRectfv(*args):
  return _openframeworks.glRectfv(*args)
glRectfv = _openframeworks.glRectfv

def glRectiv(*args):
  return _openframeworks.glRectiv(*args)
glRectiv = _openframeworks.glRectiv

def glRectsv(*args):
  return _openframeworks.glRectsv(*args)
glRectsv = _openframeworks.glRectsv

def glShadeModel(*args):
  return _openframeworks.glShadeModel(*args)
glShadeModel = _openframeworks.glShadeModel

def glLightf(*args):
  return _openframeworks.glLightf(*args)
glLightf = _openframeworks.glLightf

def glLighti(*args):
  return _openframeworks.glLighti(*args)
glLighti = _openframeworks.glLighti

def glLightfv(*args):
  return _openframeworks.glLightfv(*args)
glLightfv = _openframeworks.glLightfv

def glLightiv(*args):
  return _openframeworks.glLightiv(*args)
glLightiv = _openframeworks.glLightiv

def glGetLightfv(*args):
  return _openframeworks.glGetLightfv(*args)
glGetLightfv = _openframeworks.glGetLightfv

def glGetLightiv(*args):
  return _openframeworks.glGetLightiv(*args)
glGetLightiv = _openframeworks.glGetLightiv

def glLightModelf(*args):
  return _openframeworks.glLightModelf(*args)
glLightModelf = _openframeworks.glLightModelf

def glLightModeli(*args):
  return _openframeworks.glLightModeli(*args)
glLightModeli = _openframeworks.glLightModeli

def glLightModelfv(*args):
  return _openframeworks.glLightModelfv(*args)
glLightModelfv = _openframeworks.glLightModelfv

def glLightModeliv(*args):
  return _openframeworks.glLightModeliv(*args)
glLightModeliv = _openframeworks.glLightModeliv

def glMaterialf(*args):
  return _openframeworks.glMaterialf(*args)
glMaterialf = _openframeworks.glMaterialf

def glMateriali(*args):
  return _openframeworks.glMateriali(*args)
glMateriali = _openframeworks.glMateriali

def glMaterialfv(*args):
  return _openframeworks.glMaterialfv(*args)
glMaterialfv = _openframeworks.glMaterialfv

def glMaterialiv(*args):
  return _openframeworks.glMaterialiv(*args)
glMaterialiv = _openframeworks.glMaterialiv

def glGetMaterialfv(*args):
  return _openframeworks.glGetMaterialfv(*args)
glGetMaterialfv = _openframeworks.glGetMaterialfv

def glGetMaterialiv(*args):
  return _openframeworks.glGetMaterialiv(*args)
glGetMaterialiv = _openframeworks.glGetMaterialiv

def glColorMaterial(*args):
  return _openframeworks.glColorMaterial(*args)
glColorMaterial = _openframeworks.glColorMaterial

def glPixelZoom(*args):
  return _openframeworks.glPixelZoom(*args)
glPixelZoom = _openframeworks.glPixelZoom

def glPixelStoref(*args):
  return _openframeworks.glPixelStoref(*args)
glPixelStoref = _openframeworks.glPixelStoref

def glPixelStorei(*args):
  return _openframeworks.glPixelStorei(*args)
glPixelStorei = _openframeworks.glPixelStorei

def glPixelTransferf(*args):
  return _openframeworks.glPixelTransferf(*args)
glPixelTransferf = _openframeworks.glPixelTransferf

def glPixelTransferi(*args):
  return _openframeworks.glPixelTransferi(*args)
glPixelTransferi = _openframeworks.glPixelTransferi

def glPixelMapfv(*args):
  return _openframeworks.glPixelMapfv(*args)
glPixelMapfv = _openframeworks.glPixelMapfv

def glPixelMapuiv(*args):
  return _openframeworks.glPixelMapuiv(*args)
glPixelMapuiv = _openframeworks.glPixelMapuiv

def glPixelMapusv(*args):
  return _openframeworks.glPixelMapusv(*args)
glPixelMapusv = _openframeworks.glPixelMapusv

def glGetPixelMapfv(*args):
  return _openframeworks.glGetPixelMapfv(*args)
glGetPixelMapfv = _openframeworks.glGetPixelMapfv

def glGetPixelMapuiv(*args):
  return _openframeworks.glGetPixelMapuiv(*args)
glGetPixelMapuiv = _openframeworks.glGetPixelMapuiv

def glGetPixelMapusv(*args):
  return _openframeworks.glGetPixelMapusv(*args)
glGetPixelMapusv = _openframeworks.glGetPixelMapusv

def glBitmap(*args):
  return _openframeworks.glBitmap(*args)
glBitmap = _openframeworks.glBitmap

def glReadPixels(*args):
  return _openframeworks.glReadPixels(*args)
glReadPixels = _openframeworks.glReadPixels

def glDrawPixels(*args):
  return _openframeworks.glDrawPixels(*args)
glDrawPixels = _openframeworks.glDrawPixels

def glCopyPixels(*args):
  return _openframeworks.glCopyPixels(*args)
glCopyPixels = _openframeworks.glCopyPixels

def glStencilFunc(*args):
  return _openframeworks.glStencilFunc(*args)
glStencilFunc = _openframeworks.glStencilFunc

def glStencilMask(*args):
  return _openframeworks.glStencilMask(*args)
glStencilMask = _openframeworks.glStencilMask

def glStencilOp(*args):
  return _openframeworks.glStencilOp(*args)
glStencilOp = _openframeworks.glStencilOp

def glClearStencil(*args):
  return _openframeworks.glClearStencil(*args)
glClearStencil = _openframeworks.glClearStencil

def glTexGend(*args):
  return _openframeworks.glTexGend(*args)
glTexGend = _openframeworks.glTexGend

def glTexGenf(*args):
  return _openframeworks.glTexGenf(*args)
glTexGenf = _openframeworks.glTexGenf

def glTexGeni(*args):
  return _openframeworks.glTexGeni(*args)
glTexGeni = _openframeworks.glTexGeni

def glTexGendv(*args):
  return _openframeworks.glTexGendv(*args)
glTexGendv = _openframeworks.glTexGendv

def glTexGenfv(*args):
  return _openframeworks.glTexGenfv(*args)
glTexGenfv = _openframeworks.glTexGenfv

def glTexGeniv(*args):
  return _openframeworks.glTexGeniv(*args)
glTexGeniv = _openframeworks.glTexGeniv

def glGetTexGendv(*args):
  return _openframeworks.glGetTexGendv(*args)
glGetTexGendv = _openframeworks.glGetTexGendv

def glGetTexGenfv(*args):
  return _openframeworks.glGetTexGenfv(*args)
glGetTexGenfv = _openframeworks.glGetTexGenfv

def glGetTexGeniv(*args):
  return _openframeworks.glGetTexGeniv(*args)
glGetTexGeniv = _openframeworks.glGetTexGeniv

def glTexEnvf(*args):
  return _openframeworks.glTexEnvf(*args)
glTexEnvf = _openframeworks.glTexEnvf

def glTexEnvi(*args):
  return _openframeworks.glTexEnvi(*args)
glTexEnvi = _openframeworks.glTexEnvi

def glTexEnvfv(*args):
  return _openframeworks.glTexEnvfv(*args)
glTexEnvfv = _openframeworks.glTexEnvfv

def glTexEnviv(*args):
  return _openframeworks.glTexEnviv(*args)
glTexEnviv = _openframeworks.glTexEnviv

def glGetTexEnvfv(*args):
  return _openframeworks.glGetTexEnvfv(*args)
glGetTexEnvfv = _openframeworks.glGetTexEnvfv

def glGetTexEnviv(*args):
  return _openframeworks.glGetTexEnviv(*args)
glGetTexEnviv = _openframeworks.glGetTexEnviv

def glTexParameterf(*args):
  return _openframeworks.glTexParameterf(*args)
glTexParameterf = _openframeworks.glTexParameterf

def glTexParameteri(*args):
  return _openframeworks.glTexParameteri(*args)
glTexParameteri = _openframeworks.glTexParameteri

def glTexParameterfv(*args):
  return _openframeworks.glTexParameterfv(*args)
glTexParameterfv = _openframeworks.glTexParameterfv

def glTexParameteriv(*args):
  return _openframeworks.glTexParameteriv(*args)
glTexParameteriv = _openframeworks.glTexParameteriv

def glGetTexParameterfv(*args):
  return _openframeworks.glGetTexParameterfv(*args)
glGetTexParameterfv = _openframeworks.glGetTexParameterfv

def glGetTexParameteriv(*args):
  return _openframeworks.glGetTexParameteriv(*args)
glGetTexParameteriv = _openframeworks.glGetTexParameteriv

def glGetTexLevelParameterfv(*args):
  return _openframeworks.glGetTexLevelParameterfv(*args)
glGetTexLevelParameterfv = _openframeworks.glGetTexLevelParameterfv

def glGetTexLevelParameteriv(*args):
  return _openframeworks.glGetTexLevelParameteriv(*args)
glGetTexLevelParameteriv = _openframeworks.glGetTexLevelParameteriv

def glTexImage1D(*args):
  return _openframeworks.glTexImage1D(*args)
glTexImage1D = _openframeworks.glTexImage1D

def glTexImage2D(*args):
  return _openframeworks.glTexImage2D(*args)
glTexImage2D = _openframeworks.glTexImage2D

def glGetTexImage(*args):
  return _openframeworks.glGetTexImage(*args)
glGetTexImage = _openframeworks.glGetTexImage

def glMap1d(*args):
  return _openframeworks.glMap1d(*args)
glMap1d = _openframeworks.glMap1d

def glMap1f(*args):
  return _openframeworks.glMap1f(*args)
glMap1f = _openframeworks.glMap1f

def glMap2d(*args):
  return _openframeworks.glMap2d(*args)
glMap2d = _openframeworks.glMap2d

def glMap2f(*args):
  return _openframeworks.glMap2f(*args)
glMap2f = _openframeworks.glMap2f

def glGetMapdv(*args):
  return _openframeworks.glGetMapdv(*args)
glGetMapdv = _openframeworks.glGetMapdv

def glGetMapfv(*args):
  return _openframeworks.glGetMapfv(*args)
glGetMapfv = _openframeworks.glGetMapfv

def glGetMapiv(*args):
  return _openframeworks.glGetMapiv(*args)
glGetMapiv = _openframeworks.glGetMapiv

def glEvalCoord1d(*args):
  return _openframeworks.glEvalCoord1d(*args)
glEvalCoord1d = _openframeworks.glEvalCoord1d

def glEvalCoord1f(*args):
  return _openframeworks.glEvalCoord1f(*args)
glEvalCoord1f = _openframeworks.glEvalCoord1f

def glEvalCoord1dv(*args):
  return _openframeworks.glEvalCoord1dv(*args)
glEvalCoord1dv = _openframeworks.glEvalCoord1dv

def glEvalCoord1fv(*args):
  return _openframeworks.glEvalCoord1fv(*args)
glEvalCoord1fv = _openframeworks.glEvalCoord1fv

def glEvalCoord2d(*args):
  return _openframeworks.glEvalCoord2d(*args)
glEvalCoord2d = _openframeworks.glEvalCoord2d

def glEvalCoord2f(*args):
  return _openframeworks.glEvalCoord2f(*args)
glEvalCoord2f = _openframeworks.glEvalCoord2f

def glEvalCoord2dv(*args):
  return _openframeworks.glEvalCoord2dv(*args)
glEvalCoord2dv = _openframeworks.glEvalCoord2dv

def glEvalCoord2fv(*args):
  return _openframeworks.glEvalCoord2fv(*args)
glEvalCoord2fv = _openframeworks.glEvalCoord2fv

def glMapGrid1d(*args):
  return _openframeworks.glMapGrid1d(*args)
glMapGrid1d = _openframeworks.glMapGrid1d

def glMapGrid1f(*args):
  return _openframeworks.glMapGrid1f(*args)
glMapGrid1f = _openframeworks.glMapGrid1f

def glMapGrid2d(*args):
  return _openframeworks.glMapGrid2d(*args)
glMapGrid2d = _openframeworks.glMapGrid2d

def glMapGrid2f(*args):
  return _openframeworks.glMapGrid2f(*args)
glMapGrid2f = _openframeworks.glMapGrid2f

def glEvalPoint1(*args):
  return _openframeworks.glEvalPoint1(*args)
glEvalPoint1 = _openframeworks.glEvalPoint1

def glEvalPoint2(*args):
  return _openframeworks.glEvalPoint2(*args)
glEvalPoint2 = _openframeworks.glEvalPoint2

def glEvalMesh1(*args):
  return _openframeworks.glEvalMesh1(*args)
glEvalMesh1 = _openframeworks.glEvalMesh1

def glEvalMesh2(*args):
  return _openframeworks.glEvalMesh2(*args)
glEvalMesh2 = _openframeworks.glEvalMesh2

def glFogf(*args):
  return _openframeworks.glFogf(*args)
glFogf = _openframeworks.glFogf

def glFogi(*args):
  return _openframeworks.glFogi(*args)
glFogi = _openframeworks.glFogi

def glFogfv(*args):
  return _openframeworks.glFogfv(*args)
glFogfv = _openframeworks.glFogfv

def glFogiv(*args):
  return _openframeworks.glFogiv(*args)
glFogiv = _openframeworks.glFogiv

def glFeedbackBuffer(*args):
  return _openframeworks.glFeedbackBuffer(*args)
glFeedbackBuffer = _openframeworks.glFeedbackBuffer

def glPassThrough(*args):
  return _openframeworks.glPassThrough(*args)
glPassThrough = _openframeworks.glPassThrough

def glSelectBuffer(*args):
  return _openframeworks.glSelectBuffer(*args)
glSelectBuffer = _openframeworks.glSelectBuffer

def glInitNames():
  return _openframeworks.glInitNames()
glInitNames = _openframeworks.glInitNames

def glLoadName(*args):
  return _openframeworks.glLoadName(*args)
glLoadName = _openframeworks.glLoadName

def glPushName(*args):
  return _openframeworks.glPushName(*args)
glPushName = _openframeworks.glPushName

def glPopName():
  return _openframeworks.glPopName()
glPopName = _openframeworks.glPopName

def glGenTextures(*args):
  return _openframeworks.glGenTextures(*args)
glGenTextures = _openframeworks.glGenTextures

def glDeleteTextures(*args):
  return _openframeworks.glDeleteTextures(*args)
glDeleteTextures = _openframeworks.glDeleteTextures

def glBindTexture(*args):
  return _openframeworks.glBindTexture(*args)
glBindTexture = _openframeworks.glBindTexture

def glPrioritizeTextures(*args):
  return _openframeworks.glPrioritizeTextures(*args)
glPrioritizeTextures = _openframeworks.glPrioritizeTextures

def glAreTexturesResident(*args):
  return _openframeworks.glAreTexturesResident(*args)
glAreTexturesResident = _openframeworks.glAreTexturesResident

def glIsTexture(*args):
  return _openframeworks.glIsTexture(*args)
glIsTexture = _openframeworks.glIsTexture

def glTexSubImage1D(*args):
  return _openframeworks.glTexSubImage1D(*args)
glTexSubImage1D = _openframeworks.glTexSubImage1D

def glTexSubImage2D(*args):
  return _openframeworks.glTexSubImage2D(*args)
glTexSubImage2D = _openframeworks.glTexSubImage2D

def glCopyTexImage1D(*args):
  return _openframeworks.glCopyTexImage1D(*args)
glCopyTexImage1D = _openframeworks.glCopyTexImage1D

def glCopyTexImage2D(*args):
  return _openframeworks.glCopyTexImage2D(*args)
glCopyTexImage2D = _openframeworks.glCopyTexImage2D

def glCopyTexSubImage1D(*args):
  return _openframeworks.glCopyTexSubImage1D(*args)
glCopyTexSubImage1D = _openframeworks.glCopyTexSubImage1D

def glCopyTexSubImage2D(*args):
  return _openframeworks.glCopyTexSubImage2D(*args)
glCopyTexSubImage2D = _openframeworks.glCopyTexSubImage2D

def glVertexPointer(*args):
  return _openframeworks.glVertexPointer(*args)
glVertexPointer = _openframeworks.glVertexPointer

def glNormalPointer(*args):
  return _openframeworks.glNormalPointer(*args)
glNormalPointer = _openframeworks.glNormalPointer

def glColorPointer(*args):
  return _openframeworks.glColorPointer(*args)
glColorPointer = _openframeworks.glColorPointer

def glIndexPointer(*args):
  return _openframeworks.glIndexPointer(*args)
glIndexPointer = _openframeworks.glIndexPointer

def glTexCoordPointer(*args):
  return _openframeworks.glTexCoordPointer(*args)
glTexCoordPointer = _openframeworks.glTexCoordPointer

def glEdgeFlagPointer(*args):
  return _openframeworks.glEdgeFlagPointer(*args)
glEdgeFlagPointer = _openframeworks.glEdgeFlagPointer

def glGetPointerv(*args):
  return _openframeworks.glGetPointerv(*args)
glGetPointerv = _openframeworks.glGetPointerv

def glArrayElement(*args):
  return _openframeworks.glArrayElement(*args)
glArrayElement = _openframeworks.glArrayElement

def glDrawArrays(*args):
  return _openframeworks.glDrawArrays(*args)
glDrawArrays = _openframeworks.glDrawArrays

def glDrawElements(*args):
  return _openframeworks.glDrawElements(*args)
glDrawElements = _openframeworks.glDrawElements

def glInterleavedArrays(*args):
  return _openframeworks.glInterleavedArrays(*args)
glInterleavedArrays = _openframeworks.glInterleavedArrays
class ofBaseApp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofBaseApp:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseApp(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBaseApp
    __del__ = lambda self : None;
    def setup(self): return _openframeworks.ofBaseApp_setup(self)
    def update(self): return _openframeworks.ofBaseApp_update(self)
    def draw(self): return _openframeworks.ofBaseApp_draw(self)
    def exit(self): return _openframeworks.ofBaseApp_exit(self)
    def windowResized(self, *args): return _openframeworks.ofBaseApp_windowResized(self, *args)
    def keyPressed(self, *args): return _openframeworks.ofBaseApp_keyPressed(self, *args)
    def keyReleased(self, *args): return _openframeworks.ofBaseApp_keyReleased(self, *args)
    def mouseMoved(self, *args): return _openframeworks.ofBaseApp_mouseMoved(self, *args)
    def mouseDragged(self, *args): return _openframeworks.ofBaseApp_mouseDragged(self, *args)
    def mousePressed(self, *args): return _openframeworks.ofBaseApp_mousePressed(self, *args)
    def mouseReleased(self, *args): return _openframeworks.ofBaseApp_mouseReleased(self, *args)
    def dragEvent(self, *args): return _openframeworks.ofBaseApp_dragEvent(self, *args)
    def gotMessage(self, *args): return _openframeworks.ofBaseApp_gotMessage(self, *args)
    mouseX = _swig_property(_openframeworks.ofBaseApp_mouseX_get, _openframeworks.ofBaseApp_mouseX_set)
    mouseY = _swig_property(_openframeworks.ofBaseApp_mouseY_get, _openframeworks.ofBaseApp_mouseY_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseApp(self)
        return weakref_proxy(self)
ofBaseApp_swigregister = _openframeworks.ofBaseApp_swigregister
ofBaseApp_swigregister(ofBaseApp)

OF_IMAGE_QUALITY_BEST = _openframeworks.OF_IMAGE_QUALITY_BEST
OF_IMAGE_QUALITY_HIGH = _openframeworks.OF_IMAGE_QUALITY_HIGH
OF_IMAGE_QUALITY_MEDIUM = _openframeworks.OF_IMAGE_QUALITY_MEDIUM
OF_IMAGE_QUALITY_LOW = _openframeworks.OF_IMAGE_QUALITY_LOW
OF_IMAGE_QUALITY_WORST = _openframeworks.OF_IMAGE_QUALITY_WORST
OF_IMAGE_FORMAT_BMP = _openframeworks.OF_IMAGE_FORMAT_BMP
OF_IMAGE_FORMAT_ICO = _openframeworks.OF_IMAGE_FORMAT_ICO
OF_IMAGE_FORMAT_JPEG = _openframeworks.OF_IMAGE_FORMAT_JPEG
OF_IMAGE_FORMAT_JNG = _openframeworks.OF_IMAGE_FORMAT_JNG
OF_IMAGE_FORMAT_KOALA = _openframeworks.OF_IMAGE_FORMAT_KOALA
OF_IMAGE_FORMAT_LBM = _openframeworks.OF_IMAGE_FORMAT_LBM
OF_IMAGE_FORMAT_IFF = _openframeworks.OF_IMAGE_FORMAT_IFF
OF_IMAGE_FORMAT_MNG = _openframeworks.OF_IMAGE_FORMAT_MNG
OF_IMAGE_FORMAT_PBM = _openframeworks.OF_IMAGE_FORMAT_PBM
OF_IMAGE_FORMAT_PBMRAW = _openframeworks.OF_IMAGE_FORMAT_PBMRAW
OF_IMAGE_FORMAT_PCD = _openframeworks.OF_IMAGE_FORMAT_PCD
OF_IMAGE_FORMAT_PCX = _openframeworks.OF_IMAGE_FORMAT_PCX
OF_IMAGE_FORMAT_PGM = _openframeworks.OF_IMAGE_FORMAT_PGM
OF_IMAGE_FORMAT_PGMRAW = _openframeworks.OF_IMAGE_FORMAT_PGMRAW
OF_IMAGE_FORMAT_PNG = _openframeworks.OF_IMAGE_FORMAT_PNG
OF_IMAGE_FORMAT_PPM = _openframeworks.OF_IMAGE_FORMAT_PPM
OF_IMAGE_FORMAT_PPMRAW = _openframeworks.OF_IMAGE_FORMAT_PPMRAW
OF_IMAGE_FORMAT_RAS = _openframeworks.OF_IMAGE_FORMAT_RAS
OF_IMAGE_FORMAT_TARGA = _openframeworks.OF_IMAGE_FORMAT_TARGA
OF_IMAGE_FORMAT_TIFF = _openframeworks.OF_IMAGE_FORMAT_TIFF
OF_IMAGE_FORMAT_WBMP = _openframeworks.OF_IMAGE_FORMAT_WBMP
OF_IMAGE_FORMAT_PSD = _openframeworks.OF_IMAGE_FORMAT_PSD
OF_IMAGE_FORMAT_CUT = _openframeworks.OF_IMAGE_FORMAT_CUT
OF_IMAGE_FORMAT_XBM = _openframeworks.OF_IMAGE_FORMAT_XBM
OF_IMAGE_FORMAT_XPM = _openframeworks.OF_IMAGE_FORMAT_XPM
OF_IMAGE_FORMAT_DDS = _openframeworks.OF_IMAGE_FORMAT_DDS
OF_IMAGE_FORMAT_GIF = _openframeworks.OF_IMAGE_FORMAT_GIF
OF_IMAGE_FORMAT_HDR = _openframeworks.OF_IMAGE_FORMAT_HDR
OF_IMAGE_FORMAT_FAXG3 = _openframeworks.OF_IMAGE_FORMAT_FAXG3
OF_IMAGE_FORMAT_SGI = _openframeworks.OF_IMAGE_FORMAT_SGI
OF_IMAGE_FORMAT_EXR = _openframeworks.OF_IMAGE_FORMAT_EXR
OF_IMAGE_FORMAT_J2K = _openframeworks.OF_IMAGE_FORMAT_J2K
OF_IMAGE_FORMAT_JP2 = _openframeworks.OF_IMAGE_FORMAT_JP2
OF_IMAGE_FORMAT_PFM = _openframeworks.OF_IMAGE_FORMAT_PFM
OF_IMAGE_FORMAT_PICT = _openframeworks.OF_IMAGE_FORMAT_PICT
OF_IMAGE_FORMAT_RAW = _openframeworks.OF_IMAGE_FORMAT_RAW

def ofCloseFreeImage():
  return _openframeworks.ofCloseFreeImage()
ofCloseFreeImage = _openframeworks.ofCloseFreeImage
class ofBaseDraws(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseDraws
    __del__ = lambda self : None;
    def draw(self, *args): return _openframeworks.ofBaseDraws_draw(self, *args)
    def getHeight(self): return _openframeworks.ofBaseDraws_getHeight(self)
    def getWidth(self): return _openframeworks.ofBaseDraws_getWidth(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofBaseDraws_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofBaseDraws_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofBaseDraws_resetAnchor(self)
    def __init__(self): 
        if self.__class__ == ofBaseDraws:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseDraws(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseDraws(self)
        return weakref_proxy(self)
ofBaseDraws_swigregister = _openframeworks.ofBaseDraws_swigregister
ofBaseDraws_swigregister(ofBaseDraws)

def ofLoadImage(*args):
  return _openframeworks.ofLoadImage(*args)
ofLoadImage = _openframeworks.ofLoadImage

def ofSaveImage(*args):
  return _openframeworks.ofSaveImage(*args)
ofSaveImage = _openframeworks.ofSaveImage

class ofBaseUpdates(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseUpdates
    __del__ = lambda self : None;
    def update(self): return _openframeworks.ofBaseUpdates_update(self)
    def __init__(self): 
        if self.__class__ == ofBaseUpdates:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseUpdates(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseUpdates(self)
        return weakref_proxy(self)
ofBaseUpdates_swigregister = _openframeworks.ofBaseUpdates_swigregister
ofBaseUpdates_swigregister(ofBaseUpdates)

class ofBaseHasTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseHasTexture
    __del__ = lambda self : None;
    def getTextureReference(self): return _openframeworks.ofBaseHasTexture_getTextureReference(self)
    def setUseTexture(self, *args): return _openframeworks.ofBaseHasTexture_setUseTexture(self, *args)
    def __init__(self): 
        if self.__class__ == ofBaseHasTexture:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseHasTexture(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseHasTexture(self)
        return weakref_proxy(self)
ofBaseHasTexture_swigregister = _openframeworks.ofBaseHasTexture_swigregister
ofBaseHasTexture_swigregister(ofBaseHasTexture)

class ofAbstractHasPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofAbstractHasPixels
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == ofAbstractHasPixels:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofAbstractHasPixels(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofAbstractHasPixels(self)
        return weakref_proxy(self)
ofAbstractHasPixels_swigregister = _openframeworks.ofAbstractHasPixels_swigregister
ofAbstractHasPixels_swigregister(ofAbstractHasPixels)

class ofBaseHasPixels(ofAbstractHasPixels):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseHasPixels
    __del__ = lambda self : None;
    def getPixels(self): return _openframeworks.ofBaseHasPixels_getPixels(self)
    def __init__(self): 
        if self.__class__ == ofBaseHasPixels:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseHasPixels(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseHasPixels(self)
        return weakref_proxy(self)
ofBaseHasPixels_swigregister = _openframeworks.ofBaseHasPixels_swigregister
ofBaseHasPixels_swigregister(ofBaseHasPixels)

class ofAbstractImage(ofBaseDraws,ofBaseHasTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofAbstractImage
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == ofAbstractImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofAbstractImage(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofAbstractImage(self)
        return weakref_proxy(self)
ofAbstractImage_swigregister = _openframeworks.ofAbstractImage_swigregister
ofAbstractImage_swigregister(ofAbstractImage)

class ofBaseImage(ofAbstractImage,ofBaseHasPixels):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseImage
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == ofBaseImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseImage(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseImage(self)
        return weakref_proxy(self)
ofBaseImage_swigregister = _openframeworks.ofBaseImage_swigregister
ofBaseImage_swigregister(ofBaseImage)

class ofBaseSoundInput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundInput
    __del__ = lambda self : None;
    def audioIn(self, *args): return _openframeworks.ofBaseSoundInput_audioIn(self, *args)
    def audioReceived(self, *args): return _openframeworks.ofBaseSoundInput_audioReceived(self, *args)
    def __init__(self): 
        if self.__class__ == ofBaseSoundInput:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseSoundInput(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseSoundInput(self)
        return weakref_proxy(self)
ofBaseSoundInput_swigregister = _openframeworks.ofBaseSoundInput_swigregister
ofBaseSoundInput_swigregister(ofBaseSoundInput)

class ofBaseSoundOutput(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundOutput
    __del__ = lambda self : None;
    def audioOut(self, *args): return _openframeworks.ofBaseSoundOutput_audioOut(self, *args)
    def audioRequested(self, *args): return _openframeworks.ofBaseSoundOutput_audioRequested(self, *args)
    def __init__(self): 
        if self.__class__ == ofBaseSoundOutput:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseSoundOutput(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseSoundOutput(self)
        return weakref_proxy(self)
ofBaseSoundOutput_swigregister = _openframeworks.ofBaseSoundOutput_swigregister
ofBaseSoundOutput_swigregister(ofBaseSoundOutput)

class ofBaseVideo(ofBaseHasPixels,ofBaseUpdates):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseVideo
    __del__ = lambda self : None;
    def isFrameNew(self): return _openframeworks.ofBaseVideo_isFrameNew(self)
    def close(self): return _openframeworks.ofBaseVideo_close(self)
    def __init__(self): 
        if self.__class__ == ofBaseVideo:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseVideo(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseVideo(self)
        return weakref_proxy(self)
ofBaseVideo_swigregister = _openframeworks.ofBaseVideo_swigregister
ofBaseVideo_swigregister(ofBaseVideo)

class ofBaseVideoDraws(ofBaseVideo,ofBaseDraws,ofBaseHasTexture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseVideoDraws
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == ofBaseVideoDraws:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseVideoDraws(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseVideoDraws(self)
        return weakref_proxy(self)
ofBaseVideoDraws_swigregister = _openframeworks.ofBaseVideoDraws_swigregister
ofBaseVideoDraws_swigregister(ofBaseVideoDraws)

class ofBaseVideoGrabber(ofBaseVideo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseVideoGrabber
    __del__ = lambda self : None;
    def listDevices(self): return _openframeworks.ofBaseVideoGrabber_listDevices(self)
    def initGrabber(self, *args): return _openframeworks.ofBaseVideoGrabber_initGrabber(self, *args)
    def update(self): return _openframeworks.ofBaseVideoGrabber_update(self)
    def isFrameNew(self): return _openframeworks.ofBaseVideoGrabber_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofBaseVideoGrabber_getPixels(self)
    def close(self): return _openframeworks.ofBaseVideoGrabber_close(self)
    def getHeight(self): return _openframeworks.ofBaseVideoGrabber_getHeight(self)
    def getWidth(self): return _openframeworks.ofBaseVideoGrabber_getWidth(self)
    def setVerbose(self, *args): return _openframeworks.ofBaseVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _openframeworks.ofBaseVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _openframeworks.ofBaseVideoGrabber_setDesiredFrameRate(self, *args)
    def videoSettings(self): return _openframeworks.ofBaseVideoGrabber_videoSettings(self)
    def setPixelFormat(self, *args): return _openframeworks.ofBaseVideoGrabber_setPixelFormat(self, *args)
    def getPixelFormat(self): return _openframeworks.ofBaseVideoGrabber_getPixelFormat(self)
    def __init__(self): 
        if self.__class__ == ofBaseVideoGrabber:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseVideoGrabber(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseVideoGrabber(self)
        return weakref_proxy(self)
ofBaseVideoGrabber_swigregister = _openframeworks.ofBaseVideoGrabber_swigregister
ofBaseVideoGrabber_swigregister(ofBaseVideoGrabber)

class ofBaseVideoPlayer(ofBaseVideo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseVideoPlayer
    __del__ = lambda self : None;
    def loadMovie(self, *args): return _openframeworks.ofBaseVideoPlayer_loadMovie(self, *args)
    def close(self): return _openframeworks.ofBaseVideoPlayer_close(self)
    def update(self): return _openframeworks.ofBaseVideoPlayer_update(self)
    def play(self): return _openframeworks.ofBaseVideoPlayer_play(self)
    def stop(self): return _openframeworks.ofBaseVideoPlayer_stop(self)
    def isFrameNew(self): return _openframeworks.ofBaseVideoPlayer_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofBaseVideoPlayer_getPixels(self)
    def getTexture(self): return _openframeworks.ofBaseVideoPlayer_getTexture(self)
    def getWidth(self): return _openframeworks.ofBaseVideoPlayer_getWidth(self)
    def getHeight(self): return _openframeworks.ofBaseVideoPlayer_getHeight(self)
    def isPaused(self): return _openframeworks.ofBaseVideoPlayer_isPaused(self)
    def isLoaded(self): return _openframeworks.ofBaseVideoPlayer_isLoaded(self)
    def isPlaying(self): return _openframeworks.ofBaseVideoPlayer_isPlaying(self)
    def getPosition(self): return _openframeworks.ofBaseVideoPlayer_getPosition(self)
    def getSpeed(self): return _openframeworks.ofBaseVideoPlayer_getSpeed(self)
    def getDuration(self): return _openframeworks.ofBaseVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _openframeworks.ofBaseVideoPlayer_getIsMovieDone(self)
    def setPaused(self, *args): return _openframeworks.ofBaseVideoPlayer_setPaused(self, *args)
    def setPosition(self, *args): return _openframeworks.ofBaseVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _openframeworks.ofBaseVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _openframeworks.ofBaseVideoPlayer_setLoopState(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofBaseVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _openframeworks.ofBaseVideoPlayer_setFrame(self, *args)
    def getCurrentFrame(self): return _openframeworks.ofBaseVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _openframeworks.ofBaseVideoPlayer_getTotalNumFrames(self)
    def getLoopState(self): return _openframeworks.ofBaseVideoPlayer_getLoopState(self)
    def firstFrame(self): return _openframeworks.ofBaseVideoPlayer_firstFrame(self)
    def nextFrame(self): return _openframeworks.ofBaseVideoPlayer_nextFrame(self)
    def previousFrame(self): return _openframeworks.ofBaseVideoPlayer_previousFrame(self)
    def setPixelFormat(self, *args): return _openframeworks.ofBaseVideoPlayer_setPixelFormat(self, *args)
    def __init__(self): 
        if self.__class__ == ofBaseVideoPlayer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseVideoPlayer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseVideoPlayer(self)
        return weakref_proxy(self)
ofBaseVideoPlayer_swigregister = _openframeworks.ofBaseVideoPlayer_swigregister
ofBaseVideoPlayer_swigregister(ofBaseVideoPlayer)

class ofBaseRenderer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseRenderer
    __del__ = lambda self : None;
    def getType(self): return _openframeworks.ofBaseRenderer_getType(self)
    def update(self): return _openframeworks.ofBaseRenderer_update(self)
    def draw(self, *args): return _openframeworks.ofBaseRenderer_draw(self, *args)
    def pushView(self): return _openframeworks.ofBaseRenderer_pushView(self)
    def popView(self): return _openframeworks.ofBaseRenderer_popView(self)
    def viewport(self, *args): return _openframeworks.ofBaseRenderer_viewport(self, *args)
    def setupScreenPerspective(self, *args): return _openframeworks.ofBaseRenderer_setupScreenPerspective(self, *args)
    def setupScreenOrtho(self, *args): return _openframeworks.ofBaseRenderer_setupScreenOrtho(self, *args)
    def getCurrentViewport(self): return _openframeworks.ofBaseRenderer_getCurrentViewport(self)
    def getViewportWidth(self): return _openframeworks.ofBaseRenderer_getViewportWidth(self)
    def getViewportHeight(self): return _openframeworks.ofBaseRenderer_getViewportHeight(self)
    def setCoordHandedness(self, *args): return _openframeworks.ofBaseRenderer_setCoordHandedness(self, *args)
    def getCoordHandedness(self): return _openframeworks.ofBaseRenderer_getCoordHandedness(self)
    def pushMatrix(self): return _openframeworks.ofBaseRenderer_pushMatrix(self)
    def popMatrix(self): return _openframeworks.ofBaseRenderer_popMatrix(self)
    def translate(self, *args): return _openframeworks.ofBaseRenderer_translate(self, *args)
    def scale(self, *args): return _openframeworks.ofBaseRenderer_scale(self, *args)
    def rotateX(self, *args): return _openframeworks.ofBaseRenderer_rotateX(self, *args)
    def rotateY(self, *args): return _openframeworks.ofBaseRenderer_rotateY(self, *args)
    def rotateZ(self, *args): return _openframeworks.ofBaseRenderer_rotateZ(self, *args)
    def rotate(self, *args): return _openframeworks.ofBaseRenderer_rotate(self, *args)
    def setupGraphicDefaults(self): return _openframeworks.ofBaseRenderer_setupGraphicDefaults(self)
    def setupScreen(self): return _openframeworks.ofBaseRenderer_setupScreen(self)
    def setRectMode(self, *args): return _openframeworks.ofBaseRenderer_setRectMode(self, *args)
    def getRectMode(self): return _openframeworks.ofBaseRenderer_getRectMode(self)
    def setFillMode(self, *args): return _openframeworks.ofBaseRenderer_setFillMode(self, *args)
    def getFillMode(self): return _openframeworks.ofBaseRenderer_getFillMode(self)
    def setLineWidth(self, *args): return _openframeworks.ofBaseRenderer_setLineWidth(self, *args)
    def setBlendMode(self, *args): return _openframeworks.ofBaseRenderer_setBlendMode(self, *args)
    def setLineSmoothing(self, *args): return _openframeworks.ofBaseRenderer_setLineSmoothing(self, *args)
    def setCircleResolution(self, *args): return _openframeworks.ofBaseRenderer_setCircleResolution(self, *args)
    def enablePointSprites(self): return _openframeworks.ofBaseRenderer_enablePointSprites(self)
    def disablePointSprites(self): return _openframeworks.ofBaseRenderer_disablePointSprites(self)
    def setColor(self, *args): return _openframeworks.ofBaseRenderer_setColor(self, *args)
    def setHexColor(self, *args): return _openframeworks.ofBaseRenderer_setHexColor(self, *args)
    def getBgColor(self): return _openframeworks.ofBaseRenderer_getBgColor(self)
    def bClearBg(self): return _openframeworks.ofBaseRenderer_bClearBg(self)
    def background(self, *args): return _openframeworks.ofBaseRenderer_background(self, *args)
    def setBackgroundAuto(self, *args): return _openframeworks.ofBaseRenderer_setBackgroundAuto(self, *args)
    def clear(self, *args): return _openframeworks.ofBaseRenderer_clear(self, *args)
    def clearAlpha(self): return _openframeworks.ofBaseRenderer_clearAlpha(self)
    def drawLine(self, *args): return _openframeworks.ofBaseRenderer_drawLine(self, *args)
    def drawRectangle(self, *args): return _openframeworks.ofBaseRenderer_drawRectangle(self, *args)
    def drawTriangle(self, *args): return _openframeworks.ofBaseRenderer_drawTriangle(self, *args)
    def drawCircle(self, *args): return _openframeworks.ofBaseRenderer_drawCircle(self, *args)
    def drawEllipse(self, *args): return _openframeworks.ofBaseRenderer_drawEllipse(self, *args)
    def drawString(self, *args): return _openframeworks.ofBaseRenderer_drawString(self, *args)
    def rendersPathPrimitives(self): return _openframeworks.ofBaseRenderer_rendersPathPrimitives(self)
    def __init__(self): 
        if self.__class__ == ofBaseRenderer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseRenderer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseRenderer(self)
        return weakref_proxy(self)
ofBaseRenderer_swigregister = _openframeworks.ofBaseRenderer_swigregister
ofBaseRenderer_swigregister(ofBaseRenderer)

class ofRectangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofRectangle
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == ofRectangle:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofRectangle(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofRectangle_set(self, *args)
    def setFromCenter(self, *args): return _openframeworks.ofRectangle_setFromCenter(self, *args)
    def getCenter(self): return _openframeworks.ofRectangle_getCenter(self)
    def inside(self, *args): return _openframeworks.ofRectangle_inside(self, *args)
    def assign(self, *args): return _openframeworks.ofRectangle_assign(self, *args)
    def __eq__(self, *args): return _openframeworks.ofRectangle___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofRectangle___ne__(self, *args)
    def __add__(self, *args): return _openframeworks.ofRectangle___add__(self, *args)
    x = _swig_property(_openframeworks.ofRectangle_x_get, _openframeworks.ofRectangle_x_set)
    y = _swig_property(_openframeworks.ofRectangle_y_get, _openframeworks.ofRectangle_y_set)
    width = _swig_property(_openframeworks.ofRectangle_width_get, _openframeworks.ofRectangle_width_set)
    height = _swig_property(_openframeworks.ofRectangle_height_get, _openframeworks.ofRectangle_height_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofRectangle(self)
        return weakref_proxy(self)
ofRectangle_swigregister = _openframeworks.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

OF_VERSION = _openframeworks.OF_VERSION
OF_VERSION_MINOR = _openframeworks.OF_VERSION_MINOR
OF_LOOP_NONE = _openframeworks.OF_LOOP_NONE
OF_LOOP_PALINDROME = _openframeworks.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _openframeworks.OF_LOOP_NORMAL
_WIN32_WINNT = _openframeworks._WIN32_WINNT
GL_BGR_EXT = _openframeworks.GL_BGR_EXT
OF_SERIAL_NO_DATA = _openframeworks.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _openframeworks.OF_SERIAL_ERROR
PI = _openframeworks.PI
TWO_PI = _openframeworks.TWO_PI
M_TWO_PI = _openframeworks.M_TWO_PI
FOUR_PI = _openframeworks.FOUR_PI
HALF_PI = _openframeworks.HALF_PI
DEG_TO_RAD = _openframeworks.DEG_TO_RAD
RAD_TO_DEG = _openframeworks.RAD_TO_DEG
OF_OUTLINE = _openframeworks.OF_OUTLINE
OF_FILLED = _openframeworks.OF_FILLED
OF_WINDOW = _openframeworks.OF_WINDOW
OF_FULLSCREEN = _openframeworks.OF_FULLSCREEN
OF_GAME_MODE = _openframeworks.OF_GAME_MODE
OF_RECTMODE_CORNER = _openframeworks.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _openframeworks.OF_RECTMODE_CENTER
OF_IMAGE_GRAYSCALE = _openframeworks.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _openframeworks.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _openframeworks.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _openframeworks.OF_IMAGE_UNDEFINED
OF_PIXELS_MONO = _openframeworks.OF_PIXELS_MONO
OF_PIXELS_RGB = _openframeworks.OF_PIXELS_RGB
OF_PIXELS_RGBA = _openframeworks.OF_PIXELS_RGBA
OF_PIXELS_BGRA = _openframeworks.OF_PIXELS_BGRA
OF_PIXELS_RGB565 = _openframeworks.OF_PIXELS_RGB565
OF_MAX_STYLE_HISTORY = _openframeworks.OF_MAX_STYLE_HISTORY
OF_MAX_VIEWPORT_HISTORY = _openframeworks.OF_MAX_VIEWPORT_HISTORY
OF_MAX_CIRCLE_PTS = _openframeworks.OF_MAX_CIRCLE_PTS
OF_BLENDMODE_DISABLED = _openframeworks.OF_BLENDMODE_DISABLED
OF_BLENDMODE_ALPHA = _openframeworks.OF_BLENDMODE_ALPHA
OF_BLENDMODE_ADD = _openframeworks.OF_BLENDMODE_ADD
OF_BLENDMODE_SUBTRACT = _openframeworks.OF_BLENDMODE_SUBTRACT
OF_BLENDMODE_MULTIPLY = _openframeworks.OF_BLENDMODE_MULTIPLY
OF_BLENDMODE_SCREEN = _openframeworks.OF_BLENDMODE_SCREEN
OF_ORIENTATION_UNKNOWN = _openframeworks.OF_ORIENTATION_UNKNOWN
OF_ORIENTATION_DEFAULT = _openframeworks.OF_ORIENTATION_DEFAULT
OF_ORIENTATION_180 = _openframeworks.OF_ORIENTATION_180
OF_ORIENTATION_90_RIGHT = _openframeworks.OF_ORIENTATION_90_RIGHT
OF_ORIENTATION_90_LEFT = _openframeworks.OF_ORIENTATION_90_LEFT
OF_POLY_WINDING_ODD = _openframeworks.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _openframeworks.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _openframeworks.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _openframeworks.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _openframeworks.OF_POLY_WINDING_ABS_GEQ_TWO
OF_CLOSE = _openframeworks.OF_CLOSE
OF_LEFT_HANDED = _openframeworks.OF_LEFT_HANDED
OF_RIGHT_HANDED = _openframeworks.OF_RIGHT_HANDED
OF_KEY_MODIFIER = _openframeworks.OF_KEY_MODIFIER
OF_KEY_RETURN = _openframeworks.OF_KEY_RETURN
OF_KEY_ESC = _openframeworks.OF_KEY_ESC
OF_KEY_CTRL = _openframeworks.OF_KEY_CTRL
OF_KEY_ALT = _openframeworks.OF_KEY_ALT
OF_KEY_SHIFT = _openframeworks.OF_KEY_SHIFT
OF_KEY_BACKSPACE = _openframeworks.OF_KEY_BACKSPACE
OF_KEY_DEL = _openframeworks.OF_KEY_DEL
OF_KEY_F1 = _openframeworks.OF_KEY_F1
OF_KEY_F2 = _openframeworks.OF_KEY_F2
OF_KEY_F3 = _openframeworks.OF_KEY_F3
OF_KEY_F4 = _openframeworks.OF_KEY_F4
OF_KEY_F5 = _openframeworks.OF_KEY_F5
OF_KEY_F6 = _openframeworks.OF_KEY_F6
OF_KEY_F7 = _openframeworks.OF_KEY_F7
OF_KEY_F8 = _openframeworks.OF_KEY_F8
OF_KEY_F9 = _openframeworks.OF_KEY_F9
OF_KEY_F10 = _openframeworks.OF_KEY_F10
OF_KEY_F11 = _openframeworks.OF_KEY_F11
OF_KEY_F12 = _openframeworks.OF_KEY_F12
OF_KEY_LEFT = _openframeworks.OF_KEY_LEFT
OF_KEY_UP = _openframeworks.OF_KEY_UP
OF_KEY_RIGHT = _openframeworks.OF_KEY_RIGHT
OF_KEY_DOWN = _openframeworks.OF_KEY_DOWN
OF_KEY_PAGE_UP = _openframeworks.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _openframeworks.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _openframeworks.OF_KEY_HOME
OF_KEY_END = _openframeworks.OF_KEY_END
OF_KEY_INSERT = _openframeworks.OF_KEY_INSERT
OF_CONSOLE_COLOR_BLACK = _openframeworks.OF_CONSOLE_COLOR_BLACK
OF_BITMAPMODE_SIMPLE = _openframeworks.OF_BITMAPMODE_SIMPLE
OF_BITMAPMODE_SCREEN = _openframeworks.OF_BITMAPMODE_SCREEN
OF_BITMAPMODE_VIEWPORT = _openframeworks.OF_BITMAPMODE_VIEWPORT
OF_BITMAPMODE_MODEL = _openframeworks.OF_BITMAPMODE_MODEL
OF_BITMAPMODE_MODEL_BILLBOARD = _openframeworks.OF_BITMAPMODE_MODEL_BILLBOARD
class ofSerialDeviceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofSerialDeviceInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDevicePath(self): return _openframeworks.ofSerialDeviceInfo_getDevicePath(self)
    def getDeviceName(self): return _openframeworks.ofSerialDeviceInfo_getDeviceName(self)
    def getDeviceID(self): return _openframeworks.ofSerialDeviceInfo_getDeviceID(self)
    __swig_destroy__ = _openframeworks.delete_ofSerialDeviceInfo
    __del__ = lambda self : None;
ofSerialDeviceInfo_swigregister = _openframeworks.ofSerialDeviceInfo_swigregister
ofSerialDeviceInfo_swigregister(ofSerialDeviceInfo)

class ofStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofStyle:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofStyle(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofStyle
    __del__ = lambda self : None;
    color = _swig_property(_openframeworks.ofStyle_color_get, _openframeworks.ofStyle_color_set)
    bgColor = _swig_property(_openframeworks.ofStyle_bgColor_get, _openframeworks.ofStyle_bgColor_set)
    polyMode = _swig_property(_openframeworks.ofStyle_polyMode_get, _openframeworks.ofStyle_polyMode_set)
    rectMode = _swig_property(_openframeworks.ofStyle_rectMode_get, _openframeworks.ofStyle_rectMode_set)
    bFill = _swig_property(_openframeworks.ofStyle_bFill_get, _openframeworks.ofStyle_bFill_set)
    drawBitmapMode = _swig_property(_openframeworks.ofStyle_drawBitmapMode_get, _openframeworks.ofStyle_drawBitmapMode_set)
    blendingMode = _swig_property(_openframeworks.ofStyle_blendingMode_get, _openframeworks.ofStyle_blendingMode_set)
    smoothing = _swig_property(_openframeworks.ofStyle_smoothing_get, _openframeworks.ofStyle_smoothing_set)
    circleResolution = _swig_property(_openframeworks.ofStyle_circleResolution_get, _openframeworks.ofStyle_circleResolution_set)
    sphereResolution = _swig_property(_openframeworks.ofStyle_sphereResolution_get, _openframeworks.ofStyle_sphereResolution_set)
    curveResolution = _swig_property(_openframeworks.ofStyle_curveResolution_get, _openframeworks.ofStyle_curveResolution_set)
    lineWidth = _swig_property(_openframeworks.ofStyle_lineWidth_get, _openframeworks.ofStyle_lineWidth_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofStyle(self)
        return weakref_proxy(self)
ofStyle_swigregister = _openframeworks.ofStyle_swigregister
ofStyle_swigregister(ofStyle)

class ofPolygon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    points = _swig_property(_openframeworks.ofPolygon_points_get, _openframeworks.ofPolygon_points_set)
    def __init__(self): 
        this = _openframeworks.new_ofPolygon()
        try: self.this.append(this)
        except: self.this = this
    def clearPoints(self): return _openframeworks.ofPolygon_clearPoints(self)
    def addPoint(self, *args): return _openframeworks.ofPolygon_addPoint(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofPolygon
    __del__ = lambda self : None;
ofPolygon_swigregister = _openframeworks.ofPolygon_swigregister
ofPolygon_swigregister(ofPolygon)


def ofNextPow2(*args):
  return _openframeworks.ofNextPow2(*args)
ofNextPow2 = _openframeworks.ofNextPow2

def ofRandomf():
  return _openframeworks.ofRandomf()
ofRandomf = _openframeworks.ofRandomf

def ofRandomuf():
  return _openframeworks.ofRandomuf()
ofRandomuf = _openframeworks.ofRandomuf

def ofNormalize(*args):
  return _openframeworks.ofNormalize(*args)
ofNormalize = _openframeworks.ofNormalize

def ofClamp(*args):
  return _openframeworks.ofClamp(*args)
ofClamp = _openframeworks.ofClamp

def ofLerp(*args):
  return _openframeworks.ofLerp(*args)
ofLerp = _openframeworks.ofLerp

def ofDist(*args):
  return _openframeworks.ofDist(*args)
ofDist = _openframeworks.ofDist

def ofDistSquared(*args):
  return _openframeworks.ofDistSquared(*args)
ofDistSquared = _openframeworks.ofDistSquared

def ofSign(*args):
  return _openframeworks.ofSign(*args)
ofSign = _openframeworks.ofSign

def ofInRange(*args):
  return _openframeworks.ofInRange(*args)
ofInRange = _openframeworks.ofInRange

def ofRadToDeg(*args):
  return _openframeworks.ofRadToDeg(*args)
ofRadToDeg = _openframeworks.ofRadToDeg

def ofDegToRad(*args):
  return _openframeworks.ofDegToRad(*args)
ofDegToRad = _openframeworks.ofDegToRad

def ofLerpDegrees(*args):
  return _openframeworks.ofLerpDegrees(*args)
ofLerpDegrees = _openframeworks.ofLerpDegrees

def ofLerpRadians(*args):
  return _openframeworks.ofLerpRadians(*args)
ofLerpRadians = _openframeworks.ofLerpRadians

def ofAngleDifferenceDegrees(*args):
  return _openframeworks.ofAngleDifferenceDegrees(*args)
ofAngleDifferenceDegrees = _openframeworks.ofAngleDifferenceDegrees

def ofAngleDifferenceRadians(*args):
  return _openframeworks.ofAngleDifferenceRadians(*args)
ofAngleDifferenceRadians = _openframeworks.ofAngleDifferenceRadians

def ofRandomWidth():
  return _openframeworks.ofRandomWidth()
ofRandomWidth = _openframeworks.ofRandomWidth

def ofRandomHeight():
  return _openframeworks.ofRandomHeight()
ofRandomHeight = _openframeworks.ofRandomHeight

def ofLineSegmentIntersection(*args):
  return _openframeworks.ofLineSegmentIntersection(*args)
ofLineSegmentIntersection = _openframeworks.ofLineSegmentIntersection

def ofBezierPoint(*args):
  return _openframeworks.ofBezierPoint(*args)
ofBezierPoint = _openframeworks.ofBezierPoint

def ofCurvePoint(*args):
  return _openframeworks.ofCurvePoint(*args)
ofCurvePoint = _openframeworks.ofCurvePoint

def ofBezierTangent(*args):
  return _openframeworks.ofBezierTangent(*args)
ofBezierTangent = _openframeworks.ofBezierTangent

def ofCurveTangent(*args):
  return _openframeworks.ofCurveTangent(*args)
ofCurveTangent = _openframeworks.ofCurveTangent

def ofResetElapsedTimeCounter():
  return _openframeworks.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _openframeworks.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
  return _openframeworks.ofGetElapsedTimef()
ofGetElapsedTimef = _openframeworks.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
  return _openframeworks.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _openframeworks.ofGetElapsedTimeMillis

def ofGetElapsedTimeMicros():
  return _openframeworks.ofGetElapsedTimeMicros()
ofGetElapsedTimeMicros = _openframeworks.ofGetElapsedTimeMicros

def ofGetFrameNum():
  return _openframeworks.ofGetFrameNum()
ofGetFrameNum = _openframeworks.ofGetFrameNum

def ofGetSeconds():
  return _openframeworks.ofGetSeconds()
ofGetSeconds = _openframeworks.ofGetSeconds

def ofGetMinutes():
  return _openframeworks.ofGetMinutes()
ofGetMinutes = _openframeworks.ofGetMinutes

def ofGetHours():
  return _openframeworks.ofGetHours()
ofGetHours = _openframeworks.ofGetHours

def ofGetUnixTime():
  return _openframeworks.ofGetUnixTime()
ofGetUnixTime = _openframeworks.ofGetUnixTime

def ofGetSystemTime():
  return _openframeworks.ofGetSystemTime()
ofGetSystemTime = _openframeworks.ofGetSystemTime

def ofGetSystemTimeMicros():
  return _openframeworks.ofGetSystemTimeMicros()
ofGetSystemTimeMicros = _openframeworks.ofGetSystemTimeMicros

def ofGetYear():
  return _openframeworks.ofGetYear()
ofGetYear = _openframeworks.ofGetYear

def ofGetMonth():
  return _openframeworks.ofGetMonth()
ofGetMonth = _openframeworks.ofGetMonth

def ofGetDay():
  return _openframeworks.ofGetDay()
ofGetDay = _openframeworks.ofGetDay

def ofGetWeekday():
  return _openframeworks.ofGetWeekday()
ofGetWeekday = _openframeworks.ofGetWeekday

def ofLaunchBrowser(*args):
  return _openframeworks.ofLaunchBrowser(*args)
ofLaunchBrowser = _openframeworks.ofLaunchBrowser

def ofEnableDataPath():
  return _openframeworks.ofEnableDataPath()
ofEnableDataPath = _openframeworks.ofEnableDataPath

def ofDisableDataPath():
  return _openframeworks.ofDisableDataPath()
ofDisableDataPath = _openframeworks.ofDisableDataPath

def ofSetDataPathRoot(*args):
  return _openframeworks.ofSetDataPathRoot(*args)
ofSetDataPathRoot = _openframeworks.ofSetDataPathRoot

def ofToHex(*args):
  return _openframeworks.ofToHex(*args)
ofToHex = _openframeworks.ofToHex

def ofHexToInt(*args):
  return _openframeworks.ofHexToInt(*args)
ofHexToInt = _openframeworks.ofHexToInt

def ofHexToChar(*args):
  return _openframeworks.ofHexToChar(*args)
ofHexToChar = _openframeworks.ofHexToChar

def ofHexToFloat(*args):
  return _openframeworks.ofHexToFloat(*args)
ofHexToFloat = _openframeworks.ofHexToFloat

def ofHexToString(*args):
  return _openframeworks.ofHexToString(*args)
ofHexToString = _openframeworks.ofHexToString

def ofToInt(*args):
  return _openframeworks.ofToInt(*args)
ofToInt = _openframeworks.ofToInt

def ofToChar(*args):
  return _openframeworks.ofToChar(*args)
ofToChar = _openframeworks.ofToChar

def ofToFloat(*args):
  return _openframeworks.ofToFloat(*args)
ofToFloat = _openframeworks.ofToFloat

def ofToBool(*args):
  return _openframeworks.ofToBool(*args)
ofToBool = _openframeworks.ofToBool

def ofToBinary(*args):
  return _openframeworks.ofToBinary(*args)
ofToBinary = _openframeworks.ofToBinary

def ofBinaryToInt(*args):
  return _openframeworks.ofBinaryToInt(*args)
ofBinaryToInt = _openframeworks.ofBinaryToInt

def ofBinaryToChar(*args):
  return _openframeworks.ofBinaryToChar(*args)
ofBinaryToChar = _openframeworks.ofBinaryToChar

def ofBinaryToFloat(*args):
  return _openframeworks.ofBinaryToFloat(*args)
ofBinaryToFloat = _openframeworks.ofBinaryToFloat

def ofBinaryToString(*args):
  return _openframeworks.ofBinaryToString(*args)
ofBinaryToString = _openframeworks.ofBinaryToString

def ofGetVersionInfo():
  return _openframeworks.ofGetVersionInfo()
ofGetVersionInfo = _openframeworks.ofGetVersionInfo

def ofSaveScreen(*args):
  return _openframeworks.ofSaveScreen(*args)
ofSaveScreen = _openframeworks.ofSaveScreen

def ofSaveViewport(*args):
  return _openframeworks.ofSaveViewport(*args)
ofSaveViewport = _openframeworks.ofSaveViewport

def ofJoinString(*args):
  return _openframeworks.ofJoinString(*args)
ofJoinString = _openframeworks.ofJoinString

def ofStringReplace(*args):
  return _openframeworks.ofStringReplace(*args)
ofStringReplace = _openframeworks.ofStringReplace

def ofIsStringInString(*args):
  return _openframeworks.ofIsStringInString(*args)
ofIsStringInString = _openframeworks.ofIsStringInString

def ofToLower(*args):
  return _openframeworks.ofToLower(*args)
ofToLower = _openframeworks.ofToLower

def ofToUpper(*args):
  return _openframeworks.ofToUpper(*args)
ofToUpper = _openframeworks.ofToUpper
MAX_SERIAL_PORTS = _openframeworks.MAX_SERIAL_PORTS
class ofSerial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofSerial:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofSerial(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSerial
    __del__ = lambda self : None;
    def listDevices(self): return _openframeworks.ofSerial_listDevices(self)
    def enumerateDevices(self): return _openframeworks.ofSerial_enumerateDevices(self)
    def getDeviceList(self): return _openframeworks.ofSerial_getDeviceList(self)
    def close(self): return _openframeworks.ofSerial_close(self)
    def setup(self, *args): return _openframeworks.ofSerial_setup(self, *args)
    def readBytes(self, *args): return _openframeworks.ofSerial_readBytes(self, *args)
    def writeBytes(self, *args): return _openframeworks.ofSerial_writeBytes(self, *args)
    def writeByte(self, *args): return _openframeworks.ofSerial_writeByte(self, *args)
    def readByte(self): return _openframeworks.ofSerial_readByte(self)
    def flush(self, flushIn = True, flushOut = True): return _openframeworks.ofSerial_flush(self, flushIn, flushOut)
    def available(self): return _openframeworks.ofSerial_available(self)
    def drain(self): return _openframeworks.ofSerial_drain(self)
    bVerbose = _swig_property(_openframeworks.ofSerial_bVerbose_get, _openframeworks.ofSerial_bVerbose_set)
    def setVerbose(self, *args): return _openframeworks.ofSerial_setVerbose(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofSerial(self)
        return weakref_proxy(self)
ofSerial_swigregister = _openframeworks.ofSerial_swigregister
ofSerial_swigregister(ofSerial)

def ofSeedRandom(*args):
  return _openframeworks.ofSeedRandom(*args)
ofSeedRandom = _openframeworks.ofSeedRandom

def ofRandom(*args):
  return _openframeworks.ofRandom(*args)
ofRandom = _openframeworks.ofRandom

def ofMap(*args):
  return _openframeworks.ofMap(*args)
ofMap = _openframeworks.ofMap

def ofWrapRadians(*args):
  return _openframeworks.ofWrapRadians(*args)
ofWrapRadians = _openframeworks.ofWrapRadians

def ofWrapDegrees(*args):
  return _openframeworks.ofWrapDegrees(*args)
ofWrapDegrees = _openframeworks.ofWrapDegrees

def ofNoise(*args):
  return _openframeworks.ofNoise(*args)
ofNoise = _openframeworks.ofNoise

def ofSignedNoise(*args):
  return _openframeworks.ofSignedNoise(*args)
ofSignedNoise = _openframeworks.ofSignedNoise

def ofInsidePoly(*args):
  return _openframeworks.ofInsidePoly(*args)
ofInsidePoly = _openframeworks.ofInsidePoly

def ofGetTimestampString(*args):
  return _openframeworks.ofGetTimestampString(*args)
ofGetTimestampString = _openframeworks.ofGetTimestampString

def ofToDataPath(*args):
  return _openframeworks.ofToDataPath(*args)
ofToDataPath = _openframeworks.ofToDataPath

def ofSaveFrame(bUseViewport = False):
  return _openframeworks.ofSaveFrame(bUseViewport)
ofSaveFrame = _openframeworks.ofSaveFrame

def ofSplitString(*args):
  return _openframeworks.ofSplitString(*args)
ofSplitString = _openframeworks.ofSplitString

def ofVAArgsToString(*args):
  return _openframeworks.ofVAArgsToString(*args)
ofVAArgsToString = _openframeworks.ofVAArgsToString


def ofGetGlFormatAndType(*args):
  return _openframeworks.ofGetGlFormatAndType(*args)
ofGetGlFormatAndType = _openframeworks.ofGetGlFormatAndType

def ofGetImageTypeFromGLType(*args):
  return _openframeworks.ofGetImageTypeFromGLType(*args)
ofGetImageTypeFromGLType = _openframeworks.ofGetImageTypeFromGLType
OF_COMPRESS_NONE = _openframeworks.OF_COMPRESS_NONE
OF_COMPRESS_SRGB = _openframeworks.OF_COMPRESS_SRGB
OF_COMPRESS_ARB = _openframeworks.OF_COMPRESS_ARB
class ofTextureData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofTextureData()
        try: self.this.append(this)
        except: self.this = this
    textureID = _swig_property(_openframeworks.ofTextureData_textureID_get, _openframeworks.ofTextureData_textureID_set)
    textureTarget = _swig_property(_openframeworks.ofTextureData_textureTarget_get, _openframeworks.ofTextureData_textureTarget_set)
    glTypeInternal = _swig_property(_openframeworks.ofTextureData_glTypeInternal_get, _openframeworks.ofTextureData_glTypeInternal_set)
    glType = _swig_property(_openframeworks.ofTextureData_glType_get, _openframeworks.ofTextureData_glType_set)
    pixelType = _swig_property(_openframeworks.ofTextureData_pixelType_get, _openframeworks.ofTextureData_pixelType_set)
    tex_t = _swig_property(_openframeworks.ofTextureData_tex_t_get, _openframeworks.ofTextureData_tex_t_set)
    tex_u = _swig_property(_openframeworks.ofTextureData_tex_u_get, _openframeworks.ofTextureData_tex_u_set)
    tex_w = _swig_property(_openframeworks.ofTextureData_tex_w_get, _openframeworks.ofTextureData_tex_w_set)
    tex_h = _swig_property(_openframeworks.ofTextureData_tex_h_get, _openframeworks.ofTextureData_tex_h_set)
    width = _swig_property(_openframeworks.ofTextureData_width_get, _openframeworks.ofTextureData_width_set)
    height = _swig_property(_openframeworks.ofTextureData_height_get, _openframeworks.ofTextureData_height_set)
    bFlipTexture = _swig_property(_openframeworks.ofTextureData_bFlipTexture_get, _openframeworks.ofTextureData_bFlipTexture_set)
    compressionType = _swig_property(_openframeworks.ofTextureData_compressionType_get, _openframeworks.ofTextureData_compressionType_set)
    bAllocated = _swig_property(_openframeworks.ofTextureData_bAllocated_get, _openframeworks.ofTextureData_bAllocated_set)
    __swig_destroy__ = _openframeworks.delete_ofTextureData
    __del__ = lambda self : None;
ofTextureData_swigregister = _openframeworks.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)

def ofGetGlInternalFormat(*args):
  return _openframeworks.ofGetGlInternalFormat(*args)
ofGetGlInternalFormat = _openframeworks.ofGetGlInternalFormat


def ofEnableTextureEdgeHack():
  return _openframeworks.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _openframeworks.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
  return _openframeworks.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _openframeworks.ofDisableTextureEdgeHack
class ofTexture(ofBaseDraws):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofTexture:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofTexture(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _openframeworks.ofTexture_assign(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofTexture
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofTexture_allocate(self, *args)
    def clear(self): return _openframeworks.ofTexture_clear(self)
    def loadData(self, *args): return _openframeworks.ofTexture_loadData(self, *args)
    def loadScreenData(self, *args): return _openframeworks.ofTexture_loadScreenData(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofTexture_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofTexture_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofTexture_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofTexture_draw(self, *args)
    def readToPixels(self, *args): return _openframeworks.ofTexture_readToPixels(self, *args)
    def bind(self): return _openframeworks.ofTexture_bind(self)
    def unbind(self): return _openframeworks.ofTexture_unbind(self)
    def getCoordFromPoint(self, *args): return _openframeworks.ofTexture_getCoordFromPoint(self, *args)
    def getCoordFromPercent(self, *args): return _openframeworks.ofTexture_getCoordFromPercent(self, *args)
    def setTextureWrap(self, *args): return _openframeworks.ofTexture_setTextureWrap(self, *args)
    def setTextureMinMagFilter(self, *args): return _openframeworks.ofTexture_setTextureMinMagFilter(self, *args)
    def setCompression(self, *args): return _openframeworks.ofTexture_setCompression(self, *args)
    def bAllocated(self): return _openframeworks.ofTexture_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofTexture_isAllocated(self)
    def getTextureData(self): return _openframeworks.ofTexture_getTextureData(self)
    texData = _swig_property(_openframeworks.ofTexture_texData_get, _openframeworks.ofTexture_texData_set)
    def getHeight(self): return _openframeworks.ofTexture_getHeight(self)
    def getWidth(self): return _openframeworks.ofTexture_getWidth(self)
    def clearMask(self): return _openframeworks.ofTexture_clearMask(self)
    def addPointToMask(self, *args): return _openframeworks.ofTexture_addPointToMask(self, *args)
    mask = _swig_property(_openframeworks.ofTexture_mask_get, _openframeworks.ofTexture_mask_set)
    useMask = _swig_property(_openframeworks.ofTexture_useMask_get, _openframeworks.ofTexture_useMask_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofTexture(self)
        return weakref_proxy(self)
ofTexture_swigregister = _openframeworks.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

class ofMaterial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofMaterial:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofMaterial(_self, )
        try: self.this.append(this)
        except: self.this = this
    def setColors(self, *args): return _openframeworks.ofMaterial_setColors(self, *args)
    def setDiffuseColor(self, *args): return _openframeworks.ofMaterial_setDiffuseColor(self, *args)
    def setAmbientColor(self, *args): return _openframeworks.ofMaterial_setAmbientColor(self, *args)
    def setSpecularColor(self, *args): return _openframeworks.ofMaterial_setSpecularColor(self, *args)
    def setEmissiveColor(self, *args): return _openframeworks.ofMaterial_setEmissiveColor(self, *args)
    def setShininess(self, *args): return _openframeworks.ofMaterial_setShininess(self, *args)
    def getDiffuseColor(self): return _openframeworks.ofMaterial_getDiffuseColor(self)
    def getAmbientColor(self): return _openframeworks.ofMaterial_getAmbientColor(self)
    def getSpecularColor(self): return _openframeworks.ofMaterial_getSpecularColor(self)
    def getEmissiveColor(self): return _openframeworks.ofMaterial_getEmissiveColor(self)
    def getShininess(self): return _openframeworks.ofMaterial_getShininess(self)
    def begin(self): return _openframeworks.ofMaterial_begin(self)
    def end(self): return _openframeworks.ofMaterial_end(self)
    __swig_destroy__ = _openframeworks.delete_ofMaterial
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofMaterial(self)
        return weakref_proxy(self)
ofMaterial_swigregister = _openframeworks.ofMaterial_swigregister
ofMaterial_swigregister(ofMaterial)

class charProps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    character = _swig_property(_openframeworks.charProps_character_get, _openframeworks.charProps_character_set)
    height = _swig_property(_openframeworks.charProps_height_get, _openframeworks.charProps_height_set)
    width = _swig_property(_openframeworks.charProps_width_get, _openframeworks.charProps_width_set)
    setWidth = _swig_property(_openframeworks.charProps_setWidth_get, _openframeworks.charProps_setWidth_set)
    topExtent = _swig_property(_openframeworks.charProps_topExtent_get, _openframeworks.charProps_topExtent_set)
    leftExtent = _swig_property(_openframeworks.charProps_leftExtent_get, _openframeworks.charProps_leftExtent_set)
    tW = _swig_property(_openframeworks.charProps_tW_get, _openframeworks.charProps_tW_set)
    tH = _swig_property(_openframeworks.charProps_tH_get, _openframeworks.charProps_tH_set)
    x1 = _swig_property(_openframeworks.charProps_x1_get, _openframeworks.charProps_x1_set)
    x2 = _swig_property(_openframeworks.charProps_x2_get, _openframeworks.charProps_x2_set)
    y1 = _swig_property(_openframeworks.charProps_y1_get, _openframeworks.charProps_y1_set)
    y2 = _swig_property(_openframeworks.charProps_y2_get, _openframeworks.charProps_y2_set)
    t1 = _swig_property(_openframeworks.charProps_t1_get, _openframeworks.charProps_t1_set)
    t2 = _swig_property(_openframeworks.charProps_t2_get, _openframeworks.charProps_t2_set)
    v1 = _swig_property(_openframeworks.charProps_v1_get, _openframeworks.charProps_v1_set)
    v2 = _swig_property(_openframeworks.charProps_v2_get, _openframeworks.charProps_v2_set)
    def __init__(self): 
        this = _openframeworks.new_charProps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_charProps
    __del__ = lambda self : None;
charProps_swigregister = _openframeworks.charProps_swigregister
charProps_swigregister(charProps)

NUM_CHARACTER_TO_START = _openframeworks.NUM_CHARACTER_TO_START
class ofTrueTypeFont(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofTrueTypeFont:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofTrueTypeFont(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTrueTypeFont
    __del__ = lambda self : None;
    setGlobalDpi = staticmethod(_openframeworks.ofTrueTypeFont_setGlobalDpi)
    def loadFont(self, *args): return _openframeworks.ofTrueTypeFont_loadFont(self, *args)
    def isLoaded(self): return _openframeworks.ofTrueTypeFont_isLoaded(self)
    def isAntiAliased(self): return _openframeworks.ofTrueTypeFont_isAntiAliased(self)
    def hasFullCharacterSet(self): return _openframeworks.ofTrueTypeFont_hasFullCharacterSet(self)
    def getSize(self): return _openframeworks.ofTrueTypeFont_getSize(self)
    def getLineHeight(self): return _openframeworks.ofTrueTypeFont_getLineHeight(self)
    def setLineHeight(self, *args): return _openframeworks.ofTrueTypeFont_setLineHeight(self, *args)
    def getLetterSpacing(self): return _openframeworks.ofTrueTypeFont_getLetterSpacing(self)
    def setLetterSpacing(self, *args): return _openframeworks.ofTrueTypeFont_setLetterSpacing(self, *args)
    def getSpaceSize(self): return _openframeworks.ofTrueTypeFont_getSpaceSize(self)
    def setSpaceSize(self, *args): return _openframeworks.ofTrueTypeFont_setSpaceSize(self, *args)
    def stringWidth(self, *args): return _openframeworks.ofTrueTypeFont_stringWidth(self, *args)
    def stringHeight(self, *args): return _openframeworks.ofTrueTypeFont_stringHeight(self, *args)
    def getStringBoundingBox(self, *args): return _openframeworks.ofTrueTypeFont_getStringBoundingBox(self, *args)
    def drawString(self, *args): return _openframeworks.ofTrueTypeFont_drawString(self, *args)
    def drawStringAsShapes(self, *args): return _openframeworks.ofTrueTypeFont_drawStringAsShapes(self, *args)
    def getNumCharacters(self): return _openframeworks.ofTrueTypeFont_getNumCharacters(self)
    def getCharacterAsPoints(self, *args): return _openframeworks.ofTrueTypeFont_getCharacterAsPoints(self, *args)
    def getStringAsPoints(self, *args): return _openframeworks.ofTrueTypeFont_getStringAsPoints(self, *args)
    def bind(self): return _openframeworks.ofTrueTypeFont_bind(self)
    def unbind(self): return _openframeworks.ofTrueTypeFont_unbind(self)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofTrueTypeFont(self)
        return weakref_proxy(self)
ofTrueTypeFont_swigregister = _openframeworks.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)

def ofTrueTypeFont_setGlobalDpi(*args):
  return _openframeworks.ofTrueTypeFont_setGlobalDpi(*args)
ofTrueTypeFont_setGlobalDpi = _openframeworks.ofTrueTypeFont_setGlobalDpi

CIRC_RESOLUTION = _openframeworks.CIRC_RESOLUTION

def ofSetCurrentRenderer(*args):
  return _openframeworks.ofSetCurrentRenderer(*args)
ofSetCurrentRenderer = _openframeworks.ofSetCurrentRenderer

def ofGetCurrentRenderer():
  return _openframeworks.ofGetCurrentRenderer()
ofGetCurrentRenderer = _openframeworks.ofGetCurrentRenderer

def ofGetGLRenderer():
  return _openframeworks.ofGetGLRenderer()
ofGetGLRenderer = _openframeworks.ofGetGLRenderer

def ofEndSaveScreenAsPDF():
  return _openframeworks.ofEndSaveScreenAsPDF()
ofEndSaveScreenAsPDF = _openframeworks.ofEndSaveScreenAsPDF

def ofGetUsingArbTex():
  return _openframeworks.ofGetUsingArbTex()
ofGetUsingArbTex = _openframeworks.ofGetUsingArbTex

def ofEnableArbTex():
  return _openframeworks.ofEnableArbTex()
ofEnableArbTex = _openframeworks.ofEnableArbTex

def ofDisableArbTex():
  return _openframeworks.ofDisableArbTex()
ofDisableArbTex = _openframeworks.ofDisableArbTex

def ofGetUsingNormalizedTexCoords():
  return _openframeworks.ofGetUsingNormalizedTexCoords()
ofGetUsingNormalizedTexCoords = _openframeworks.ofGetUsingNormalizedTexCoords

def ofEnableNormalizedTexCoords():
  return _openframeworks.ofEnableNormalizedTexCoords()
ofEnableNormalizedTexCoords = _openframeworks.ofEnableNormalizedTexCoords

def ofDisableNormalizedTexCoords():
  return _openframeworks.ofDisableNormalizedTexCoords()
ofDisableNormalizedTexCoords = _openframeworks.ofDisableNormalizedTexCoords

def ofGetUsingCustomTextureWrap():
  return _openframeworks.ofGetUsingCustomTextureWrap()
ofGetUsingCustomTextureWrap = _openframeworks.ofGetUsingCustomTextureWrap

def ofRestoreTextureWrap():
  return _openframeworks.ofRestoreTextureWrap()
ofRestoreTextureWrap = _openframeworks.ofRestoreTextureWrap

def ofGetUsingCustomMinMagFilters():
  return _openframeworks.ofGetUsingCustomMinMagFilters()
ofGetUsingCustomMinMagFilters = _openframeworks.ofGetUsingCustomMinMagFilters

def ofRestoreMinMagFilters():
  return _openframeworks.ofRestoreMinMagFilters()
ofRestoreMinMagFilters = _openframeworks.ofRestoreMinMagFilters

def ofPushView():
  return _openframeworks.ofPushView()
ofPushView = _openframeworks.ofPushView

def ofPopView():
  return _openframeworks.ofPopView()
ofPopView = _openframeworks.ofPopView

def ofGetCurrentViewport():
  return _openframeworks.ofGetCurrentViewport()
ofGetCurrentViewport = _openframeworks.ofGetCurrentViewport

def ofGetViewportWidth():
  return _openframeworks.ofGetViewportWidth()
ofGetViewportWidth = _openframeworks.ofGetViewportWidth

def ofGetViewportHeight():
  return _openframeworks.ofGetViewportHeight()
ofGetViewportHeight = _openframeworks.ofGetViewportHeight

def ofOrientationToDegrees(*args):
  return _openframeworks.ofOrientationToDegrees(*args)
ofOrientationToDegrees = _openframeworks.ofOrientationToDegrees

def ofSetCoordHandedness(*args):
  return _openframeworks.ofSetCoordHandedness(*args)
ofSetCoordHandedness = _openframeworks.ofSetCoordHandedness

def ofGetCoordHandedness():
  return _openframeworks.ofGetCoordHandedness()
ofGetCoordHandedness = _openframeworks.ofGetCoordHandedness

def ofPushMatrix():
  return _openframeworks.ofPushMatrix()
ofPushMatrix = _openframeworks.ofPushMatrix

def ofPopMatrix():
  return _openframeworks.ofPopMatrix()
ofPopMatrix = _openframeworks.ofPopMatrix

def ofRotateX(*args):
  return _openframeworks.ofRotateX(*args)
ofRotateX = _openframeworks.ofRotateX

def ofRotateY(*args):
  return _openframeworks.ofRotateY(*args)
ofRotateY = _openframeworks.ofRotateY

def ofRotateZ(*args):
  return _openframeworks.ofRotateZ(*args)
ofRotateZ = _openframeworks.ofRotateZ

def ofSetupGraphicDefaults():
  return _openframeworks.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _openframeworks.ofSetupGraphicDefaults

def ofSetupScreen():
  return _openframeworks.ofSetupScreen()
ofSetupScreen = _openframeworks.ofSetupScreen

def ofGetRectMode():
  return _openframeworks.ofGetRectMode()
ofGetRectMode = _openframeworks.ofGetRectMode

def ofSetCircleResolution(*args):
  return _openframeworks.ofSetCircleResolution(*args)
ofSetCircleResolution = _openframeworks.ofSetCircleResolution

def ofSetCurveResolution(*args):
  return _openframeworks.ofSetCurveResolution(*args)
ofSetCurveResolution = _openframeworks.ofSetCurveResolution

def ofSetSphereResolution(*args):
  return _openframeworks.ofSetSphereResolution(*args)
ofSetSphereResolution = _openframeworks.ofSetSphereResolution

def ofNoFill():
  return _openframeworks.ofNoFill()
ofNoFill = _openframeworks.ofNoFill

def ofFill():
  return _openframeworks.ofFill()
ofFill = _openframeworks.ofFill

def ofGetFill():
  return _openframeworks.ofGetFill()
ofGetFill = _openframeworks.ofGetFill

def ofSetLineWidth(*args):
  return _openframeworks.ofSetLineWidth(*args)
ofSetLineWidth = _openframeworks.ofSetLineWidth

def ofSetHexColor(*args):
  return _openframeworks.ofSetHexColor(*args)
ofSetHexColor = _openframeworks.ofSetHexColor

def ofEnableBlendMode(*args):
  return _openframeworks.ofEnableBlendMode(*args)
ofEnableBlendMode = _openframeworks.ofEnableBlendMode

def ofDisableBlendMode():
  return _openframeworks.ofDisableBlendMode()
ofDisableBlendMode = _openframeworks.ofDisableBlendMode

def ofEnablePointSprites():
  return _openframeworks.ofEnablePointSprites()
ofEnablePointSprites = _openframeworks.ofEnablePointSprites

def ofDisablePointSprites():
  return _openframeworks.ofDisablePointSprites()
ofDisablePointSprites = _openframeworks.ofDisablePointSprites

def ofEnableAlphaBlending():
  return _openframeworks.ofEnableAlphaBlending()
ofEnableAlphaBlending = _openframeworks.ofEnableAlphaBlending

def ofDisableAlphaBlending():
  return _openframeworks.ofDisableAlphaBlending()
ofDisableAlphaBlending = _openframeworks.ofDisableAlphaBlending

def ofEnableSmoothing():
  return _openframeworks.ofEnableSmoothing()
ofEnableSmoothing = _openframeworks.ofEnableSmoothing

def ofDisableSmoothing():
  return _openframeworks.ofDisableSmoothing()
ofDisableSmoothing = _openframeworks.ofDisableSmoothing

def ofGetStyle():
  return _openframeworks.ofGetStyle()
ofGetStyle = _openframeworks.ofGetStyle

def ofSetStyle(*args):
  return _openframeworks.ofSetStyle(*args)
ofSetStyle = _openframeworks.ofSetStyle

def ofPushStyle():
  return _openframeworks.ofPushStyle()
ofPushStyle = _openframeworks.ofPushStyle

def ofPopStyle():
  return _openframeworks.ofPopStyle()
ofPopStyle = _openframeworks.ofPopStyle

def ofSetPolyMode(*args):
  return _openframeworks.ofSetPolyMode(*args)
ofSetPolyMode = _openframeworks.ofSetPolyMode

def ofSetRectMode(*args):
  return _openframeworks.ofSetRectMode(*args)
ofSetRectMode = _openframeworks.ofSetRectMode

def ofBgColorPtr():
  return _openframeworks.ofBgColorPtr()
ofBgColorPtr = _openframeworks.ofBgColorPtr

def ofSetBackgroundAuto(*args):
  return _openframeworks.ofSetBackgroundAuto(*args)
ofSetBackgroundAuto = _openframeworks.ofSetBackgroundAuto

def ofClearAlpha():
  return _openframeworks.ofClearAlpha()
ofClearAlpha = _openframeworks.ofClearAlpha

def ofbClearBg():
  return _openframeworks.ofbClearBg()
ofbClearBg = _openframeworks.ofbClearBg

def ofCurve(*args):
  return _openframeworks.ofCurve(*args)
ofCurve = _openframeworks.ofCurve

def ofBezier(*args):
  return _openframeworks.ofBezier(*args)
ofBezier = _openframeworks.ofBezier

def ofBeginShape():
  return _openframeworks.ofBeginShape()
ofBeginShape = _openframeworks.ofBeginShape

def ofVertexes(*args):
  return _openframeworks.ofVertexes(*args)
ofVertexes = _openframeworks.ofVertexes

def ofCurveVertexes(*args):
  return _openframeworks.ofCurveVertexes(*args)
ofCurveVertexes = _openframeworks.ofCurveVertexes

def ofBezierVertex(*args):
  return _openframeworks.ofBezierVertex(*args)
ofBezierVertex = _openframeworks.ofBezierVertex

def ofSetDrawBitmapMode(*args):
  return _openframeworks.ofSetDrawBitmapMode(*args)
ofSetDrawBitmapMode = _openframeworks.ofSetDrawBitmapMode
class ofVec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_openframeworks.ofVec3f_x_get, _openframeworks.ofVec3f_x_set)
    y = _swig_property(_openframeworks.ofVec3f_y_get, _openframeworks.ofVec3f_y_set)
    z = _swig_property(_openframeworks.ofVec3f_z_get, _openframeworks.ofVec3f_z_set)
    def __init__(self, *args): 
        this = _openframeworks.new_ofVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self, *args): return _openframeworks.ofVec3f_getPtr(self, *args)
    def set(self, *args): return _openframeworks.ofVec3f_set(self, *args)
    def __eq__(self, *args): return _openframeworks.ofVec3f___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofVec3f___ne__(self, *args)
    def match(self, *args): return _openframeworks.ofVec3f_match(self, *args)
    def align(self, *args): return _openframeworks.ofVec3f_align(self, *args)
    def alignRad(self, *args): return _openframeworks.ofVec3f_alignRad(self, *args)
    def __neg__(self): return _openframeworks.ofVec3f___neg__(self)
    def __add__(self, *args): return _openframeworks.ofVec3f___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofVec3f___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofVec3f___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofVec3f___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofVec3f___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofVec3f___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofVec3f___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofVec3f___idiv__(self, *args)
    def getScaled(self, *args): return _openframeworks.ofVec3f_getScaled(self, *args)
    def scale(self, *args): return _openframeworks.ofVec3f_scale(self, *args)
    def getRotated(self, *args): return _openframeworks.ofVec3f_getRotated(self, *args)
    def rotate(self, *args): return _openframeworks.ofVec3f_rotate(self, *args)
    def getRotatedRad(self, *args): return _openframeworks.ofVec3f_getRotatedRad(self, *args)
    def rotateRad(self, *args): return _openframeworks.ofVec3f_rotateRad(self, *args)
    def getMapped(self, *args): return _openframeworks.ofVec3f_getMapped(self, *args)
    def map(self, *args): return _openframeworks.ofVec3f_map(self, *args)
    def distance(self, *args): return _openframeworks.ofVec3f_distance(self, *args)
    def squareDistance(self, *args): return _openframeworks.ofVec3f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _openframeworks.ofVec3f_getInterpolated(self, *args)
    def interpolate(self, *args): return _openframeworks.ofVec3f_interpolate(self, *args)
    def getMiddle(self, *args): return _openframeworks.ofVec3f_getMiddle(self, *args)
    def middle(self, *args): return _openframeworks.ofVec3f_middle(self, *args)
    def average(self, *args): return _openframeworks.ofVec3f_average(self, *args)
    def getNormalized(self): return _openframeworks.ofVec3f_getNormalized(self)
    def normalize(self): return _openframeworks.ofVec3f_normalize(self)
    def getLimited(self, *args): return _openframeworks.ofVec3f_getLimited(self, *args)
    def limit(self, *args): return _openframeworks.ofVec3f_limit(self, *args)
    def getCrossed(self, *args): return _openframeworks.ofVec3f_getCrossed(self, *args)
    def cross(self, *args): return _openframeworks.ofVec3f_cross(self, *args)
    def getPerpendicular(self, *args): return _openframeworks.ofVec3f_getPerpendicular(self, *args)
    def perpendicular(self, *args): return _openframeworks.ofVec3f_perpendicular(self, *args)
    def length(self): return _openframeworks.ofVec3f_length(self)
    def squareLength(self): return _openframeworks.ofVec3f_squareLength(self)
    def angle(self, *args): return _openframeworks.ofVec3f_angle(self, *args)
    def angleRad(self, *args): return _openframeworks.ofVec3f_angleRad(self, *args)
    def dot(self, *args): return _openframeworks.ofVec3f_dot(self, *args)
    def rescaled(self, *args): return _openframeworks.ofVec3f_rescaled(self, *args)
    def rescale(self, *args): return _openframeworks.ofVec3f_rescale(self, *args)
    def normalized(self): return _openframeworks.ofVec3f_normalized(self)
    def limited(self, *args): return _openframeworks.ofVec3f_limited(self, *args)
    def crossed(self, *args): return _openframeworks.ofVec3f_crossed(self, *args)
    def perpendiculared(self, *args): return _openframeworks.ofVec3f_perpendiculared(self, *args)
    def lengthSquared(self): return _openframeworks.ofVec3f_lengthSquared(self)
    def mapped(self, *args): return _openframeworks.ofVec3f_mapped(self, *args)
    def distanceSquared(self, *args): return _openframeworks.ofVec3f_distanceSquared(self, *args)
    def interpolated(self, *args): return _openframeworks.ofVec3f_interpolated(self, *args)
    def middled(self, *args): return _openframeworks.ofVec3f_middled(self, *args)
    def rotated(self, *args): return _openframeworks.ofVec3f_rotated(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofVec3f
    __del__ = lambda self : None;
ofVec3f_swigregister = _openframeworks.ofVec3f_swigregister
ofVec3f_swigregister(ofVec3f)

def ofBeginSaveScreenAsPDF(*args):
  return _openframeworks.ofBeginSaveScreenAsPDF(*args)
ofBeginSaveScreenAsPDF = _openframeworks.ofBeginSaveScreenAsPDF

def ofSetTextureWrap(*args):
  return _openframeworks.ofSetTextureWrap(*args)
ofSetTextureWrap = _openframeworks.ofSetTextureWrap

def ofSetMinMagFilters(minFilter = 0x2601, maxFilter = 0x2601):
  return _openframeworks.ofSetMinMagFilters(minFilter, maxFilter)
ofSetMinMagFilters = _openframeworks.ofSetMinMagFilters

def ofViewport(*args):
  return _openframeworks.ofViewport(*args)
ofViewport = _openframeworks.ofViewport

def ofSetupScreenPerspective(*args):
  return _openframeworks.ofSetupScreenPerspective(*args)
ofSetupScreenPerspective = _openframeworks.ofSetupScreenPerspective

def ofSetupScreenOrtho(*args):
  return _openframeworks.ofSetupScreenOrtho(*args)
ofSetupScreenOrtho = _openframeworks.ofSetupScreenOrtho

def ofTranslate(*args):
  return _openframeworks.ofTranslate(*args)
ofTranslate = _openframeworks.ofTranslate

def ofScale(*args):
  return _openframeworks.ofScale(*args)
ofScale = _openframeworks.ofScale

def ofRotate(*args):
  return _openframeworks.ofRotate(*args)
ofRotate = _openframeworks.ofRotate

def ofSetColor(*args):
  return _openframeworks.ofSetColor(*args)
ofSetColor = _openframeworks.ofSetColor

def ofBackground(*args):
  return _openframeworks.ofBackground(*args)
ofBackground = _openframeworks.ofBackground

def ofBackgroundHex(*args):
  return _openframeworks.ofBackgroundHex(*args)
ofBackgroundHex = _openframeworks.ofBackgroundHex

def ofClear(*args):
  return _openframeworks.ofClear(*args)
ofClear = _openframeworks.ofClear

def ofTriangle(*args):
  return _openframeworks.ofTriangle(*args)
ofTriangle = _openframeworks.ofTriangle

def ofCircle(*args):
  return _openframeworks.ofCircle(*args)
ofCircle = _openframeworks.ofCircle

def ofEllipse(*args):
  return _openframeworks.ofEllipse(*args)
ofEllipse = _openframeworks.ofEllipse

def ofLine(*args):
  return _openframeworks.ofLine(*args)
ofLine = _openframeworks.ofLine

def ofRect(*args):
  return _openframeworks.ofRect(*args)
ofRect = _openframeworks.ofRect

def ofVertex(*args):
  return _openframeworks.ofVertex(*args)
ofVertex = _openframeworks.ofVertex

def ofCurveVertex(*args):
  return _openframeworks.ofCurveVertex(*args)
ofCurveVertex = _openframeworks.ofCurveVertex

def ofEndShape(bClose = False):
  return _openframeworks.ofEndShape(bClose)
ofEndShape = _openframeworks.ofEndShape

def ofNextContour(bClose = False):
  return _openframeworks.ofNextContour(bClose)
ofNextContour = _openframeworks.ofNextContour

def ofSphere(*args):
  return _openframeworks.ofSphere(*args)
ofSphere = _openframeworks.ofSphere

def ofBox(*args):
  return _openframeworks.ofBox(*args)
ofBox = _openframeworks.ofBox

def ofDrawBitmapString(*args):
  return _openframeworks.ofDrawBitmapString(*args)
ofDrawBitmapString = _openframeworks.ofDrawBitmapString

class ofVec4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_openframeworks.ofVec4f_x_get, _openframeworks.ofVec4f_x_set)
    y = _swig_property(_openframeworks.ofVec4f_y_get, _openframeworks.ofVec4f_y_set)
    z = _swig_property(_openframeworks.ofVec4f_z_get, _openframeworks.ofVec4f_z_set)
    w = _swig_property(_openframeworks.ofVec4f_w_get, _openframeworks.ofVec4f_w_set)
    def __init__(self, *args): 
        this = _openframeworks.new_ofVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofVec4f_set(self, *args)
    def getPtr(self, *args): return _openframeworks.ofVec4f_getPtr(self, *args)
    def __eq__(self, *args): return _openframeworks.ofVec4f___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofVec4f___ne__(self, *args)
    def match(self, *args): return _openframeworks.ofVec4f_match(self, *args)
    def __sub__(self, *args): return _openframeworks.ofVec4f___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofVec4f___isub__(self, *args)
    def __add__(self, *args): return _openframeworks.ofVec4f___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofVec4f___iadd__(self, *args)
    def __neg__(self): return _openframeworks.ofVec4f___neg__(self)
    def __mul__(self, *args): return _openframeworks.ofVec4f___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofVec4f___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofVec4f___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofVec4f___idiv__(self, *args)
    def getScaled(self, *args): return _openframeworks.ofVec4f_getScaled(self, *args)
    def scale(self, *args): return _openframeworks.ofVec4f_scale(self, *args)
    def distance(self, *args): return _openframeworks.ofVec4f_distance(self, *args)
    def squareDistance(self, *args): return _openframeworks.ofVec4f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _openframeworks.ofVec4f_getInterpolated(self, *args)
    def interpolate(self, *args): return _openframeworks.ofVec4f_interpolate(self, *args)
    def getMiddle(self, *args): return _openframeworks.ofVec4f_getMiddle(self, *args)
    def middle(self, *args): return _openframeworks.ofVec4f_middle(self, *args)
    def average(self, *args): return _openframeworks.ofVec4f_average(self, *args)
    def getNormalized(self): return _openframeworks.ofVec4f_getNormalized(self)
    def normalize(self): return _openframeworks.ofVec4f_normalize(self)
    def getLimited(self, *args): return _openframeworks.ofVec4f_getLimited(self, *args)
    def limit(self, *args): return _openframeworks.ofVec4f_limit(self, *args)
    def length(self): return _openframeworks.ofVec4f_length(self)
    def squareLength(self): return _openframeworks.ofVec4f_squareLength(self)
    def dot(self, *args): return _openframeworks.ofVec4f_dot(self, *args)
    def rescaled(self, *args): return _openframeworks.ofVec4f_rescaled(self, *args)
    def rescale(self, *args): return _openframeworks.ofVec4f_rescale(self, *args)
    def normalized(self): return _openframeworks.ofVec4f_normalized(self)
    def limited(self, *args): return _openframeworks.ofVec4f_limited(self, *args)
    def lengthSquared(self): return _openframeworks.ofVec4f_lengthSquared(self)
    def distanceSquared(self, *args): return _openframeworks.ofVec4f_distanceSquared(self, *args)
    def interpolated(self, *args): return _openframeworks.ofVec4f_interpolated(self, *args)
    def middled(self, *args): return _openframeworks.ofVec4f_middled(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofVec4f
    __del__ = lambda self : None;
ofVec4f_swigregister = _openframeworks.ofVec4f_swigregister
ofVec4f_swigregister(ofVec4f)

class ofMatrix4x4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _mat = _swig_property(_openframeworks.ofMatrix4x4__mat_get, _openframeworks.ofMatrix4x4__mat_set)
    def __init__(self, *args): 
        this = _openframeworks.new_ofMatrix4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMatrix4x4
    __del__ = lambda self : None;
    def get(self, *args): return _openframeworks.ofMatrix4x4_get(self, *args)
    def __call__(self, *args): return _openframeworks.ofMatrix4x4___call__(self, *args)
    def getRowAsVec3f(self, *args): return _openframeworks.ofMatrix4x4_getRowAsVec3f(self, *args)
    def getRowAsVec4f(self, *args): return _openframeworks.ofMatrix4x4_getRowAsVec4f(self, *args)
    def isValid(self): return _openframeworks.ofMatrix4x4_isValid(self)
    def isNaN(self): return _openframeworks.ofMatrix4x4_isNaN(self)
    def assign(self, *args): return _openframeworks.ofMatrix4x4_assign(self, *args)
    def set(self, *args): return _openframeworks.ofMatrix4x4_set(self, *args)
    def getPtr(self, *args): return _openframeworks.ofMatrix4x4_getPtr(self, *args)
    def isIdentity(self): return _openframeworks.ofMatrix4x4_isIdentity(self)
    def makeIdentityMatrix(self): return _openframeworks.ofMatrix4x4_makeIdentityMatrix(self)
    def makeScaleMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeScaleMatrix(self, *args)
    def makeTranslationMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeTranslationMatrix(self, *args)
    def makeRotationMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeRotationMatrix(self, *args)
    def makeInvertOf(self, *args): return _openframeworks.ofMatrix4x4_makeInvertOf(self, *args)
    def makeOrthoNormalOf(self, *args): return _openframeworks.ofMatrix4x4_makeOrthoNormalOf(self, *args)
    def makeFromMultiplicationOf(self, *args): return _openframeworks.ofMatrix4x4_makeFromMultiplicationOf(self, *args)
    def getInverse(self): return _openframeworks.ofMatrix4x4_getInverse(self)
    def makeOrthoMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeOrthoMatrix(self, *args)
    def makeOrtho2DMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeOrtho2DMatrix(self, *args)
    def makeFrustumMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeFrustumMatrix(self, *args)
    def makePerspectiveMatrix(self, *args): return _openframeworks.ofMatrix4x4_makePerspectiveMatrix(self, *args)
    def makeLookAtMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeLookAtMatrix(self, *args)
    def makeLookAtViewMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeLookAtViewMatrix(self, *args)
    def getOrtho(self, *args): return _openframeworks.ofMatrix4x4_getOrtho(self, *args)
    def getFrustum(self, *args): return _openframeworks.ofMatrix4x4_getFrustum(self, *args)
    def getPerspective(self, *args): return _openframeworks.ofMatrix4x4_getPerspective(self, *args)
    def getLookAt(self, *args): return _openframeworks.ofMatrix4x4_getLookAt(self, *args)
    def decompose(self, *args): return _openframeworks.ofMatrix4x4_decompose(self, *args)
    newIdentityMatrix = staticmethod(_openframeworks.ofMatrix4x4_newIdentityMatrix)
    newScaleMatrix = staticmethod(_openframeworks.ofMatrix4x4_newScaleMatrix)
    newTranslationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newTranslationMatrix)
    newRotationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newRotationMatrix)
    getInverseOf = staticmethod(_openframeworks.ofMatrix4x4_getInverseOf)
    getTransposedOf = staticmethod(_openframeworks.ofMatrix4x4_getTransposedOf)
    getOrthoNormalOf = staticmethod(_openframeworks.ofMatrix4x4_getOrthoNormalOf)
    newOrthoMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrthoMatrix)
    newOrtho2DMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrtho2DMatrix)
    newFrustumMatrix = staticmethod(_openframeworks.ofMatrix4x4_newFrustumMatrix)
    newPerspectiveMatrix = staticmethod(_openframeworks.ofMatrix4x4_newPerspectiveMatrix)
    newLookAtMatrix = staticmethod(_openframeworks.ofMatrix4x4_newLookAtMatrix)
    def setRotate(self, *args): return _openframeworks.ofMatrix4x4_setRotate(self, *args)
    def setTranslation(self, *args): return _openframeworks.ofMatrix4x4_setTranslation(self, *args)
    def rotateRad(self, *args): return _openframeworks.ofMatrix4x4_rotateRad(self, *args)
    def rotate(self, *args): return _openframeworks.ofMatrix4x4_rotate(self, *args)
    def translate(self, *args): return _openframeworks.ofMatrix4x4_translate(self, *args)
    def scale(self, *args): return _openframeworks.ofMatrix4x4_scale(self, *args)
    def glRotateRad(self, *args): return _openframeworks.ofMatrix4x4_glRotateRad(self, *args)
    def glRotate(self, *args): return _openframeworks.ofMatrix4x4_glRotate(self, *args)
    def glTranslate(self, *args): return _openframeworks.ofMatrix4x4_glTranslate(self, *args)
    def glScale(self, *args): return _openframeworks.ofMatrix4x4_glScale(self, *args)
    def getRotate(self): return _openframeworks.ofMatrix4x4_getRotate(self)
    def getTranslation(self): return _openframeworks.ofMatrix4x4_getTranslation(self)
    def getScale(self): return _openframeworks.ofMatrix4x4_getScale(self)
    transform3x3 = staticmethod(_openframeworks.ofMatrix4x4_transform3x3)
    def postMult(self, *args): return _openframeworks.ofMatrix4x4_postMult(self, *args)
    def __imul__(self, *args): return _openframeworks.ofMatrix4x4___imul__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofMatrix4x4___mul__(self, *args)
    def preMult(self, *args): return _openframeworks.ofMatrix4x4_preMult(self, *args)
    def postMultTranslate(self, *args): return _openframeworks.ofMatrix4x4_postMultTranslate(self, *args)
    def postMultRotate(self, *args): return _openframeworks.ofMatrix4x4_postMultRotate(self, *args)
    def postMultScale(self, *args): return _openframeworks.ofMatrix4x4_postMultScale(self, *args)
    def preMultScale(self, *args): return _openframeworks.ofMatrix4x4_preMultScale(self, *args)
    def preMultTranslate(self, *args): return _openframeworks.ofMatrix4x4_preMultTranslate(self, *args)
    def preMultRotate(self, *args): return _openframeworks.ofMatrix4x4_preMultRotate(self, *args)
ofMatrix4x4_swigregister = _openframeworks.ofMatrix4x4_swigregister
ofMatrix4x4_swigregister(ofMatrix4x4)

def ofMatrix4x4_newIdentityMatrix():
  return _openframeworks.ofMatrix4x4_newIdentityMatrix()
ofMatrix4x4_newIdentityMatrix = _openframeworks.ofMatrix4x4_newIdentityMatrix

def ofMatrix4x4_newScaleMatrix(*args):
  return _openframeworks.ofMatrix4x4_newScaleMatrix(*args)
ofMatrix4x4_newScaleMatrix = _openframeworks.ofMatrix4x4_newScaleMatrix

def ofMatrix4x4_newTranslationMatrix(*args):
  return _openframeworks.ofMatrix4x4_newTranslationMatrix(*args)
ofMatrix4x4_newTranslationMatrix = _openframeworks.ofMatrix4x4_newTranslationMatrix

def ofMatrix4x4_newRotationMatrix(*args):
  return _openframeworks.ofMatrix4x4_newRotationMatrix(*args)
ofMatrix4x4_newRotationMatrix = _openframeworks.ofMatrix4x4_newRotationMatrix

def ofMatrix4x4_getInverseOf(*args):
  return _openframeworks.ofMatrix4x4_getInverseOf(*args)
ofMatrix4x4_getInverseOf = _openframeworks.ofMatrix4x4_getInverseOf

def ofMatrix4x4_getTransposedOf(*args):
  return _openframeworks.ofMatrix4x4_getTransposedOf(*args)
ofMatrix4x4_getTransposedOf = _openframeworks.ofMatrix4x4_getTransposedOf

def ofMatrix4x4_getOrthoNormalOf(*args):
  return _openframeworks.ofMatrix4x4_getOrthoNormalOf(*args)
ofMatrix4x4_getOrthoNormalOf = _openframeworks.ofMatrix4x4_getOrthoNormalOf

def ofMatrix4x4_newOrthoMatrix(*args):
  return _openframeworks.ofMatrix4x4_newOrthoMatrix(*args)
ofMatrix4x4_newOrthoMatrix = _openframeworks.ofMatrix4x4_newOrthoMatrix

def ofMatrix4x4_newOrtho2DMatrix(*args):
  return _openframeworks.ofMatrix4x4_newOrtho2DMatrix(*args)
ofMatrix4x4_newOrtho2DMatrix = _openframeworks.ofMatrix4x4_newOrtho2DMatrix

def ofMatrix4x4_newFrustumMatrix(*args):
  return _openframeworks.ofMatrix4x4_newFrustumMatrix(*args)
ofMatrix4x4_newFrustumMatrix = _openframeworks.ofMatrix4x4_newFrustumMatrix

def ofMatrix4x4_newPerspectiveMatrix(*args):
  return _openframeworks.ofMatrix4x4_newPerspectiveMatrix(*args)
ofMatrix4x4_newPerspectiveMatrix = _openframeworks.ofMatrix4x4_newPerspectiveMatrix

def ofMatrix4x4_newLookAtMatrix(*args):
  return _openframeworks.ofMatrix4x4_newLookAtMatrix(*args)
ofMatrix4x4_newLookAtMatrix = _openframeworks.ofMatrix4x4_newLookAtMatrix

def ofMatrix4x4_transform3x3(*args):
  return _openframeworks.ofMatrix4x4_transform3x3(*args)
ofMatrix4x4_transform3x3 = _openframeworks.ofMatrix4x4_transform3x3

class ofxKinect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofxKinect:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxKinect(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofxKinect
    __del__ = lambda self : None;
    def isFrameNew(self): return _openframeworks.ofxKinect_isFrameNew(self)
    def open(self): return _openframeworks.ofxKinect_open(self)
    def close(self): return _openframeworks.ofxKinect_close(self)
    def init(self, infrared = False, bTexture = True): return _openframeworks.ofxKinect_init(self, infrared, bTexture)
    def setCameraTiltAngle(self, *args): return _openframeworks.ofxKinect_setCameraTiltAngle(self, *args)
    def update(self): return _openframeworks.ofxKinect_update(self)
    def clear(self): return _openframeworks.ofxKinect_clear(self)
    def isConnected(self): return _openframeworks.ofxKinect_isConnected(self)
    def getDistanceAt(self, *args): return _openframeworks.ofxKinect_getDistanceAt(self, *args)
    def getWorldCoordinateFor(self, *args): return _openframeworks.ofxKinect_getWorldCoordinateFor(self, *args)
    def getColorAt(self, *args): return _openframeworks.ofxKinect_getColorAt(self, *args)
    def getCalibratedColorAt(self, *args): return _openframeworks.ofxKinect_getCalibratedColorAt(self, *args)
    def getHeight(self): return _openframeworks.ofxKinect_getHeight(self)
    def getWidth(self): return _openframeworks.ofxKinect_getWidth(self)
    def getRawAccel(self): return _openframeworks.ofxKinect_getRawAccel(self)
    def getMksAccel(self): return _openframeworks.ofxKinect_getMksAccel(self)
    def getPixels(self): return _openframeworks.ofxKinect_getPixels(self)
    def getDepthPixels(self): return _openframeworks.ofxKinect_getDepthPixels(self)
    def getRawDepthPixels(self): return _openframeworks.ofxKinect_getRawDepthPixels(self)
    def getCalibratedRGBPixels(self): return _openframeworks.ofxKinect_getCalibratedRGBPixels(self)
    def getDistancePixels(self): return _openframeworks.ofxKinect_getDistancePixels(self)
    def getTextureReference(self): return _openframeworks.ofxKinect_getTextureReference(self)
    def getDepthTextureReference(self): return _openframeworks.ofxKinect_getDepthTextureReference(self)
    def enableDepthNearValueWhite(self, bEnabled = True): return _openframeworks.ofxKinect_enableDepthNearValueWhite(self, bEnabled)
    def isDepthNearValueWhite(self): return _openframeworks.ofxKinect_isDepthNearValueWhite(self)
    def setVerbose(self, *args): return _openframeworks.ofxKinect_setVerbose(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofxKinect_setUseTexture(self, *args)
    def draw(self, *args): return _openframeworks.ofxKinect_draw(self, *args)
    def drawDepth(self, *args): return _openframeworks.ofxKinect_drawDepth(self, *args)
    def getCalibration(self): return _openframeworks.ofxKinect_getCalibration(self)
    width = _swig_property(_openframeworks.ofxKinect_width_get, _openframeworks.ofxKinect_width_set)
    height = _swig_property(_openframeworks.ofxKinect_height_get, _openframeworks.ofxKinect_height_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxKinect(self)
        return weakref_proxy(self)
ofxKinect_swigregister = _openframeworks.ofxKinect_swigregister
ofxKinect_swigregister(ofxKinect)

class ofxKinectCalibration(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofxKinectCalibration:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxKinectCalibration(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofxKinectCalibration
    __del__ = lambda self : None;
    def init(self, *args): return _openframeworks.ofxKinectCalibration_init(self, *args)
    def update(self, *args): return _openframeworks.ofxKinectCalibration_update(self, *args)
    def clear(self): return _openframeworks.ofxKinectCalibration_clear(self)
    def enableDepthNearValueWhite(self, bEnabled = True): return _openframeworks.ofxKinectCalibration_enableDepthNearValueWhite(self, bEnabled)
    def isDepthNearValueWhite(self): return _openframeworks.ofxKinectCalibration_isDepthNearValueWhite(self)
    def getCalibratedColorCoordAt(self, *args): return _openframeworks.ofxKinectCalibration_getCalibratedColorCoordAt(self, *args)
    def getWorldCoordinateFor(self, *args): return _openframeworks.ofxKinectCalibration_getWorldCoordinateFor(self, *args)
    def getDistanceAt(self, *args): return _openframeworks.ofxKinectCalibration_getDistanceAt(self, *args)
    setClippingInCentimeters = staticmethod(_openframeworks.ofxKinectCalibration_setClippingInCentimeters)
    getNearClipping = staticmethod(_openframeworks.ofxKinectCalibration_getNearClipping)
    getFarClipping = staticmethod(_openframeworks.ofxKinectCalibration_getFarClipping)
    def getDepthPixels(self): return _openframeworks.ofxKinectCalibration_getDepthPixels(self)
    def getDistancePixels(self): return _openframeworks.ofxKinectCalibration_getDistancePixels(self)
    def getCalibratedRGBPixels(self, *args): return _openframeworks.ofxKinectCalibration_getCalibratedRGBPixels(self, *args)
    width = _swig_property(_openframeworks.ofxKinectCalibration_width_get, _openframeworks.ofxKinectCalibration_width_set)
    height = _swig_property(_openframeworks.ofxKinectCalibration_height_get, _openframeworks.ofxKinectCalibration_height_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxKinectCalibration(self)
        return weakref_proxy(self)
ofxKinectCalibration_swigregister = _openframeworks.ofxKinectCalibration_swigregister
ofxKinectCalibration_swigregister(ofxKinectCalibration)

def ofxKinectCalibration_setClippingInCentimeters(*args):
  return _openframeworks.ofxKinectCalibration_setClippingInCentimeters(*args)
ofxKinectCalibration_setClippingInCentimeters = _openframeworks.ofxKinectCalibration_setClippingInCentimeters

def ofxKinectCalibration_getNearClipping():
  return _openframeworks.ofxKinectCalibration_getNearClipping()
ofxKinectCalibration_getNearClipping = _openframeworks.ofxKinectCalibration_getNearClipping

def ofxKinectCalibration_getFarClipping():
  return _openframeworks.ofxKinectCalibration_getFarClipping()
ofxKinectCalibration_getFarClipping = _openframeworks.ofxKinectCalibration_getFarClipping


def ofGetAppPtr():
  return _openframeworks.ofGetAppPtr()
ofGetAppPtr = _openframeworks.ofGetAppPtr

def ofSetAppPtr(*args):
  return _openframeworks.ofSetAppPtr(*args)
ofSetAppPtr = _openframeworks.ofSetAppPtr

def ofGetFrameRate():
  return _openframeworks.ofGetFrameRate()
ofGetFrameRate = _openframeworks.ofGetFrameRate

def ofSetFrameRate(*args):
  return _openframeworks.ofSetFrameRate(*args)
ofSetFrameRate = _openframeworks.ofSetFrameRate

def ofSleepMillis(*args):
  return _openframeworks.ofSleepMillis(*args)
ofSleepMillis = _openframeworks.ofSleepMillis

def ofGetLastFrameTime():
  return _openframeworks.ofGetLastFrameTime()
ofGetLastFrameTime = _openframeworks.ofGetLastFrameTime

def ofSetOrientation(*args):
  return _openframeworks.ofSetOrientation(*args)
ofSetOrientation = _openframeworks.ofSetOrientation

def ofGetOrientation():
  return _openframeworks.ofGetOrientation()
ofGetOrientation = _openframeworks.ofGetOrientation

def ofHideCursor():
  return _openframeworks.ofHideCursor()
ofHideCursor = _openframeworks.ofHideCursor

def ofShowCursor():
  return _openframeworks.ofShowCursor()
ofShowCursor = _openframeworks.ofShowCursor

def ofGetWindowPositionX():
  return _openframeworks.ofGetWindowPositionX()
ofGetWindowPositionX = _openframeworks.ofGetWindowPositionX

def ofGetWindowPositionY():
  return _openframeworks.ofGetWindowPositionY()
ofGetWindowPositionY = _openframeworks.ofGetWindowPositionY

def ofGetScreenWidth():
  return _openframeworks.ofGetScreenWidth()
ofGetScreenWidth = _openframeworks.ofGetScreenWidth

def ofGetScreenHeight():
  return _openframeworks.ofGetScreenHeight()
ofGetScreenHeight = _openframeworks.ofGetScreenHeight

def ofGetWindowMode():
  return _openframeworks.ofGetWindowMode()
ofGetWindowMode = _openframeworks.ofGetWindowMode

def ofGetWidth():
  return _openframeworks.ofGetWidth()
ofGetWidth = _openframeworks.ofGetWidth

def ofGetHeight():
  return _openframeworks.ofGetHeight()
ofGetHeight = _openframeworks.ofGetHeight

def ofGetWindowWidth():
  return _openframeworks.ofGetWindowWidth()
ofGetWindowWidth = _openframeworks.ofGetWindowWidth

def ofGetWindowHeight():
  return _openframeworks.ofGetWindowHeight()
ofGetWindowHeight = _openframeworks.ofGetWindowHeight

def ofDoesHWOrientation():
  return _openframeworks.ofDoesHWOrientation()
ofDoesHWOrientation = _openframeworks.ofDoesHWOrientation

def ofGetWindowSize():
  return _openframeworks.ofGetWindowSize()
ofGetWindowSize = _openframeworks.ofGetWindowSize

def ofGetWindowRect():
  return _openframeworks.ofGetWindowRect()
ofGetWindowRect = _openframeworks.ofGetWindowRect

def ofSetWindowPosition(*args):
  return _openframeworks.ofSetWindowPosition(*args)
ofSetWindowPosition = _openframeworks.ofSetWindowPosition

def ofSetWindowShape(*args):
  return _openframeworks.ofSetWindowShape(*args)
ofSetWindowShape = _openframeworks.ofSetWindowShape

def ofSetWindowTitle(*args):
  return _openframeworks.ofSetWindowTitle(*args)
ofSetWindowTitle = _openframeworks.ofSetWindowTitle

def ofEnableSetupScreen():
  return _openframeworks.ofEnableSetupScreen()
ofEnableSetupScreen = _openframeworks.ofEnableSetupScreen

def ofDisableSetupScreen():
  return _openframeworks.ofDisableSetupScreen()
ofDisableSetupScreen = _openframeworks.ofDisableSetupScreen

def ofSetFullscreen(*args):
  return _openframeworks.ofSetFullscreen(*args)
ofSetFullscreen = _openframeworks.ofSetFullscreen

def ofToggleFullscreen():
  return _openframeworks.ofToggleFullscreen()
ofToggleFullscreen = _openframeworks.ofToggleFullscreen

def ofSetVerticalSync(*args):
  return _openframeworks.ofSetVerticalSync(*args)
ofSetVerticalSync = _openframeworks.ofSetVerticalSync

def ofSoundStreamStop():
  return _openframeworks.ofSoundStreamStop()
ofSoundStreamStop = _openframeworks.ofSoundStreamStop

def ofSoundStreamStart():
  return _openframeworks.ofSoundStreamStart()
ofSoundStreamStart = _openframeworks.ofSoundStreamStart

def ofSoundStreamClose():
  return _openframeworks.ofSoundStreamClose()
ofSoundStreamClose = _openframeworks.ofSoundStreamClose

def ofSoundStreamListDevices():
  return _openframeworks.ofSoundStreamListDevices()
ofSoundStreamListDevices = _openframeworks.ofSoundStreamListDevices
class ofSoundStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofSoundStream()
        try: self.this.append(this)
        except: self.this = this
    def setSoundStream(self, *args): return _openframeworks.ofSoundStream_setSoundStream(self, *args)
    def getSoundStream(self): return _openframeworks.ofSoundStream_getSoundStream(self)
    def listDevices(self): return _openframeworks.ofSoundStream_listDevices(self)
    def setDeviceID(self, *args): return _openframeworks.ofSoundStream_setDeviceID(self, *args)
    def setInput(self, *args): return _openframeworks.ofSoundStream_setInput(self, *args)
    def setOutput(self, *args): return _openframeworks.ofSoundStream_setOutput(self, *args)
    def setup(self, *args): return _openframeworks.ofSoundStream_setup(self, *args)
    def start(self): return _openframeworks.ofSoundStream_start(self)
    def stop(self): return _openframeworks.ofSoundStream_stop(self)
    def close(self): return _openframeworks.ofSoundStream_close(self)
    def getTickCount(self): return _openframeworks.ofSoundStream_getTickCount(self)
    __swig_destroy__ = _openframeworks.delete_ofSoundStream
    __del__ = lambda self : None;
ofSoundStream_swigregister = _openframeworks.ofSoundStream_swigregister
ofSoundStream_swigregister(ofSoundStream)

def ofSetupOpenGL(*args):
  return _openframeworks.ofSetupOpenGL(*args)
ofSetupOpenGL = _openframeworks.ofSetupOpenGL

def ofRunApp(*args):
  return _openframeworks.ofRunApp(*args)
ofRunApp = _openframeworks.ofRunApp

def ofExit(status = 0):
  return _openframeworks.ofExit(status)
ofExit = _openframeworks.ofExit

def ofSoundStreamSetup(*args):
  return _openframeworks.ofSoundStreamSetup(*args)
ofSoundStreamSetup = _openframeworks.ofSoundStreamSetup


def ofSoundStopAll():
  return _openframeworks.ofSoundStopAll()
ofSoundStopAll = _openframeworks.ofSoundStopAll

def ofSoundSetVolume(*args):
  return _openframeworks.ofSoundSetVolume(*args)
ofSoundSetVolume = _openframeworks.ofSoundSetVolume

def ofSoundUpdate():
  return _openframeworks.ofSoundUpdate()
ofSoundUpdate = _openframeworks.ofSoundUpdate

def ofSoundGetSpectrum(*args):
  return _openframeworks.ofSoundGetSpectrum(*args)
ofSoundGetSpectrum = _openframeworks.ofSoundGetSpectrum

def ofSoundShutdown():
  return _openframeworks.ofSoundShutdown()
ofSoundShutdown = _openframeworks.ofSoundShutdown
class ofSoundPlayer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofSoundPlayer()
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _openframeworks.ofSoundPlayer_setPlayer(self, *args)
    def getPlayer(self): return _openframeworks.ofSoundPlayer_getPlayer(self)
    def loadSound(self, *args): return _openframeworks.ofSoundPlayer_loadSound(self, *args)
    def unloadSound(self): return _openframeworks.ofSoundPlayer_unloadSound(self)
    def play(self): return _openframeworks.ofSoundPlayer_play(self)
    def stop(self): return _openframeworks.ofSoundPlayer_stop(self)
    def setVolume(self, *args): return _openframeworks.ofSoundPlayer_setVolume(self, *args)
    def setPan(self, *args): return _openframeworks.ofSoundPlayer_setPan(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofSoundPlayer_setSpeed(self, *args)
    def setPaused(self, *args): return _openframeworks.ofSoundPlayer_setPaused(self, *args)
    def setLoop(self, *args): return _openframeworks.ofSoundPlayer_setLoop(self, *args)
    def setMultiPlay(self, *args): return _openframeworks.ofSoundPlayer_setMultiPlay(self, *args)
    def setPosition(self, *args): return _openframeworks.ofSoundPlayer_setPosition(self, *args)
    def getPosition(self): return _openframeworks.ofSoundPlayer_getPosition(self)
    def getIsPlaying(self): return _openframeworks.ofSoundPlayer_getIsPlaying(self)
    def getSpeed(self): return _openframeworks.ofSoundPlayer_getSpeed(self)
    def getPan(self): return _openframeworks.ofSoundPlayer_getPan(self)
    __swig_destroy__ = _openframeworks.delete_ofSoundPlayer
    __del__ = lambda self : None;
ofSoundPlayer_swigregister = _openframeworks.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)

class ofVideoPlayer(ofBaseVideoPlayer,ofBaseVideoDraws):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofVideoPlayer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofVideoPlayer(_self, )
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _openframeworks.ofVideoPlayer_setPlayer(self, *args)
    def getPlayer(self): return _openframeworks.ofVideoPlayer_getPlayer(self)
    def loadMovie(self, *args): return _openframeworks.ofVideoPlayer_loadMovie(self, *args)
    def loadMoviePlease(self, *args): return _openframeworks.ofVideoPlayer_loadMoviePlease(self, *args)
    def setPixelFormat(self, *args): return _openframeworks.ofVideoPlayer_setPixelFormat(self, *args)
    def closeMovie(self): return _openframeworks.ofVideoPlayer_closeMovie(self)
    def close(self): return _openframeworks.ofVideoPlayer_close(self)
    def update(self): return _openframeworks.ofVideoPlayer_update(self)
    def idleMovie(self): return _openframeworks.ofVideoPlayer_idleMovie(self)
    def play(self): return _openframeworks.ofVideoPlayer_play(self)
    def stop(self): return _openframeworks.ofVideoPlayer_stop(self)
    def isFrameNew(self): return _openframeworks.ofVideoPlayer_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofVideoPlayer_getPixels(self)
    def getPosition(self): return _openframeworks.ofVideoPlayer_getPosition(self)
    def getSpeed(self): return _openframeworks.ofVideoPlayer_getSpeed(self)
    def getDuration(self): return _openframeworks.ofVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _openframeworks.ofVideoPlayer_getIsMovieDone(self)
    def setPosition(self, *args): return _openframeworks.ofVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _openframeworks.ofVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _openframeworks.ofVideoPlayer_setLoopState(self, *args)
    def getLoopState(self): return _openframeworks.ofVideoPlayer_getLoopState(self)
    def setSpeed(self, *args): return _openframeworks.ofVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _openframeworks.ofVideoPlayer_setFrame(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoPlayer_setUseTexture(self, *args)
    def getTextureReference(self): return _openframeworks.ofVideoPlayer_getTextureReference(self)
    def draw(self, *args): return _openframeworks.ofVideoPlayer_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoPlayer_resetAnchor(self)
    def setPaused(self, *args): return _openframeworks.ofVideoPlayer_setPaused(self, *args)
    def getCurrentFrame(self): return _openframeworks.ofVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _openframeworks.ofVideoPlayer_getTotalNumFrames(self)
    def firstFrame(self): return _openframeworks.ofVideoPlayer_firstFrame(self)
    def nextFrame(self): return _openframeworks.ofVideoPlayer_nextFrame(self)
    def previousFrame(self): return _openframeworks.ofVideoPlayer_previousFrame(self)
    def getHeight(self): return _openframeworks.ofVideoPlayer_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoPlayer_getWidth(self)
    def isPaused(self): return _openframeworks.ofVideoPlayer_isPaused(self)
    def isLoaded(self): return _openframeworks.ofVideoPlayer_isLoaded(self)
    def isPlaying(self): return _openframeworks.ofVideoPlayer_isPlaying(self)
    height = _swig_property(_openframeworks.ofVideoPlayer_height_get, _openframeworks.ofVideoPlayer_height_set)
    width = _swig_property(_openframeworks.ofVideoPlayer_width_get, _openframeworks.ofVideoPlayer_width_set)
    tex = _swig_property(_openframeworks.ofVideoPlayer_tex_get, _openframeworks.ofVideoPlayer_tex_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoPlayer
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofVideoPlayer(self)
        return weakref_proxy(self)
ofVideoPlayer_swigregister = _openframeworks.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)

class ofQuickTimePlayer(ofBaseVideoPlayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofQuickTimePlayer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofQuickTimePlayer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofQuickTimePlayer
    __del__ = lambda self : None;
    def loadMovie(self, *args): return _openframeworks.ofQuickTimePlayer_loadMovie(self, *args)
    def loadMovieHack(self, *args): return _openframeworks.ofQuickTimePlayer_loadMovieHack(self, *args)
    def closeMovie(self): return _openframeworks.ofQuickTimePlayer_closeMovie(self)
    def close(self): return _openframeworks.ofQuickTimePlayer_close(self)
    def update(self): return _openframeworks.ofQuickTimePlayer_update(self)
    def play(self): return _openframeworks.ofQuickTimePlayer_play(self)
    def stop(self): return _openframeworks.ofQuickTimePlayer_stop(self)
    def clearMemory(self): return _openframeworks.ofQuickTimePlayer_clearMemory(self)
    def isFrameNew(self): return _openframeworks.ofQuickTimePlayer_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofQuickTimePlayer_getPixels(self)
    def getWidth(self): return _openframeworks.ofQuickTimePlayer_getWidth(self)
    def getHeight(self): return _openframeworks.ofQuickTimePlayer_getHeight(self)
    def isPaused(self): return _openframeworks.ofQuickTimePlayer_isPaused(self)
    def isLoaded(self): return _openframeworks.ofQuickTimePlayer_isLoaded(self)
    def isPlaying(self): return _openframeworks.ofQuickTimePlayer_isPlaying(self)
    def getPosition(self): return _openframeworks.ofQuickTimePlayer_getPosition(self)
    def getDuration(self): return _openframeworks.ofQuickTimePlayer_getDuration(self)
    def getTotalNumFrames(self): return _openframeworks.ofQuickTimePlayer_getTotalNumFrames(self)
    def getSpeed(self): return _openframeworks.ofQuickTimePlayer_getSpeed(self)
    def getIsMovieDone(self): return _openframeworks.ofQuickTimePlayer_getIsMovieDone(self)
    def setPosition(self, *args): return _openframeworks.ofQuickTimePlayer_setPosition(self, *args)
    def setVolume(self, *args): return _openframeworks.ofQuickTimePlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _openframeworks.ofQuickTimePlayer_setLoopState(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofQuickTimePlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _openframeworks.ofQuickTimePlayer_setFrame(self, *args)
    def setPaused(self, *args): return _openframeworks.ofQuickTimePlayer_setPaused(self, *args)
    def getCurrentFrame(self): return _openframeworks.ofQuickTimePlayer_getCurrentFrame(self)
    def firstFrame(self): return _openframeworks.ofQuickTimePlayer_firstFrame(self)
    def nextFrame(self): return _openframeworks.ofQuickTimePlayer_nextFrame(self)
    def previousFrame(self): return _openframeworks.ofQuickTimePlayer_previousFrame(self)
    bHavePixelsChanged = _swig_property(_openframeworks.ofQuickTimePlayer_bHavePixelsChanged_get, _openframeworks.ofQuickTimePlayer_bHavePixelsChanged_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofQuickTimePlayer(self)
        return weakref_proxy(self)
ofQuickTimePlayer_swigregister = _openframeworks.ofQuickTimePlayer_swigregister
ofQuickTimePlayer_swigregister(ofQuickTimePlayer)

class ofVideoGrabber(ofBaseVideoGrabber,ofBaseVideoDraws):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofVideoGrabber:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofVideoGrabber(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVideoGrabber
    __del__ = lambda self : None;
    def setGrabber(self, *args): return _openframeworks.ofVideoGrabber_setGrabber(self, *args)
    def getGrabber(self): return _openframeworks.ofVideoGrabber_getGrabber(self)
    def listDevices(self): return _openframeworks.ofVideoGrabber_listDevices(self)
    def isFrameNew(self): return _openframeworks.ofVideoGrabber_isFrameNew(self)
    def update(self): return _openframeworks.ofVideoGrabber_update(self)
    def grabFrame(self): return _openframeworks.ofVideoGrabber_grabFrame(self)
    def close(self): return _openframeworks.ofVideoGrabber_close(self)
    def initGrabber(self, *args): return _openframeworks.ofVideoGrabber_initGrabber(self, *args)
    def setPixelFormat(self, *args): return _openframeworks.ofVideoGrabber_setPixelFormat(self, *args)
    def getPixelFormat(self): return _openframeworks.ofVideoGrabber_getPixelFormat(self)
    def videoSettings(self): return _openframeworks.ofVideoGrabber_videoSettings(self)
    def getPixels(self): return _openframeworks.ofVideoGrabber_getPixels(self)
    def getTextureReference(self): return _openframeworks.ofVideoGrabber_getTextureReference(self)
    def setVerbose(self, *args): return _openframeworks.ofVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _openframeworks.ofVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _openframeworks.ofVideoGrabber_setDesiredFrameRate(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoGrabber_setUseTexture(self, *args)
    def draw(self, *args): return _openframeworks.ofVideoGrabber_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoGrabber_resetAnchor(self)
    def getHeight(self): return _openframeworks.ofVideoGrabber_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoGrabber_getWidth(self)
    height = _swig_property(_openframeworks.ofVideoGrabber_height_get, _openframeworks.ofVideoGrabber_height_set)
    width = _swig_property(_openframeworks.ofVideoGrabber_width_get, _openframeworks.ofVideoGrabber_width_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofVideoGrabber(self)
        return weakref_proxy(self)
ofVideoGrabber_swigregister = _openframeworks.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)

class ofxCvBlob(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    area = _swig_property(_openframeworks.ofxCvBlob_area_get, _openframeworks.ofxCvBlob_area_set)
    length = _swig_property(_openframeworks.ofxCvBlob_length_get, _openframeworks.ofxCvBlob_length_set)
    boundingRect = _swig_property(_openframeworks.ofxCvBlob_boundingRect_get, _openframeworks.ofxCvBlob_boundingRect_set)
    centroid = _swig_property(_openframeworks.ofxCvBlob_centroid_get, _openframeworks.ofxCvBlob_centroid_set)
    hole = _swig_property(_openframeworks.ofxCvBlob_hole_get, _openframeworks.ofxCvBlob_hole_set)
    pts = _swig_property(_openframeworks.ofxCvBlob_pts_get, _openframeworks.ofxCvBlob_pts_set)
    nPts = _swig_property(_openframeworks.ofxCvBlob_nPts_get, _openframeworks.ofxCvBlob_nPts_set)
    def __init__(self): 
        this = _openframeworks.new_ofxCvBlob()
        try: self.this.append(this)
        except: self.this = this
    def getPoint(self, *args): return _openframeworks.ofxCvBlob_getPoint(self, *args)
    def draw(self, x = 0, y = 0): return _openframeworks.ofxCvBlob_draw(self, x, y)
    __swig_destroy__ = _openframeworks.delete_ofxCvBlob
    __del__ = lambda self : None;
ofxCvBlob_swigregister = _openframeworks.ofxCvBlob_swigregister
ofxCvBlob_swigregister(ofxCvBlob)

OFX_CV_ROI_MODE_INTERSECT = _openframeworks.OFX_CV_ROI_MODE_INTERSECT
OFX_CV_ROI_MODE_NONINTERSECT = _openframeworks.OFX_CV_ROI_MODE_NONINTERSECT

def ofGetMouseX():
  return _openframeworks.ofGetMouseX()
ofGetMouseX = _openframeworks.ofGetMouseX

def ofGetMouseY():
  return _openframeworks.ofGetMouseY()
ofGetMouseY = _openframeworks.ofGetMouseY

def ofGetPreviousMouseX():
  return _openframeworks.ofGetPreviousMouseX()
ofGetPreviousMouseX = _openframeworks.ofGetPreviousMouseX

def ofGetPreviousMouseY():
  return _openframeworks.ofGetPreviousMouseY()
ofGetPreviousMouseY = _openframeworks.ofGetPreviousMouseY

def ofSetEscapeQuitsApp(*args):
  return _openframeworks.ofSetEscapeQuitsApp(*args)
ofSetEscapeQuitsApp = _openframeworks.ofSetEscapeQuitsApp

def exitApp():
  return _openframeworks.exitApp()
exitApp = _openframeworks.exitApp
class ofDragInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    files = _swig_property(_openframeworks.ofDragInfo_files_get, _openframeworks.ofDragInfo_files_set)
    position = _swig_property(_openframeworks.ofDragInfo_position_get, _openframeworks.ofDragInfo_position_set)
    def __init__(self): 
        this = _openframeworks.new_ofDragInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofDragInfo
    __del__ = lambda self : None;
ofDragInfo_swigregister = _openframeworks.ofDragInfo_swigregister
ofDragInfo_swigregister(ofDragInfo)

def ofGetMousePressed(*args):
  return _openframeworks.ofGetMousePressed(*args)
ofGetMousePressed = _openframeworks.ofGetMousePressed

def ofGetKeyPressed(*args):
  return _openframeworks.ofGetKeyPressed(*args)
ofGetKeyPressed = _openframeworks.ofGetKeyPressed

class ofEventArgs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofEventArgs
    __del__ = lambda self : None;
ofEventArgs_swigregister = _openframeworks.ofEventArgs_swigregister
ofEventArgs_swigregister(ofEventArgs)

class ofKeyEventArgs(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    key = _swig_property(_openframeworks.ofKeyEventArgs_key_get, _openframeworks.ofKeyEventArgs_key_set)
    def __init__(self): 
        this = _openframeworks.new_ofKeyEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofKeyEventArgs
    __del__ = lambda self : None;
ofKeyEventArgs_swigregister = _openframeworks.ofKeyEventArgs_swigregister
ofKeyEventArgs_swigregister(ofKeyEventArgs)

class ofMouseEventArgs(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_openframeworks.ofMouseEventArgs_x_get, _openframeworks.ofMouseEventArgs_x_set)
    y = _swig_property(_openframeworks.ofMouseEventArgs_y_get, _openframeworks.ofMouseEventArgs_y_set)
    button = _swig_property(_openframeworks.ofMouseEventArgs_button_get, _openframeworks.ofMouseEventArgs_button_set)
    def __init__(self): 
        this = _openframeworks.new_ofMouseEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMouseEventArgs
    __del__ = lambda self : None;
ofMouseEventArgs_swigregister = _openframeworks.ofMouseEventArgs_swigregister
ofMouseEventArgs_swigregister(ofMouseEventArgs)

class ofTouchEventArgs(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_openframeworks.ofTouchEventArgs_id_get, _openframeworks.ofTouchEventArgs_id_set)
    time = _swig_property(_openframeworks.ofTouchEventArgs_time_get, _openframeworks.ofTouchEventArgs_time_set)
    x = _swig_property(_openframeworks.ofTouchEventArgs_x_get, _openframeworks.ofTouchEventArgs_x_set)
    y = _swig_property(_openframeworks.ofTouchEventArgs_y_get, _openframeworks.ofTouchEventArgs_y_set)
    numTouches = _swig_property(_openframeworks.ofTouchEventArgs_numTouches_get, _openframeworks.ofTouchEventArgs_numTouches_set)
    width = _swig_property(_openframeworks.ofTouchEventArgs_width_get, _openframeworks.ofTouchEventArgs_width_set)
    height = _swig_property(_openframeworks.ofTouchEventArgs_height_get, _openframeworks.ofTouchEventArgs_height_set)
    angle = _swig_property(_openframeworks.ofTouchEventArgs_angle_get, _openframeworks.ofTouchEventArgs_angle_set)
    minoraxis = _swig_property(_openframeworks.ofTouchEventArgs_minoraxis_get, _openframeworks.ofTouchEventArgs_minoraxis_set)
    majoraxis = _swig_property(_openframeworks.ofTouchEventArgs_majoraxis_get, _openframeworks.ofTouchEventArgs_majoraxis_set)
    pressure = _swig_property(_openframeworks.ofTouchEventArgs_pressure_get, _openframeworks.ofTouchEventArgs_pressure_set)
    xspeed = _swig_property(_openframeworks.ofTouchEventArgs_xspeed_get, _openframeworks.ofTouchEventArgs_xspeed_set)
    yspeed = _swig_property(_openframeworks.ofTouchEventArgs_yspeed_get, _openframeworks.ofTouchEventArgs_yspeed_set)
    xaccel = _swig_property(_openframeworks.ofTouchEventArgs_xaccel_get, _openframeworks.ofTouchEventArgs_xaccel_set)
    yaccel = _swig_property(_openframeworks.ofTouchEventArgs_yaccel_get, _openframeworks.ofTouchEventArgs_yaccel_set)
    def __init__(self): 
        this = _openframeworks.new_ofTouchEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTouchEventArgs
    __del__ = lambda self : None;
ofTouchEventArgs_swigregister = _openframeworks.ofTouchEventArgs_swigregister
ofTouchEventArgs_swigregister(ofTouchEventArgs)

class ofAudioEventArgs(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    buffer = _swig_property(_openframeworks.ofAudioEventArgs_buffer_get, _openframeworks.ofAudioEventArgs_buffer_set)
    bufferSize = _swig_property(_openframeworks.ofAudioEventArgs_bufferSize_get, _openframeworks.ofAudioEventArgs_bufferSize_set)
    nChannels = _swig_property(_openframeworks.ofAudioEventArgs_nChannels_get, _openframeworks.ofAudioEventArgs_nChannels_set)
    def __init__(self): 
        this = _openframeworks.new_ofAudioEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofAudioEventArgs
    __del__ = lambda self : None;
ofAudioEventArgs_swigregister = _openframeworks.ofAudioEventArgs_swigregister
ofAudioEventArgs_swigregister(ofAudioEventArgs)

class ofResizeEventArgs(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_openframeworks.ofResizeEventArgs_width_get, _openframeworks.ofResizeEventArgs_width_set)
    height = _swig_property(_openframeworks.ofResizeEventArgs_height_get, _openframeworks.ofResizeEventArgs_height_set)
    def __init__(self): 
        this = _openframeworks.new_ofResizeEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofResizeEventArgs
    __del__ = lambda self : None;
ofResizeEventArgs_swigregister = _openframeworks.ofResizeEventArgs_swigregister
ofResizeEventArgs_swigregister(ofResizeEventArgs)

class ofMessage(ofEventArgs):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    message = _swig_property(_openframeworks.ofMessage_message_get, _openframeworks.ofMessage_message_set)
    __swig_destroy__ = _openframeworks.delete_ofMessage
    __del__ = lambda self : None;
ofMessage_swigregister = _openframeworks.ofMessage_swigregister
ofMessage_swigregister(ofMessage)

class ofCoreEvents(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    setup = _swig_property(_openframeworks.ofCoreEvents_setup_get, _openframeworks.ofCoreEvents_setup_set)
    update = _swig_property(_openframeworks.ofCoreEvents_update_get, _openframeworks.ofCoreEvents_update_set)
    draw = _swig_property(_openframeworks.ofCoreEvents_draw_get, _openframeworks.ofCoreEvents_draw_set)
    exit = _swig_property(_openframeworks.ofCoreEvents_exit_get, _openframeworks.ofCoreEvents_exit_set)
    windowResized = _swig_property(_openframeworks.ofCoreEvents_windowResized_get, _openframeworks.ofCoreEvents_windowResized_set)
    keyPressed = _swig_property(_openframeworks.ofCoreEvents_keyPressed_get, _openframeworks.ofCoreEvents_keyPressed_set)
    keyReleased = _swig_property(_openframeworks.ofCoreEvents_keyReleased_get, _openframeworks.ofCoreEvents_keyReleased_set)
    mouseMoved = _swig_property(_openframeworks.ofCoreEvents_mouseMoved_get, _openframeworks.ofCoreEvents_mouseMoved_set)
    mouseDragged = _swig_property(_openframeworks.ofCoreEvents_mouseDragged_get, _openframeworks.ofCoreEvents_mouseDragged_set)
    mousePressed = _swig_property(_openframeworks.ofCoreEvents_mousePressed_get, _openframeworks.ofCoreEvents_mousePressed_set)
    mouseReleased = _swig_property(_openframeworks.ofCoreEvents_mouseReleased_get, _openframeworks.ofCoreEvents_mouseReleased_set)
    audioReceived = _swig_property(_openframeworks.ofCoreEvents_audioReceived_get, _openframeworks.ofCoreEvents_audioReceived_set)
    audioRequested = _swig_property(_openframeworks.ofCoreEvents_audioRequested_get, _openframeworks.ofCoreEvents_audioRequested_set)
    touchDown = _swig_property(_openframeworks.ofCoreEvents_touchDown_get, _openframeworks.ofCoreEvents_touchDown_set)
    touchUp = _swig_property(_openframeworks.ofCoreEvents_touchUp_get, _openframeworks.ofCoreEvents_touchUp_set)
    touchMoved = _swig_property(_openframeworks.ofCoreEvents_touchMoved_get, _openframeworks.ofCoreEvents_touchMoved_set)
    touchDoubleTap = _swig_property(_openframeworks.ofCoreEvents_touchDoubleTap_get, _openframeworks.ofCoreEvents_touchDoubleTap_set)
    touchCancelled = _swig_property(_openframeworks.ofCoreEvents_touchCancelled_get, _openframeworks.ofCoreEvents_touchCancelled_set)
    messageEvent = _swig_property(_openframeworks.ofCoreEvents_messageEvent_get, _openframeworks.ofCoreEvents_messageEvent_set)
    fileDragEvent = _swig_property(_openframeworks.ofCoreEvents_fileDragEvent_get, _openframeworks.ofCoreEvents_fileDragEvent_set)
    def disable(self): return _openframeworks.ofCoreEvents_disable(self)
    def enable(self): return _openframeworks.ofCoreEvents_enable(self)
    def __init__(self): 
        this = _openframeworks.new_ofCoreEvents()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofCoreEvents
    __del__ = lambda self : None;
ofCoreEvents_swigregister = _openframeworks.ofCoreEvents_swigregister
ofCoreEvents_swigregister(ofCoreEvents)


def ofNotifySetup():
  return _openframeworks.ofNotifySetup()
ofNotifySetup = _openframeworks.ofNotifySetup

def ofNotifyUpdate():
  return _openframeworks.ofNotifyUpdate()
ofNotifyUpdate = _openframeworks.ofNotifyUpdate

def ofNotifyDraw():
  return _openframeworks.ofNotifyDraw()
ofNotifyDraw = _openframeworks.ofNotifyDraw

def ofNotifyKeyPressed(*args):
  return _openframeworks.ofNotifyKeyPressed(*args)
ofNotifyKeyPressed = _openframeworks.ofNotifyKeyPressed

def ofNotifyKeyReleased(*args):
  return _openframeworks.ofNotifyKeyReleased(*args)
ofNotifyKeyReleased = _openframeworks.ofNotifyKeyReleased

def ofNotifyMousePressed(*args):
  return _openframeworks.ofNotifyMousePressed(*args)
ofNotifyMousePressed = _openframeworks.ofNotifyMousePressed

def ofNotifyMouseReleased(*args):
  return _openframeworks.ofNotifyMouseReleased(*args)
ofNotifyMouseReleased = _openframeworks.ofNotifyMouseReleased

def ofNotifyMouseDragged(*args):
  return _openframeworks.ofNotifyMouseDragged(*args)
ofNotifyMouseDragged = _openframeworks.ofNotifyMouseDragged

def ofNotifyMouseMoved(*args):
  return _openframeworks.ofNotifyMouseMoved(*args)
ofNotifyMouseMoved = _openframeworks.ofNotifyMouseMoved

def ofNotifyExit():
  return _openframeworks.ofNotifyExit()
ofNotifyExit = _openframeworks.ofNotifyExit

def ofNotifyWindowResized(*args):
  return _openframeworks.ofNotifyWindowResized(*args)
ofNotifyWindowResized = _openframeworks.ofNotifyWindowResized

def ofNotifyDragEvent(*args):
  return _openframeworks.ofNotifyDragEvent(*args)
ofNotifyDragEvent = _openframeworks.ofNotifyDragEvent
class ofxCvImage(ofBaseImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_openframeworks.ofxCvImage_width_get, _openframeworks.ofxCvImage_width_set)
    height = _swig_property(_openframeworks.ofxCvImage_height_get, _openframeworks.ofxCvImage_height_set)
    bAllocated = _swig_property(_openframeworks.ofxCvImage_bAllocated_get, _openframeworks.ofxCvImage_bAllocated_set)
    def __init__(self): 
        if self.__class__ == ofxCvImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvImage(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofxCvImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofxCvImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofxCvImage_clear(self)
    def getWidth(self): return _openframeworks.ofxCvImage_getWidth(self)
    def getHeight(self): return _openframeworks.ofxCvImage_getHeight(self)
    def setUseTexture(self, *args): return _openframeworks.ofxCvImage_setUseTexture(self, *args)
    def getTextureReference(self): return _openframeworks.ofxCvImage_getTextureReference(self)
    def flagImageChanged(self): return _openframeworks.ofxCvImage_flagImageChanged(self)
    def setROI(self, *args): return _openframeworks.ofxCvImage_setROI(self, *args)
    def getROI(self): return _openframeworks.ofxCvImage_getROI(self)
    def resetROI(self): return _openframeworks.ofxCvImage_resetROI(self)
    def getIntersectionROI(self, *args): return _openframeworks.ofxCvImage_getIntersectionROI(self, *args)
    def set(self, *args): return _openframeworks.ofxCvImage_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofxCvImage_setFromPixels(self, *args)
    def setRoiFromPixels(self, *args): return _openframeworks.ofxCvImage_setRoiFromPixels(self, *args)
    def assign(self, *args): return _openframeworks.ofxCvImage_assign(self, *args)
    def __isub__(self, *args): return _openframeworks.ofxCvImage___isub__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofxCvImage___iadd__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofxCvImage___imul__(self, *args)
    def __iand__(self, *args): return _openframeworks.ofxCvImage___iand__(self, *args)
    def drawBlobIntoMe(self, *args): return _openframeworks.ofxCvImage_drawBlobIntoMe(self, *args)
    def getPixels(self): return _openframeworks.ofxCvImage_getPixels(self)
    def getRoiPixels(self): return _openframeworks.ofxCvImage_getRoiPixels(self)
    def getCvImage(self): return _openframeworks.ofxCvImage_getCvImage(self)
    def updateTexture(self): return _openframeworks.ofxCvImage_updateTexture(self)
    def draw(self, *args): return _openframeworks.ofxCvImage_draw(self, *args)
    def drawROI(self, *args): return _openframeworks.ofxCvImage_drawROI(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofxCvImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofxCvImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofxCvImage_resetAnchor(self)
    def erode(self): return _openframeworks.ofxCvImage_erode(self)
    def dilate(self): return _openframeworks.ofxCvImage_dilate(self)
    def blur(self, value = 3): return _openframeworks.ofxCvImage_blur(self, value)
    def blurGaussian(self, value = 3): return _openframeworks.ofxCvImage_blurGaussian(self, value)
    def invert(self): return _openframeworks.ofxCvImage_invert(self)
    def contrastStretch(self): return _openframeworks.ofxCvImage_contrastStretch(self)
    def convertToRange(self, *args): return _openframeworks.ofxCvImage_convertToRange(self, *args)
    def resize(self, *args): return _openframeworks.ofxCvImage_resize(self, *args)
    def scaleIntoMe(self, *args): return _openframeworks.ofxCvImage_scaleIntoMe(self, *args)
    def mirror(self, *args): return _openframeworks.ofxCvImage_mirror(self, *args)
    def translate(self, *args): return _openframeworks.ofxCvImage_translate(self, *args)
    def rotate(self, *args): return _openframeworks.ofxCvImage_rotate(self, *args)
    def scale(self, *args): return _openframeworks.ofxCvImage_scale(self, *args)
    def transform(self, *args): return _openframeworks.ofxCvImage_transform(self, *args)
    def undistort(self, *args): return _openframeworks.ofxCvImage_undistort(self, *args)
    def remap(self, *args): return _openframeworks.ofxCvImage_remap(self, *args)
    def warpPerspective(self, *args): return _openframeworks.ofxCvImage_warpPerspective(self, *args)
    def warpIntoMe(self, *args): return _openframeworks.ofxCvImage_warpIntoMe(self, *args)
    def countNonZeroInRegion(self, *args): return _openframeworks.ofxCvImage_countNonZeroInRegion(self, *args)
    def setImageROI(self, *args): return _openframeworks.ofxCvImage_setImageROI(self, *args)
    def resetImageROI(self, *args): return _openframeworks.ofxCvImage_resetImageROI(self, *args)
    def rangeMap(self, *args): return _openframeworks.ofxCvImage_rangeMap(self, *args)
    def swapTemp(self): return _openframeworks.ofxCvImage_swapTemp(self)
    def getCv8BitsImage(self): return _openframeworks.ofxCvImage_getCv8BitsImage(self)
    def getCv8BitsRoiImage(self): return _openframeworks.ofxCvImage_getCv8BitsRoiImage(self)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvImage(self)
        return weakref_proxy(self)
ofxCvImage_swigregister = _openframeworks.ofxCvImage_swigregister
ofxCvImage_swigregister(ofxCvImage)

def ofSendMessage(*args):
  return _openframeworks.ofSendMessage(*args)
ofSendMessage = _openframeworks.ofSendMessage
cvar = _openframeworks.cvar

class ofxCvFloatImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofxCvFloatImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvFloatImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _openframeworks.ofxCvFloatImage_clear(self)
    def flagImageChanged(self): return _openframeworks.ofxCvFloatImage_flagImageChanged(self)
    def setNativeScale(self, *args): return _openframeworks.ofxCvFloatImage_setNativeScale(self, *args)
    def getNativeScaleMin(self): return _openframeworks.ofxCvFloatImage_getNativeScaleMin(self)
    def getNativeScaleMax(self): return _openframeworks.ofxCvFloatImage_getNativeScaleMax(self)
    def set(self, *args): return _openframeworks.ofxCvFloatImage_set(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofxCvFloatImage___idiv__(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofxCvFloatImage_setFromPixels(self, *args)
    def setRoiFromPixels(self, *args): return _openframeworks.ofxCvFloatImage_setRoiFromPixels(self, *args)
    def assign(self, *args): return _openframeworks.ofxCvFloatImage_assign(self, *args)
    def __imul__(self, *args): return _openframeworks.ofxCvFloatImage___imul__(self, *args)
    def __iand__(self, *args): return _openframeworks.ofxCvFloatImage___iand__(self, *args)
    def addWeighted(self, *args): return _openframeworks.ofxCvFloatImage_addWeighted(self, *args)
    def getPixelsAsFloats(self): return _openframeworks.ofxCvFloatImage_getPixelsAsFloats(self)
    def getFloatPixelsRef(self): return _openframeworks.ofxCvFloatImage_getFloatPixelsRef(self)
    def getRoiPixelsAsFloats(self): return _openframeworks.ofxCvFloatImage_getRoiPixelsAsFloats(self)
    def getRoiFloatPixelsRef(self): return _openframeworks.ofxCvFloatImage_getRoiFloatPixelsRef(self)
    def contrastStretch(self): return _openframeworks.ofxCvFloatImage_contrastStretch(self)
    def convertToRange(self, *args): return _openframeworks.ofxCvFloatImage_convertToRange(self, *args)
    def resize(self, *args): return _openframeworks.ofxCvFloatImage_resize(self, *args)
    def scaleIntoMe(self, *args): return _openframeworks.ofxCvFloatImage_scaleIntoMe(self, *args)
    def convertFloatToGray(self, *args): return _openframeworks.ofxCvFloatImage_convertFloatToGray(self, *args)
    def convertGrayToFloat(self, *args): return _openframeworks.ofxCvFloatImage_convertGrayToFloat(self, *args)
    def getCv8BitsImage(self): return _openframeworks.ofxCvFloatImage_getCv8BitsImage(self)
    def getCv8BitsRoiImage(self): return _openframeworks.ofxCvFloatImage_getCv8BitsRoiImage(self)
    __swig_destroy__ = _openframeworks.delete_ofxCvFloatImage
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvFloatImage(self)
        return weakref_proxy(self)
    def setImageROI(self, *args): return _openframeworks.ofxCvFloatImage_setImageROI(self, *args)
    def resetImageROI(self, *args): return _openframeworks.ofxCvFloatImage_resetImageROI(self, *args)
    def rangeMap(self, *args): return _openframeworks.ofxCvFloatImage_rangeMap(self, *args)
    def swapTemp(self): return _openframeworks.ofxCvFloatImage_swapTemp(self)
ofxCvFloatImage_swigregister = _openframeworks.ofxCvFloatImage_swigregister
ofxCvFloatImage_swigregister(ofxCvFloatImage)

class ofxCvGrayscaleImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofxCvGrayscaleImage
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == ofxCvGrayscaleImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvGrayscaleImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofxCvGrayscaleImage_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofxCvGrayscaleImage_setFromPixels(self, *args)
    def setRoiFromPixels(self, *args): return _openframeworks.ofxCvGrayscaleImage_setRoiFromPixels(self, *args)
    def assign(self, *args): return _openframeworks.ofxCvGrayscaleImage_assign(self, *args)
    def absDiff(self, *args): return _openframeworks.ofxCvGrayscaleImage_absDiff(self, *args)
    def contrastStretch(self): return _openframeworks.ofxCvGrayscaleImage_contrastStretch(self)
    def convertToRange(self, *args): return _openframeworks.ofxCvGrayscaleImage_convertToRange(self, *args)
    def threshold(self, *args): return _openframeworks.ofxCvGrayscaleImage_threshold(self, *args)
    def adaptiveThreshold(self, *args): return _openframeworks.ofxCvGrayscaleImage_adaptiveThreshold(self, *args)
    def brightnessContrast(self, *args): return _openframeworks.ofxCvGrayscaleImage_brightnessContrast(self, *args)
    def resize(self, *args): return _openframeworks.ofxCvGrayscaleImage_resize(self, *args)
    def scaleIntoMe(self, *args): return _openframeworks.ofxCvGrayscaleImage_scaleIntoMe(self, *args)
    def blurHeavily(self): return _openframeworks.ofxCvGrayscaleImage_blurHeavily(self)
    def erode_3x3(self): return _openframeworks.ofxCvGrayscaleImage_erode_3x3(self)
    def dilate_3x3(self): return _openframeworks.ofxCvGrayscaleImage_dilate_3x3(self)
    def setFromColorImage(self, *args): return _openframeworks.ofxCvGrayscaleImage_setFromColorImage(self, *args)
    def setFromFloatImage(self, *args): return _openframeworks.ofxCvGrayscaleImage_setFromFloatImage(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvGrayscaleImage(self)
        return weakref_proxy(self)
    def setImageROI(self, *args): return _openframeworks.ofxCvGrayscaleImage_setImageROI(self, *args)
    def resetImageROI(self, *args): return _openframeworks.ofxCvGrayscaleImage_resetImageROI(self, *args)
    def rangeMap(self, *args): return _openframeworks.ofxCvGrayscaleImage_rangeMap(self, *args)
    def swapTemp(self): return _openframeworks.ofxCvGrayscaleImage_swapTemp(self)
    def getCv8BitsImage(self): return _openframeworks.ofxCvGrayscaleImage_getCv8BitsImage(self)
    def getCv8BitsRoiImage(self): return _openframeworks.ofxCvGrayscaleImage_getCv8BitsRoiImage(self)
ofxCvGrayscaleImage_swigregister = _openframeworks.ofxCvGrayscaleImage_swigregister
ofxCvGrayscaleImage_swigregister(ofxCvGrayscaleImage)

class ofx3DBaseLoader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofx3DBaseLoader:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofx3DBaseLoader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def loadModel(self, *args): return _openframeworks.ofx3DBaseLoader_loadModel(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofx3DBaseLoader
    __del__ = lambda self : None;
    def draw(self): return _openframeworks.ofx3DBaseLoader_draw(self)
    hasTexture = _swig_property(_openframeworks.ofx3DBaseLoader_hasTexture_get, _openframeworks.ofx3DBaseLoader_hasTexture_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofx3DBaseLoader(self)
        return weakref_proxy(self)
ofx3DBaseLoader_swigregister = _openframeworks.ofx3DBaseLoader_swigregister
ofx3DBaseLoader_swigregister(ofx3DBaseLoader)

class ofxAssimpMeshHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofxAssimpMeshHelper()
        try: self.this.append(this)
        except: self.this = this
    mesh = _swig_property(_openframeworks.ofxAssimpMeshHelper_mesh_get, _openframeworks.ofxAssimpMeshHelper_mesh_set)
    vbo = _swig_property(_openframeworks.ofxAssimpMeshHelper_vbo_get, _openframeworks.ofxAssimpMeshHelper_vbo_set)
    texture = _swig_property(_openframeworks.ofxAssimpMeshHelper_texture_get, _openframeworks.ofxAssimpMeshHelper_texture_set)
    indices = _swig_property(_openframeworks.ofxAssimpMeshHelper_indices_get, _openframeworks.ofxAssimpMeshHelper_indices_set)
    material = _swig_property(_openframeworks.ofxAssimpMeshHelper_material_get, _openframeworks.ofxAssimpMeshHelper_material_set)
    blendMode = _swig_property(_openframeworks.ofxAssimpMeshHelper_blendMode_get, _openframeworks.ofxAssimpMeshHelper_blendMode_set)
    twoSided = _swig_property(_openframeworks.ofxAssimpMeshHelper_twoSided_get, _openframeworks.ofxAssimpMeshHelper_twoSided_set)
    hasChanged = _swig_property(_openframeworks.ofxAssimpMeshHelper_hasChanged_get, _openframeworks.ofxAssimpMeshHelper_hasChanged_set)
    animatedPos = _swig_property(_openframeworks.ofxAssimpMeshHelper_animatedPos_get, _openframeworks.ofxAssimpMeshHelper_animatedPos_set)
    animatedNorm = _swig_property(_openframeworks.ofxAssimpMeshHelper_animatedNorm_get, _openframeworks.ofxAssimpMeshHelper_animatedNorm_set)
    cachedMesh = _swig_property(_openframeworks.ofxAssimpMeshHelper_cachedMesh_get, _openframeworks.ofxAssimpMeshHelper_cachedMesh_set)
    validCache = _swig_property(_openframeworks.ofxAssimpMeshHelper_validCache_get, _openframeworks.ofxAssimpMeshHelper_validCache_set)
    __swig_destroy__ = _openframeworks.delete_ofxAssimpMeshHelper
    __del__ = lambda self : None;
ofxAssimpMeshHelper_swigregister = _openframeworks.ofxAssimpMeshHelper_swigregister
ofxAssimpMeshHelper_swigregister(ofxAssimpMeshHelper)

class ofxAssimpModelLoader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofxAssimpModelLoader
    __del__ = lambda self : None;
    def __init__(self): 
        this = _openframeworks.new_ofxAssimpModelLoader()
        try: self.this.append(this)
        except: self.this = this
    def loadModel(self, *args): return _openframeworks.ofxAssimpModelLoader_loadModel(self, *args)
    def createEmptyModel(self): return _openframeworks.ofxAssimpModelLoader_createEmptyModel(self)
    def createLightsFromAiModel(self): return _openframeworks.ofxAssimpModelLoader_createLightsFromAiModel(self)
    def optimizeScene(self): return _openframeworks.ofxAssimpModelLoader_optimizeScene(self)
    def clear(self): return _openframeworks.ofxAssimpModelLoader_clear(self)
    def setScale(self, *args): return _openframeworks.ofxAssimpModelLoader_setScale(self, *args)
    def setPosition(self, *args): return _openframeworks.ofxAssimpModelLoader_setPosition(self, *args)
    def setRotation(self, *args): return _openframeworks.ofxAssimpModelLoader_setRotation(self, *args)
    def setScaleNomalization(self, *args): return _openframeworks.ofxAssimpModelLoader_setScaleNomalization(self, *args)
    def getAnimationCount(self): return _openframeworks.ofxAssimpModelLoader_getAnimationCount(self)
    def setAnimation(self, *args): return _openframeworks.ofxAssimpModelLoader_setAnimation(self, *args)
    def setNormalizedTime(self, *args): return _openframeworks.ofxAssimpModelLoader_setNormalizedTime(self, *args)
    def setTime(self, *args): return _openframeworks.ofxAssimpModelLoader_setTime(self, *args)
    def getDuration(self, *args): return _openframeworks.ofxAssimpModelLoader_getDuration(self, *args)
    def getMeshNames(self): return _openframeworks.ofxAssimpModelLoader_getMeshNames(self)
    def getNumMeshes(self): return _openframeworks.ofxAssimpModelLoader_getNumMeshes(self)
    def getMesh(self, *args): return _openframeworks.ofxAssimpModelLoader_getMesh(self, *args)
    def getCurrentAnimatedMesh(self, *args): return _openframeworks.ofxAssimpModelLoader_getCurrentAnimatedMesh(self, *args)
    def getMaterialForMesh(self, *args): return _openframeworks.ofxAssimpModelLoader_getMaterialForMesh(self, *args)
    def getTextureForMesh(self, *args): return _openframeworks.ofxAssimpModelLoader_getTextureForMesh(self, *args)
    def drawWireframe(self): return _openframeworks.ofxAssimpModelLoader_drawWireframe(self)
    def drawFaces(self): return _openframeworks.ofxAssimpModelLoader_drawFaces(self)
    def drawVertices(self): return _openframeworks.ofxAssimpModelLoader_drawVertices(self)
    def enableTextures(self): return _openframeworks.ofxAssimpModelLoader_enableTextures(self)
    def disableTextures(self): return _openframeworks.ofxAssimpModelLoader_disableTextures(self)
    def enableNormals(self): return _openframeworks.ofxAssimpModelLoader_enableNormals(self)
    def enableMaterials(self): return _openframeworks.ofxAssimpModelLoader_enableMaterials(self)
    def disableNormals(self): return _openframeworks.ofxAssimpModelLoader_disableNormals(self)
    def enableColors(self): return _openframeworks.ofxAssimpModelLoader_enableColors(self)
    def disableColors(self): return _openframeworks.ofxAssimpModelLoader_disableColors(self)
    def disableMaterials(self): return _openframeworks.ofxAssimpModelLoader_disableMaterials(self)
    def draw(self, *args): return _openframeworks.ofxAssimpModelLoader_draw(self, *args)
    def getPosition(self): return _openframeworks.ofxAssimpModelLoader_getPosition(self)
    def getSceneCenter(self): return _openframeworks.ofxAssimpModelLoader_getSceneCenter(self)
    def getNormalizedScale(self): return _openframeworks.ofxAssimpModelLoader_getNormalizedScale(self)
    def getScale(self): return _openframeworks.ofxAssimpModelLoader_getScale(self)
    def calculateDimensions(self): return _openframeworks.ofxAssimpModelLoader_calculateDimensions(self)
    def getAssimpScene(self): return _openframeworks.ofxAssimpModelLoader_getAssimpScene(self)
ofxAssimpModelLoader_swigregister = _openframeworks.ofxAssimpModelLoader_swigregister
ofxAssimpModelLoader_swigregister(ofxAssimpModelLoader)

class ofxCvShortImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofxCvShortImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvShortImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _openframeworks.ofxCvShortImage_clear(self)
    def flagImageChanged(self): return _openframeworks.ofxCvShortImage_flagImageChanged(self)
    def set(self, *args): return _openframeworks.ofxCvShortImage_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofxCvShortImage_setFromPixels(self, *args)
    def setRoiFromPixels(self, *args): return _openframeworks.ofxCvShortImage_setRoiFromPixels(self, *args)
    def assign(self, *args): return _openframeworks.ofxCvShortImage_assign(self, *args)
    def addWeighted(self, *args): return _openframeworks.ofxCvShortImage_addWeighted(self, *args)
    def contrastStretch(self): return _openframeworks.ofxCvShortImage_contrastStretch(self)
    def convertToRange(self, *args): return _openframeworks.ofxCvShortImage_convertToRange(self, *args)
    def resize(self, *args): return _openframeworks.ofxCvShortImage_resize(self, *args)
    def scaleIntoMe(self, *args): return _openframeworks.ofxCvShortImage_scaleIntoMe(self, *args)
    def getShortPixelsRef(self): return _openframeworks.ofxCvShortImage_getShortPixelsRef(self)
    def getRoiShortPixelsRef(self): return _openframeworks.ofxCvShortImage_getRoiShortPixelsRef(self)
    def convertShortToGray(self, *args): return _openframeworks.ofxCvShortImage_convertShortToGray(self, *args)
    def convertGrayToShort(self, *args): return _openframeworks.ofxCvShortImage_convertGrayToShort(self, *args)
    def getCv8BitsImage(self): return _openframeworks.ofxCvShortImage_getCv8BitsImage(self)
    def getCv8BitsRoiImage(self): return _openframeworks.ofxCvShortImage_getCv8BitsRoiImage(self)
    __swig_destroy__ = _openframeworks.delete_ofxCvShortImage
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvShortImage(self)
        return weakref_proxy(self)
    def setImageROI(self, *args): return _openframeworks.ofxCvShortImage_setImageROI(self, *args)
    def resetImageROI(self, *args): return _openframeworks.ofxCvShortImage_resetImageROI(self, *args)
    def rangeMap(self, *args): return _openframeworks.ofxCvShortImage_rangeMap(self, *args)
    def swapTemp(self): return _openframeworks.ofxCvShortImage_swapTemp(self)
ofxCvShortImage_swigregister = _openframeworks.ofxCvShortImage_swigregister
ofxCvShortImage_swigregister(ofxCvShortImage)

class ofxCvColorImage(ofxCvImage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofxCvColorImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvColorImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _openframeworks.ofxCvColorImage_clear(self)
    def set(self, *args): return _openframeworks.ofxCvColorImage_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofxCvColorImage_setFromPixels(self, *args)
    def setRoiFromPixels(self, *args): return _openframeworks.ofxCvColorImage_setRoiFromPixels(self, *args)
    def setFromGrayscalePlanarImages(self, *args): return _openframeworks.ofxCvColorImage_setFromGrayscalePlanarImages(self, *args)
    def assign(self, *args): return _openframeworks.ofxCvColorImage_assign(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofxCvColorImage___iadd__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofxCvColorImage___isub__(self, *args)
    def convertToGrayscalePlanarImages(self, *args): return _openframeworks.ofxCvColorImage_convertToGrayscalePlanarImages(self, *args)
    def convertToGrayscalePlanarImage(self, *args): return _openframeworks.ofxCvColorImage_convertToGrayscalePlanarImage(self, *args)
    def contrastStretch(self): return _openframeworks.ofxCvColorImage_contrastStretch(self)
    def convertToRange(self, *args): return _openframeworks.ofxCvColorImage_convertToRange(self, *args)
    def resize(self, *args): return _openframeworks.ofxCvColorImage_resize(self, *args)
    def scaleIntoMe(self, *args): return _openframeworks.ofxCvColorImage_scaleIntoMe(self, *args)
    def convertRgbToHsv(self): return _openframeworks.ofxCvColorImage_convertRgbToHsv(self)
    def convertHsvToRgb(self): return _openframeworks.ofxCvColorImage_convertHsvToRgb(self)
    __swig_destroy__ = _openframeworks.delete_ofxCvColorImage
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvColorImage(self)
        return weakref_proxy(self)
    def setImageROI(self, *args): return _openframeworks.ofxCvColorImage_setImageROI(self, *args)
    def resetImageROI(self, *args): return _openframeworks.ofxCvColorImage_resetImageROI(self, *args)
    def rangeMap(self, *args): return _openframeworks.ofxCvColorImage_rangeMap(self, *args)
    def swapTemp(self): return _openframeworks.ofxCvColorImage_swapTemp(self)
    def getCv8BitsImage(self): return _openframeworks.ofxCvColorImage_getCv8BitsImage(self)
    def getCv8BitsRoiImage(self): return _openframeworks.ofxCvColorImage_getCv8BitsRoiImage(self)
ofxCvColorImage_swigregister = _openframeworks.ofxCvColorImage_swigregister
ofxCvColorImage_swigregister(ofxCvColorImage)

class ofxCvContourFinder(ofBaseDraws):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    blobs = _swig_property(_openframeworks.ofxCvContourFinder_blobs_get, _openframeworks.ofxCvContourFinder_blobs_set)
    nBlobs = _swig_property(_openframeworks.ofxCvContourFinder_nBlobs_get, _openframeworks.ofxCvContourFinder_nBlobs_set)
    def __init__(self): 
        if self.__class__ == ofxCvContourFinder:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofxCvContourFinder(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofxCvContourFinder
    __del__ = lambda self : None;
    def getWidth(self): return _openframeworks.ofxCvContourFinder_getWidth(self)
    def getHeight(self): return _openframeworks.ofxCvContourFinder_getHeight(self)
    def findContours(self, *args): return _openframeworks.ofxCvContourFinder_findContours(self, *args)
    def draw(self, *args): return _openframeworks.ofxCvContourFinder_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofxCvContourFinder_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofxCvContourFinder_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofxCvContourFinder_resetAnchor(self)
    def getBlob(self, *args): return _openframeworks.ofxCvContourFinder_getBlob(self, *args)
    def reset(self): return _openframeworks.ofxCvContourFinder_reset(self)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofxCvContourFinder(self)
        return weakref_proxy(self)
ofxCvContourFinder_swigregister = _openframeworks.ofxCvContourFinder_swigregister
ofxCvContourFinder_swigregister(ofxCvContourFinder)

OF_MAX_LIGHTS = _openframeworks.OF_MAX_LIGHTS
OF_LIGHT_POINT = _openframeworks.OF_LIGHT_POINT
OF_LIGHT_SPOT = _openframeworks.OF_LIGHT_SPOT
OF_LIGHT_DIRECTIONAL = _openframeworks.OF_LIGHT_DIRECTIONAL

def ofEnableLighting():
  return _openframeworks.ofEnableLighting()
ofEnableLighting = _openframeworks.ofEnableLighting

def ofDisableLighting():
  return _openframeworks.ofDisableLighting()
ofDisableLighting = _openframeworks.ofDisableLighting

def ofEnableSeparateSpecularLight():
  return _openframeworks.ofEnableSeparateSpecularLight()
ofEnableSeparateSpecularLight = _openframeworks.ofEnableSeparateSpecularLight

def ofDisableSeparateSpecularLight():
  return _openframeworks.ofDisableSeparateSpecularLight()
ofDisableSeparateSpecularLight = _openframeworks.ofDisableSeparateSpecularLight

def ofGetLightingEnabled():
  return _openframeworks.ofGetLightingEnabled()
ofGetLightingEnabled = _openframeworks.ofGetLightingEnabled

def ofSetSmoothLighting(*args):
  return _openframeworks.ofSetSmoothLighting(*args)
ofSetSmoothLighting = _openframeworks.ofSetSmoothLighting

def ofSetGlobalAmbientColor(*args):
  return _openframeworks.ofSetGlobalAmbientColor(*args)
ofSetGlobalAmbientColor = _openframeworks.ofSetGlobalAmbientColor
class ofLight(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofLight:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofLight(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _openframeworks.ofLight_assign(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofLight
    __del__ = lambda self : None;
    def destroy(self): return _openframeworks.ofLight_destroy(self)
    def enable(self): return _openframeworks.ofLight_enable(self)
    def disable(self): return _openframeworks.ofLight_disable(self)
    def getIsEnabled(self): return _openframeworks.ofLight_getIsEnabled(self)
    def setDirectional(self): return _openframeworks.ofLight_setDirectional(self)
    def getIsDirectional(self): return _openframeworks.ofLight_getIsDirectional(self)
    def setSpotlight(self, spotCutOff = 45., exponent = 0.): return _openframeworks.ofLight_setSpotlight(self, spotCutOff, exponent)
    def getIsSpotlight(self): return _openframeworks.ofLight_getIsSpotlight(self)
    def setSpotlightCutOff(self, *args): return _openframeworks.ofLight_setSpotlightCutOff(self, *args)
    def setSpotConcentration(self, *args): return _openframeworks.ofLight_setSpotConcentration(self, *args)
    def setPointLight(self): return _openframeworks.ofLight_setPointLight(self)
    def getIsPointLight(self): return _openframeworks.ofLight_getIsPointLight(self)
    def setAttenuation(self, constant = 2., linear = 1., quadratic = 0.5): return _openframeworks.ofLight_setAttenuation(self, constant, linear, quadratic)
    def getType(self): return _openframeworks.ofLight_getType(self)
    def setAmbientColor(self, *args): return _openframeworks.ofLight_setAmbientColor(self, *args)
    def setDiffuseColor(self, *args): return _openframeworks.ofLight_setDiffuseColor(self, *args)
    def setSpecularColor(self, *args): return _openframeworks.ofLight_setSpecularColor(self, *args)
    def getAmbientColor(self): return _openframeworks.ofLight_getAmbientColor(self)
    def getDiffuseColor(self): return _openframeworks.ofLight_getDiffuseColor(self)
    def getSpecularColor(self): return _openframeworks.ofLight_getSpecularColor(self)
    def getLightID(self): return _openframeworks.ofLight_getLightID(self)
    def customDraw(self): return _openframeworks.ofLight_customDraw(self)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofLight(self)
        return weakref_proxy(self)
ofLight_swigregister = _openframeworks.ofLight_swigregister
ofLight_swigregister(ofLight)

class ofVboMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofVboMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUsage(self, *args): return _openframeworks.ofVboMesh_setUsage(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofVboMesh
    __del__ = lambda self : None;
ofVboMesh_swigregister = _openframeworks.ofVboMesh_swigregister
ofVboMesh_swigregister(ofVboMesh)

BORDER_SCALE = _openframeworks.BORDER_SCALE
class ofxARToolkitPlus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofxARToolkitPlus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofxARToolkitPlus
    __del__ = lambda self : None;
    def setup(self, *args): return _openframeworks.ofxARToolkitPlus_setup(self, *args)
    def update(self, *args): return _openframeworks.ofxARToolkitPlus_update(self, *args)
    def draw(self, *args): return _openframeworks.ofxARToolkitPlus_draw(self, *args)
    def applyProjectionMatrix(self, *args): return _openframeworks.ofxARToolkitPlus_applyProjectionMatrix(self, *args)
    def applyModelMatrix(self, *args): return _openframeworks.ofxARToolkitPlus_applyModelMatrix(self, *args)
    def getMatrix(self, *args): return _openframeworks.ofxARToolkitPlus_getMatrix(self, *args)
    def getGLMatrix(self, *args): return _openframeworks.ofxARToolkitPlus_getGLMatrix(self, *args)
    def getHomography(self, *args): return _openframeworks.ofxARToolkitPlus_getHomography(self, *args)
    def getTranslation(self, *args): return _openframeworks.ofxARToolkitPlus_getTranslation(self, *args)
    def getOrientationMatrix(self, *args): return _openframeworks.ofxARToolkitPlus_getOrientationMatrix(self, *args)
    def getOrientationQuaternion(self, *args): return _openframeworks.ofxARToolkitPlus_getOrientationQuaternion(self, *args)
    def getTranslationAndOrientation(self, *args): return _openframeworks.ofxARToolkitPlus_getTranslationAndOrientation(self, *args)
    def getCameraPosition(self, *args): return _openframeworks.ofxARToolkitPlus_getCameraPosition(self, *args)
    def getMultiMarkerTranslationAndOrientation(self, *args): return _openframeworks.ofxARToolkitPlus_getMultiMarkerTranslationAndOrientation(self, *args)
    def loadMultiMarkerFile(self, *args): return _openframeworks.ofxARToolkitPlus_loadMultiMarkerFile(self, *args)
    def setThreshold(self, *args): return _openframeworks.ofxARToolkitPlus_setThreshold(self, *args)
    def activateAutoThreshold(self, *args): return _openframeworks.ofxARToolkitPlus_activateAutoThreshold(self, *args)
    def setMarkerWidth(self, *args): return _openframeworks.ofxARToolkitPlus_setMarkerWidth(self, *args)
    def getNumDetectedMarkers(self): return _openframeworks.ofxARToolkitPlus_getNumDetectedMarkers(self)
    def getMarkerIndex(self, *args): return _openframeworks.ofxARToolkitPlus_getMarkerIndex(self, *args)
    def getMarkerID(self, *args): return _openframeworks.ofxARToolkitPlus_getMarkerID(self, *args)
    def getDetectedMarkerCenter(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerCenter(self, *args)
    def get2Drotation(self, *args): return _openframeworks.ofxARToolkitPlus_get2Drotation(self, *args)
    def getDetectedMarkerDirection(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerDirection(self, *args)
    def getDetectedMarkerCorners(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerCorners(self, *args)
    def getDetectedMarkerOrderedCorners(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerOrderedCorners(self, *args)
    def getDetectedMarkerBorderCorners(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerBorderCorners(self, *args)
    def getDetectedMarkerOrderedBorderCorners(self, *args): return _openframeworks.ofxARToolkitPlus_getDetectedMarkerOrderedBorderCorners(self, *args)
ofxARToolkitPlus_swigregister = _openframeworks.ofxARToolkitPlus_swigregister
ofxARToolkitPlus_swigregister(ofxARToolkitPlus)

class ofImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofImage_clear(self)
    def __init__(self, *args): 
        if self.__class__ == ofImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _openframeworks.ofImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _openframeworks.ofImage_isUsingTexture(self)
    def getTextureReference(self): return _openframeworks.ofImage_getTextureReference(self)
    def bind(self): return _openframeworks.ofImage_bind(self)
    def unbind(self): return _openframeworks.ofImage_unbind(self)
    def loadImage(self, *args): return _openframeworks.ofImage_loadImage(self, *args)
    def saveImage(self, *args): return _openframeworks.ofImage_saveImage(self, *args)
    def setCompression(self, *args): return _openframeworks.ofImage_setCompression(self, *args)
    def getPixels(self): return _openframeworks.ofImage_getPixels(self)
    def getColor(self, *args): return _openframeworks.ofImage_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofImage_setColor(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _openframeworks.ofImage_setImageType(self, *args)
    def resize(self, *args): return _openframeworks.ofImage_resize(self, *args)
    def grabScreen(self, *args): return _openframeworks.ofImage_grabScreen(self, *args)
    def crop(self, *args): return _openframeworks.ofImage_crop(self, *args)
    def cropFrom(self, *args): return _openframeworks.ofImage_cropFrom(self, *args)
    def rotate90(self, *args): return _openframeworks.ofImage_rotate90(self, *args)
    def mirror(self, *args): return _openframeworks.ofImage_mirror(self, *args)
    def update(self): return _openframeworks.ofImage_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofImage_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofImage_draw(self, *args)
    def getHeight(self): return _openframeworks.ofImage_getHeight(self)
    def getWidth(self): return _openframeworks.ofImage_getWidth(self)
    def bAllocated(self): return _openframeworks.ofImage_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofImage_isAllocated(self)
    def reloadTexture(self): return _openframeworks.ofImage_reloadTexture(self)
    width = _swig_property(_openframeworks.ofImage_width_get, _openframeworks.ofImage_width_set)
    height = _swig_property(_openframeworks.ofImage_height_get, _openframeworks.ofImage_height_set)
    bpp = _swig_property(_openframeworks.ofImage_bpp_get, _openframeworks.ofImage_bpp_set)
    type = _swig_property(_openframeworks.ofImage_type_get, _openframeworks.ofImage_type_set)
    def assign(self, *args): return _openframeworks.ofImage_assign(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofImage(self)
        return weakref_proxy(self)
ofImage_swigregister = _openframeworks.ofImage_swigregister
ofImage_swigregister(ofImage)



