# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openframeworks', [dirname(__file__)])
        except ImportError:
            import _openframeworks
            return _openframeworks
        if fp is not None:
            try:
                _mod = imp.load_module('_openframeworks', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openframeworks = swig_import_helper()
    del swig_import_helper
else:
    import _openframeworks
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


GL_FALSE = _openframeworks.GL_FALSE
GL_TRUE = _openframeworks.GL_TRUE
GL_BYTE = _openframeworks.GL_BYTE
GL_UNSIGNED_BYTE = _openframeworks.GL_UNSIGNED_BYTE
GL_SHORT = _openframeworks.GL_SHORT
GL_UNSIGNED_SHORT = _openframeworks.GL_UNSIGNED_SHORT
GL_INT = _openframeworks.GL_INT
GL_UNSIGNED_INT = _openframeworks.GL_UNSIGNED_INT
GL_FLOAT = _openframeworks.GL_FLOAT
GL_DOUBLE = _openframeworks.GL_DOUBLE
GL_2_BYTES = _openframeworks.GL_2_BYTES
GL_3_BYTES = _openframeworks.GL_3_BYTES
GL_4_BYTES = _openframeworks.GL_4_BYTES
GL_POINTS = _openframeworks.GL_POINTS
GL_LINES = _openframeworks.GL_LINES
GL_LINE_LOOP = _openframeworks.GL_LINE_LOOP
GL_LINE_STRIP = _openframeworks.GL_LINE_STRIP
GL_TRIANGLES = _openframeworks.GL_TRIANGLES
GL_TRIANGLE_STRIP = _openframeworks.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _openframeworks.GL_TRIANGLE_FAN
GL_QUADS = _openframeworks.GL_QUADS
GL_QUAD_STRIP = _openframeworks.GL_QUAD_STRIP
GL_POLYGON = _openframeworks.GL_POLYGON
GL_VERTEX_ARRAY = _openframeworks.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _openframeworks.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _openframeworks.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _openframeworks.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _openframeworks.GL_TEXTURE_COORD_ARRAY
GL_EDGE_FLAG_ARRAY = _openframeworks.GL_EDGE_FLAG_ARRAY
GL_VERTEX_ARRAY_SIZE = _openframeworks.GL_VERTEX_ARRAY_SIZE
GL_VERTEX_ARRAY_TYPE = _openframeworks.GL_VERTEX_ARRAY_TYPE
GL_VERTEX_ARRAY_STRIDE = _openframeworks.GL_VERTEX_ARRAY_STRIDE
GL_NORMAL_ARRAY_TYPE = _openframeworks.GL_NORMAL_ARRAY_TYPE
GL_NORMAL_ARRAY_STRIDE = _openframeworks.GL_NORMAL_ARRAY_STRIDE
GL_COLOR_ARRAY_SIZE = _openframeworks.GL_COLOR_ARRAY_SIZE
GL_COLOR_ARRAY_TYPE = _openframeworks.GL_COLOR_ARRAY_TYPE
GL_COLOR_ARRAY_STRIDE = _openframeworks.GL_COLOR_ARRAY_STRIDE
GL_INDEX_ARRAY_TYPE = _openframeworks.GL_INDEX_ARRAY_TYPE
GL_INDEX_ARRAY_STRIDE = _openframeworks.GL_INDEX_ARRAY_STRIDE
GL_TEXTURE_COORD_ARRAY_SIZE = _openframeworks.GL_TEXTURE_COORD_ARRAY_SIZE
GL_TEXTURE_COORD_ARRAY_TYPE = _openframeworks.GL_TEXTURE_COORD_ARRAY_TYPE
GL_TEXTURE_COORD_ARRAY_STRIDE = _openframeworks.GL_TEXTURE_COORD_ARRAY_STRIDE
GL_EDGE_FLAG_ARRAY_STRIDE = _openframeworks.GL_EDGE_FLAG_ARRAY_STRIDE
GL_VERTEX_ARRAY_POINTER = _openframeworks.GL_VERTEX_ARRAY_POINTER
GL_NORMAL_ARRAY_POINTER = _openframeworks.GL_NORMAL_ARRAY_POINTER
GL_COLOR_ARRAY_POINTER = _openframeworks.GL_COLOR_ARRAY_POINTER
GL_INDEX_ARRAY_POINTER = _openframeworks.GL_INDEX_ARRAY_POINTER
GL_TEXTURE_COORD_ARRAY_POINTER = _openframeworks.GL_TEXTURE_COORD_ARRAY_POINTER
GL_EDGE_FLAG_ARRAY_POINTER = _openframeworks.GL_EDGE_FLAG_ARRAY_POINTER
GL_V2F = _openframeworks.GL_V2F
GL_V3F = _openframeworks.GL_V3F
GL_C4UB_V2F = _openframeworks.GL_C4UB_V2F
GL_C4UB_V3F = _openframeworks.GL_C4UB_V3F
GL_C3F_V3F = _openframeworks.GL_C3F_V3F
GL_N3F_V3F = _openframeworks.GL_N3F_V3F
GL_C4F_N3F_V3F = _openframeworks.GL_C4F_N3F_V3F
GL_T2F_V3F = _openframeworks.GL_T2F_V3F
GL_T4F_V4F = _openframeworks.GL_T4F_V4F
GL_T2F_C4UB_V3F = _openframeworks.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _openframeworks.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _openframeworks.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _openframeworks.GL_T2F_C4F_N3F_V3F
GL_T4F_C4F_N3F_V4F = _openframeworks.GL_T4F_C4F_N3F_V4F
GL_MATRIX_MODE = _openframeworks.GL_MATRIX_MODE
GL_MODELVIEW = _openframeworks.GL_MODELVIEW
GL_PROJECTION = _openframeworks.GL_PROJECTION
GL_TEXTURE = _openframeworks.GL_TEXTURE
GL_POINT_SMOOTH = _openframeworks.GL_POINT_SMOOTH
GL_POINT_SIZE = _openframeworks.GL_POINT_SIZE
GL_POINT_SIZE_GRANULARITY = _openframeworks.GL_POINT_SIZE_GRANULARITY
GL_POINT_SIZE_RANGE = _openframeworks.GL_POINT_SIZE_RANGE
GL_LINE_SMOOTH = _openframeworks.GL_LINE_SMOOTH
GL_LINE_STIPPLE = _openframeworks.GL_LINE_STIPPLE
GL_LINE_STIPPLE_PATTERN = _openframeworks.GL_LINE_STIPPLE_PATTERN
GL_LINE_STIPPLE_REPEAT = _openframeworks.GL_LINE_STIPPLE_REPEAT
GL_LINE_WIDTH = _openframeworks.GL_LINE_WIDTH
GL_LINE_WIDTH_GRANULARITY = _openframeworks.GL_LINE_WIDTH_GRANULARITY
GL_LINE_WIDTH_RANGE = _openframeworks.GL_LINE_WIDTH_RANGE
GL_POINT = _openframeworks.GL_POINT
GL_LINE = _openframeworks.GL_LINE
GL_FILL = _openframeworks.GL_FILL
GL_CW = _openframeworks.GL_CW
GL_CCW = _openframeworks.GL_CCW
GL_FRONT = _openframeworks.GL_FRONT
GL_BACK = _openframeworks.GL_BACK
GL_POLYGON_MODE = _openframeworks.GL_POLYGON_MODE
GL_POLYGON_SMOOTH = _openframeworks.GL_POLYGON_SMOOTH
GL_POLYGON_STIPPLE = _openframeworks.GL_POLYGON_STIPPLE
GL_EDGE_FLAG = _openframeworks.GL_EDGE_FLAG
GL_CULL_FACE = _openframeworks.GL_CULL_FACE
GL_CULL_FACE_MODE = _openframeworks.GL_CULL_FACE_MODE
GL_FRONT_FACE = _openframeworks.GL_FRONT_FACE
GL_POLYGON_OFFSET_FACTOR = _openframeworks.GL_POLYGON_OFFSET_FACTOR
GL_POLYGON_OFFSET_UNITS = _openframeworks.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_POINT = _openframeworks.GL_POLYGON_OFFSET_POINT
GL_POLYGON_OFFSET_LINE = _openframeworks.GL_POLYGON_OFFSET_LINE
GL_POLYGON_OFFSET_FILL = _openframeworks.GL_POLYGON_OFFSET_FILL
GL_COMPILE = _openframeworks.GL_COMPILE
GL_COMPILE_AND_EXECUTE = _openframeworks.GL_COMPILE_AND_EXECUTE
GL_LIST_BASE = _openframeworks.GL_LIST_BASE
GL_LIST_INDEX = _openframeworks.GL_LIST_INDEX
GL_LIST_MODE = _openframeworks.GL_LIST_MODE
GL_NEVER = _openframeworks.GL_NEVER
GL_LESS = _openframeworks.GL_LESS
GL_EQUAL = _openframeworks.GL_EQUAL
GL_LEQUAL = _openframeworks.GL_LEQUAL
GL_GREATER = _openframeworks.GL_GREATER
GL_NOTEQUAL = _openframeworks.GL_NOTEQUAL
GL_GEQUAL = _openframeworks.GL_GEQUAL
GL_ALWAYS = _openframeworks.GL_ALWAYS
GL_DEPTH_TEST = _openframeworks.GL_DEPTH_TEST
GL_DEPTH_BITS = _openframeworks.GL_DEPTH_BITS
GL_DEPTH_CLEAR_VALUE = _openframeworks.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _openframeworks.GL_DEPTH_FUNC
GL_DEPTH_RANGE = _openframeworks.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _openframeworks.GL_DEPTH_WRITEMASK
GL_DEPTH_COMPONENT = _openframeworks.GL_DEPTH_COMPONENT
GL_LIGHTING = _openframeworks.GL_LIGHTING
GL_LIGHT0 = _openframeworks.GL_LIGHT0
GL_LIGHT1 = _openframeworks.GL_LIGHT1
GL_LIGHT2 = _openframeworks.GL_LIGHT2
GL_LIGHT3 = _openframeworks.GL_LIGHT3
GL_LIGHT4 = _openframeworks.GL_LIGHT4
GL_LIGHT5 = _openframeworks.GL_LIGHT5
GL_LIGHT6 = _openframeworks.GL_LIGHT6
GL_LIGHT7 = _openframeworks.GL_LIGHT7
GL_SPOT_EXPONENT = _openframeworks.GL_SPOT_EXPONENT
GL_SPOT_CUTOFF = _openframeworks.GL_SPOT_CUTOFF
GL_CONSTANT_ATTENUATION = _openframeworks.GL_CONSTANT_ATTENUATION
GL_LINEAR_ATTENUATION = _openframeworks.GL_LINEAR_ATTENUATION
GL_QUADRATIC_ATTENUATION = _openframeworks.GL_QUADRATIC_ATTENUATION
GL_AMBIENT = _openframeworks.GL_AMBIENT
GL_DIFFUSE = _openframeworks.GL_DIFFUSE
GL_SPECULAR = _openframeworks.GL_SPECULAR
GL_SHININESS = _openframeworks.GL_SHININESS
GL_EMISSION = _openframeworks.GL_EMISSION
GL_POSITION = _openframeworks.GL_POSITION
GL_SPOT_DIRECTION = _openframeworks.GL_SPOT_DIRECTION
GL_AMBIENT_AND_DIFFUSE = _openframeworks.GL_AMBIENT_AND_DIFFUSE
GL_COLOR_INDEXES = _openframeworks.GL_COLOR_INDEXES
GL_LIGHT_MODEL_TWO_SIDE = _openframeworks.GL_LIGHT_MODEL_TWO_SIDE
GL_LIGHT_MODEL_LOCAL_VIEWER = _openframeworks.GL_LIGHT_MODEL_LOCAL_VIEWER
GL_LIGHT_MODEL_AMBIENT = _openframeworks.GL_LIGHT_MODEL_AMBIENT
GL_FRONT_AND_BACK = _openframeworks.GL_FRONT_AND_BACK
GL_SHADE_MODEL = _openframeworks.GL_SHADE_MODEL
GL_FLAT = _openframeworks.GL_FLAT
GL_SMOOTH = _openframeworks.GL_SMOOTH
GL_COLOR_MATERIAL = _openframeworks.GL_COLOR_MATERIAL
GL_COLOR_MATERIAL_FACE = _openframeworks.GL_COLOR_MATERIAL_FACE
GL_COLOR_MATERIAL_PARAMETER = _openframeworks.GL_COLOR_MATERIAL_PARAMETER
GL_NORMALIZE = _openframeworks.GL_NORMALIZE
GL_CLIP_PLANE0 = _openframeworks.GL_CLIP_PLANE0
GL_CLIP_PLANE1 = _openframeworks.GL_CLIP_PLANE1
GL_CLIP_PLANE2 = _openframeworks.GL_CLIP_PLANE2
GL_CLIP_PLANE3 = _openframeworks.GL_CLIP_PLANE3
GL_CLIP_PLANE4 = _openframeworks.GL_CLIP_PLANE4
GL_CLIP_PLANE5 = _openframeworks.GL_CLIP_PLANE5
GL_ACCUM_RED_BITS = _openframeworks.GL_ACCUM_RED_BITS
GL_ACCUM_GREEN_BITS = _openframeworks.GL_ACCUM_GREEN_BITS
GL_ACCUM_BLUE_BITS = _openframeworks.GL_ACCUM_BLUE_BITS
GL_ACCUM_ALPHA_BITS = _openframeworks.GL_ACCUM_ALPHA_BITS
GL_ACCUM_CLEAR_VALUE = _openframeworks.GL_ACCUM_CLEAR_VALUE
GL_ACCUM = _openframeworks.GL_ACCUM
GL_ADD = _openframeworks.GL_ADD
GL_LOAD = _openframeworks.GL_LOAD
GL_MULT = _openframeworks.GL_MULT
GL_RETURN = _openframeworks.GL_RETURN
GL_ALPHA_TEST = _openframeworks.GL_ALPHA_TEST
GL_ALPHA_TEST_REF = _openframeworks.GL_ALPHA_TEST_REF
GL_ALPHA_TEST_FUNC = _openframeworks.GL_ALPHA_TEST_FUNC
GL_BLEND = _openframeworks.GL_BLEND
GL_BLEND_SRC = _openframeworks.GL_BLEND_SRC
GL_BLEND_DST = _openframeworks.GL_BLEND_DST
GL_ZERO = _openframeworks.GL_ZERO
GL_ONE = _openframeworks.GL_ONE
GL_SRC_COLOR = _openframeworks.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _openframeworks.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _openframeworks.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _openframeworks.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _openframeworks.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _openframeworks.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _openframeworks.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _openframeworks.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _openframeworks.GL_SRC_ALPHA_SATURATE
GL_CONSTANT_COLOR = _openframeworks.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _openframeworks.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _openframeworks.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _openframeworks.GL_ONE_MINUS_CONSTANT_ALPHA
GL_FEEDBACK = _openframeworks.GL_FEEDBACK
GL_RENDER = _openframeworks.GL_RENDER
GL_SELECT = _openframeworks.GL_SELECT
GL_2D = _openframeworks.GL_2D
GL_3D = _openframeworks.GL_3D
GL_3D_COLOR = _openframeworks.GL_3D_COLOR
GL_3D_COLOR_TEXTURE = _openframeworks.GL_3D_COLOR_TEXTURE
GL_4D_COLOR_TEXTURE = _openframeworks.GL_4D_COLOR_TEXTURE
GL_POINT_TOKEN = _openframeworks.GL_POINT_TOKEN
GL_LINE_TOKEN = _openframeworks.GL_LINE_TOKEN
GL_LINE_RESET_TOKEN = _openframeworks.GL_LINE_RESET_TOKEN
GL_POLYGON_TOKEN = _openframeworks.GL_POLYGON_TOKEN
GL_BITMAP_TOKEN = _openframeworks.GL_BITMAP_TOKEN
GL_DRAW_PIXEL_TOKEN = _openframeworks.GL_DRAW_PIXEL_TOKEN
GL_COPY_PIXEL_TOKEN = _openframeworks.GL_COPY_PIXEL_TOKEN
GL_PASS_THROUGH_TOKEN = _openframeworks.GL_PASS_THROUGH_TOKEN
GL_FEEDBACK_BUFFER_POINTER = _openframeworks.GL_FEEDBACK_BUFFER_POINTER
GL_FEEDBACK_BUFFER_SIZE = _openframeworks.GL_FEEDBACK_BUFFER_SIZE
GL_FEEDBACK_BUFFER_TYPE = _openframeworks.GL_FEEDBACK_BUFFER_TYPE
GL_SELECTION_BUFFER_POINTER = _openframeworks.GL_SELECTION_BUFFER_POINTER
GL_SELECTION_BUFFER_SIZE = _openframeworks.GL_SELECTION_BUFFER_SIZE
GL_FOG = _openframeworks.GL_FOG
GL_FOG_MODE = _openframeworks.GL_FOG_MODE
GL_FOG_DENSITY = _openframeworks.GL_FOG_DENSITY
GL_FOG_COLOR = _openframeworks.GL_FOG_COLOR
GL_FOG_INDEX = _openframeworks.GL_FOG_INDEX
GL_FOG_START = _openframeworks.GL_FOG_START
GL_FOG_END = _openframeworks.GL_FOG_END
GL_LINEAR = _openframeworks.GL_LINEAR
GL_EXP = _openframeworks.GL_EXP
GL_EXP2 = _openframeworks.GL_EXP2
GL_LOGIC_OP = _openframeworks.GL_LOGIC_OP
GL_INDEX_LOGIC_OP = _openframeworks.GL_INDEX_LOGIC_OP
GL_COLOR_LOGIC_OP = _openframeworks.GL_COLOR_LOGIC_OP
GL_LOGIC_OP_MODE = _openframeworks.GL_LOGIC_OP_MODE
GL_CLEAR = _openframeworks.GL_CLEAR
GL_SET = _openframeworks.GL_SET
GL_COPY = _openframeworks.GL_COPY
GL_COPY_INVERTED = _openframeworks.GL_COPY_INVERTED
GL_NOOP = _openframeworks.GL_NOOP
GL_INVERT = _openframeworks.GL_INVERT
GL_AND = _openframeworks.GL_AND
GL_NAND = _openframeworks.GL_NAND
GL_OR = _openframeworks.GL_OR
GL_NOR = _openframeworks.GL_NOR
GL_XOR = _openframeworks.GL_XOR
GL_EQUIV = _openframeworks.GL_EQUIV
GL_AND_REVERSE = _openframeworks.GL_AND_REVERSE
GL_AND_INVERTED = _openframeworks.GL_AND_INVERTED
GL_OR_REVERSE = _openframeworks.GL_OR_REVERSE
GL_OR_INVERTED = _openframeworks.GL_OR_INVERTED
GL_STENCIL_TEST = _openframeworks.GL_STENCIL_TEST
GL_STENCIL_WRITEMASK = _openframeworks.GL_STENCIL_WRITEMASK
GL_STENCIL_BITS = _openframeworks.GL_STENCIL_BITS
GL_STENCIL_FUNC = _openframeworks.GL_STENCIL_FUNC
GL_STENCIL_VALUE_MASK = _openframeworks.GL_STENCIL_VALUE_MASK
GL_STENCIL_REF = _openframeworks.GL_STENCIL_REF
GL_STENCIL_FAIL = _openframeworks.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _openframeworks.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_PASS_DEPTH_FAIL = _openframeworks.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_CLEAR_VALUE = _openframeworks.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_INDEX = _openframeworks.GL_STENCIL_INDEX
GL_KEEP = _openframeworks.GL_KEEP
GL_REPLACE = _openframeworks.GL_REPLACE
GL_INCR = _openframeworks.GL_INCR
GL_DECR = _openframeworks.GL_DECR
GL_NONE = _openframeworks.GL_NONE
GL_LEFT = _openframeworks.GL_LEFT
GL_RIGHT = _openframeworks.GL_RIGHT
GL_FRONT_LEFT = _openframeworks.GL_FRONT_LEFT
GL_FRONT_RIGHT = _openframeworks.GL_FRONT_RIGHT
GL_BACK_LEFT = _openframeworks.GL_BACK_LEFT
GL_BACK_RIGHT = _openframeworks.GL_BACK_RIGHT
GL_AUX0 = _openframeworks.GL_AUX0
GL_AUX1 = _openframeworks.GL_AUX1
GL_AUX2 = _openframeworks.GL_AUX2
GL_AUX3 = _openframeworks.GL_AUX3
GL_COLOR_INDEX = _openframeworks.GL_COLOR_INDEX
GL_RED = _openframeworks.GL_RED
GL_GREEN = _openframeworks.GL_GREEN
GL_BLUE = _openframeworks.GL_BLUE
GL_ALPHA = _openframeworks.GL_ALPHA
GL_LUMINANCE = _openframeworks.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _openframeworks.GL_LUMINANCE_ALPHA
GL_ALPHA_BITS = _openframeworks.GL_ALPHA_BITS
GL_RED_BITS = _openframeworks.GL_RED_BITS
GL_GREEN_BITS = _openframeworks.GL_GREEN_BITS
GL_BLUE_BITS = _openframeworks.GL_BLUE_BITS
GL_INDEX_BITS = _openframeworks.GL_INDEX_BITS
GL_SUBPIXEL_BITS = _openframeworks.GL_SUBPIXEL_BITS
GL_AUX_BUFFERS = _openframeworks.GL_AUX_BUFFERS
GL_READ_BUFFER = _openframeworks.GL_READ_BUFFER
GL_DRAW_BUFFER = _openframeworks.GL_DRAW_BUFFER
GL_DOUBLEBUFFER = _openframeworks.GL_DOUBLEBUFFER
GL_STEREO = _openframeworks.GL_STEREO
GL_BITMAP = _openframeworks.GL_BITMAP
GL_COLOR = _openframeworks.GL_COLOR
GL_DEPTH = _openframeworks.GL_DEPTH
GL_STENCIL = _openframeworks.GL_STENCIL
GL_DITHER = _openframeworks.GL_DITHER
GL_RGB = _openframeworks.GL_RGB
GL_RGBA = _openframeworks.GL_RGBA
GL_MAX_LIST_NESTING = _openframeworks.GL_MAX_LIST_NESTING
GL_MAX_ATTRIB_STACK_DEPTH = _openframeworks.GL_MAX_ATTRIB_STACK_DEPTH
GL_MAX_MODELVIEW_STACK_DEPTH = _openframeworks.GL_MAX_MODELVIEW_STACK_DEPTH
GL_MAX_NAME_STACK_DEPTH = _openframeworks.GL_MAX_NAME_STACK_DEPTH
GL_MAX_PROJECTION_STACK_DEPTH = _openframeworks.GL_MAX_PROJECTION_STACK_DEPTH
GL_MAX_TEXTURE_STACK_DEPTH = _openframeworks.GL_MAX_TEXTURE_STACK_DEPTH
GL_MAX_EVAL_ORDER = _openframeworks.GL_MAX_EVAL_ORDER
GL_MAX_LIGHTS = _openframeworks.GL_MAX_LIGHTS
GL_MAX_CLIP_PLANES = _openframeworks.GL_MAX_CLIP_PLANES
GL_MAX_TEXTURE_SIZE = _openframeworks.GL_MAX_TEXTURE_SIZE
GL_MAX_PIXEL_MAP_TABLE = _openframeworks.GL_MAX_PIXEL_MAP_TABLE
GL_MAX_VIEWPORT_DIMS = _openframeworks.GL_MAX_VIEWPORT_DIMS
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _openframeworks.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
GL_ATTRIB_STACK_DEPTH = _openframeworks.GL_ATTRIB_STACK_DEPTH
GL_CLIENT_ATTRIB_STACK_DEPTH = _openframeworks.GL_CLIENT_ATTRIB_STACK_DEPTH
GL_COLOR_CLEAR_VALUE = _openframeworks.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _openframeworks.GL_COLOR_WRITEMASK
GL_CURRENT_INDEX = _openframeworks.GL_CURRENT_INDEX
GL_CURRENT_COLOR = _openframeworks.GL_CURRENT_COLOR
GL_CURRENT_NORMAL = _openframeworks.GL_CURRENT_NORMAL
GL_CURRENT_RASTER_COLOR = _openframeworks.GL_CURRENT_RASTER_COLOR
GL_CURRENT_RASTER_DISTANCE = _openframeworks.GL_CURRENT_RASTER_DISTANCE
GL_CURRENT_RASTER_INDEX = _openframeworks.GL_CURRENT_RASTER_INDEX
GL_CURRENT_RASTER_POSITION = _openframeworks.GL_CURRENT_RASTER_POSITION
GL_CURRENT_RASTER_TEXTURE_COORDS = _openframeworks.GL_CURRENT_RASTER_TEXTURE_COORDS
GL_CURRENT_RASTER_POSITION_VALID = _openframeworks.GL_CURRENT_RASTER_POSITION_VALID
GL_CURRENT_TEXTURE_COORDS = _openframeworks.GL_CURRENT_TEXTURE_COORDS
GL_INDEX_CLEAR_VALUE = _openframeworks.GL_INDEX_CLEAR_VALUE
GL_INDEX_MODE = _openframeworks.GL_INDEX_MODE
GL_INDEX_WRITEMASK = _openframeworks.GL_INDEX_WRITEMASK
GL_MODELVIEW_MATRIX = _openframeworks.GL_MODELVIEW_MATRIX
GL_MODELVIEW_STACK_DEPTH = _openframeworks.GL_MODELVIEW_STACK_DEPTH
GL_NAME_STACK_DEPTH = _openframeworks.GL_NAME_STACK_DEPTH
GL_PROJECTION_MATRIX = _openframeworks.GL_PROJECTION_MATRIX
GL_PROJECTION_STACK_DEPTH = _openframeworks.GL_PROJECTION_STACK_DEPTH
GL_RENDER_MODE = _openframeworks.GL_RENDER_MODE
GL_RGBA_MODE = _openframeworks.GL_RGBA_MODE
GL_TEXTURE_MATRIX = _openframeworks.GL_TEXTURE_MATRIX
GL_TEXTURE_STACK_DEPTH = _openframeworks.GL_TEXTURE_STACK_DEPTH
GL_VIEWPORT = _openframeworks.GL_VIEWPORT
GL_AUTO_NORMAL = _openframeworks.GL_AUTO_NORMAL
GL_MAP1_COLOR_4 = _openframeworks.GL_MAP1_COLOR_4
GL_MAP1_GRID_DOMAIN = _openframeworks.GL_MAP1_GRID_DOMAIN
GL_MAP1_GRID_SEGMENTS = _openframeworks.GL_MAP1_GRID_SEGMENTS
GL_MAP1_INDEX = _openframeworks.GL_MAP1_INDEX
GL_MAP1_NORMAL = _openframeworks.GL_MAP1_NORMAL
GL_MAP1_TEXTURE_COORD_1 = _openframeworks.GL_MAP1_TEXTURE_COORD_1
GL_MAP1_TEXTURE_COORD_2 = _openframeworks.GL_MAP1_TEXTURE_COORD_2
GL_MAP1_TEXTURE_COORD_3 = _openframeworks.GL_MAP1_TEXTURE_COORD_3
GL_MAP1_TEXTURE_COORD_4 = _openframeworks.GL_MAP1_TEXTURE_COORD_4
GL_MAP1_VERTEX_3 = _openframeworks.GL_MAP1_VERTEX_3
GL_MAP1_VERTEX_4 = _openframeworks.GL_MAP1_VERTEX_4
GL_MAP2_COLOR_4 = _openframeworks.GL_MAP2_COLOR_4
GL_MAP2_GRID_DOMAIN = _openframeworks.GL_MAP2_GRID_DOMAIN
GL_MAP2_GRID_SEGMENTS = _openframeworks.GL_MAP2_GRID_SEGMENTS
GL_MAP2_INDEX = _openframeworks.GL_MAP2_INDEX
GL_MAP2_NORMAL = _openframeworks.GL_MAP2_NORMAL
GL_MAP2_TEXTURE_COORD_1 = _openframeworks.GL_MAP2_TEXTURE_COORD_1
GL_MAP2_TEXTURE_COORD_2 = _openframeworks.GL_MAP2_TEXTURE_COORD_2
GL_MAP2_TEXTURE_COORD_3 = _openframeworks.GL_MAP2_TEXTURE_COORD_3
GL_MAP2_TEXTURE_COORD_4 = _openframeworks.GL_MAP2_TEXTURE_COORD_4
GL_MAP2_VERTEX_3 = _openframeworks.GL_MAP2_VERTEX_3
GL_MAP2_VERTEX_4 = _openframeworks.GL_MAP2_VERTEX_4
GL_COEFF = _openframeworks.GL_COEFF
GL_DOMAIN = _openframeworks.GL_DOMAIN
GL_ORDER = _openframeworks.GL_ORDER
GL_FOG_HINT = _openframeworks.GL_FOG_HINT
GL_LINE_SMOOTH_HINT = _openframeworks.GL_LINE_SMOOTH_HINT
GL_PERSPECTIVE_CORRECTION_HINT = _openframeworks.GL_PERSPECTIVE_CORRECTION_HINT
GL_POINT_SMOOTH_HINT = _openframeworks.GL_POINT_SMOOTH_HINT
GL_POLYGON_SMOOTH_HINT = _openframeworks.GL_POLYGON_SMOOTH_HINT
GL_DONT_CARE = _openframeworks.GL_DONT_CARE
GL_FASTEST = _openframeworks.GL_FASTEST
GL_NICEST = _openframeworks.GL_NICEST
GL_SCISSOR_TEST = _openframeworks.GL_SCISSOR_TEST
GL_SCISSOR_BOX = _openframeworks.GL_SCISSOR_BOX
GL_MAP_COLOR = _openframeworks.GL_MAP_COLOR
GL_MAP_STENCIL = _openframeworks.GL_MAP_STENCIL
GL_INDEX_SHIFT = _openframeworks.GL_INDEX_SHIFT
GL_INDEX_OFFSET = _openframeworks.GL_INDEX_OFFSET
GL_RED_SCALE = _openframeworks.GL_RED_SCALE
GL_RED_BIAS = _openframeworks.GL_RED_BIAS
GL_GREEN_SCALE = _openframeworks.GL_GREEN_SCALE
GL_GREEN_BIAS = _openframeworks.GL_GREEN_BIAS
GL_BLUE_SCALE = _openframeworks.GL_BLUE_SCALE
GL_BLUE_BIAS = _openframeworks.GL_BLUE_BIAS
GL_ALPHA_SCALE = _openframeworks.GL_ALPHA_SCALE
GL_ALPHA_BIAS = _openframeworks.GL_ALPHA_BIAS
GL_DEPTH_SCALE = _openframeworks.GL_DEPTH_SCALE
GL_DEPTH_BIAS = _openframeworks.GL_DEPTH_BIAS
GL_PIXEL_MAP_S_TO_S_SIZE = _openframeworks.GL_PIXEL_MAP_S_TO_S_SIZE
GL_PIXEL_MAP_I_TO_I_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_I_SIZE
GL_PIXEL_MAP_I_TO_R_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_R_SIZE
GL_PIXEL_MAP_I_TO_G_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_G_SIZE
GL_PIXEL_MAP_I_TO_B_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_B_SIZE
GL_PIXEL_MAP_I_TO_A_SIZE = _openframeworks.GL_PIXEL_MAP_I_TO_A_SIZE
GL_PIXEL_MAP_R_TO_R_SIZE = _openframeworks.GL_PIXEL_MAP_R_TO_R_SIZE
GL_PIXEL_MAP_G_TO_G_SIZE = _openframeworks.GL_PIXEL_MAP_G_TO_G_SIZE
GL_PIXEL_MAP_B_TO_B_SIZE = _openframeworks.GL_PIXEL_MAP_B_TO_B_SIZE
GL_PIXEL_MAP_A_TO_A_SIZE = _openframeworks.GL_PIXEL_MAP_A_TO_A_SIZE
GL_PIXEL_MAP_S_TO_S = _openframeworks.GL_PIXEL_MAP_S_TO_S
GL_PIXEL_MAP_I_TO_I = _openframeworks.GL_PIXEL_MAP_I_TO_I
GL_PIXEL_MAP_I_TO_R = _openframeworks.GL_PIXEL_MAP_I_TO_R
GL_PIXEL_MAP_I_TO_G = _openframeworks.GL_PIXEL_MAP_I_TO_G
GL_PIXEL_MAP_I_TO_B = _openframeworks.GL_PIXEL_MAP_I_TO_B
GL_PIXEL_MAP_I_TO_A = _openframeworks.GL_PIXEL_MAP_I_TO_A
GL_PIXEL_MAP_R_TO_R = _openframeworks.GL_PIXEL_MAP_R_TO_R
GL_PIXEL_MAP_G_TO_G = _openframeworks.GL_PIXEL_MAP_G_TO_G
GL_PIXEL_MAP_B_TO_B = _openframeworks.GL_PIXEL_MAP_B_TO_B
GL_PIXEL_MAP_A_TO_A = _openframeworks.GL_PIXEL_MAP_A_TO_A
GL_PACK_ALIGNMENT = _openframeworks.GL_PACK_ALIGNMENT
GL_PACK_LSB_FIRST = _openframeworks.GL_PACK_LSB_FIRST
GL_PACK_ROW_LENGTH = _openframeworks.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_PIXELS = _openframeworks.GL_PACK_SKIP_PIXELS
GL_PACK_SKIP_ROWS = _openframeworks.GL_PACK_SKIP_ROWS
GL_PACK_SWAP_BYTES = _openframeworks.GL_PACK_SWAP_BYTES
GL_UNPACK_ALIGNMENT = _openframeworks.GL_UNPACK_ALIGNMENT
GL_UNPACK_LSB_FIRST = _openframeworks.GL_UNPACK_LSB_FIRST
GL_UNPACK_ROW_LENGTH = _openframeworks.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_PIXELS = _openframeworks.GL_UNPACK_SKIP_PIXELS
GL_UNPACK_SKIP_ROWS = _openframeworks.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SWAP_BYTES = _openframeworks.GL_UNPACK_SWAP_BYTES
GL_ZOOM_X = _openframeworks.GL_ZOOM_X
GL_ZOOM_Y = _openframeworks.GL_ZOOM_Y
GL_TEXTURE_ENV = _openframeworks.GL_TEXTURE_ENV
GL_TEXTURE_ENV_MODE = _openframeworks.GL_TEXTURE_ENV_MODE
GL_TEXTURE_1D = _openframeworks.GL_TEXTURE_1D
GL_TEXTURE_2D = _openframeworks.GL_TEXTURE_2D
GL_TEXTURE_WRAP_S = _openframeworks.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _openframeworks.GL_TEXTURE_WRAP_T
GL_TEXTURE_MAG_FILTER = _openframeworks.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _openframeworks.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_ENV_COLOR = _openframeworks.GL_TEXTURE_ENV_COLOR
GL_TEXTURE_GEN_S = _openframeworks.GL_TEXTURE_GEN_S
GL_TEXTURE_GEN_T = _openframeworks.GL_TEXTURE_GEN_T
GL_TEXTURE_GEN_MODE = _openframeworks.GL_TEXTURE_GEN_MODE
GL_TEXTURE_BORDER_COLOR = _openframeworks.GL_TEXTURE_BORDER_COLOR
GL_TEXTURE_WIDTH = _openframeworks.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _openframeworks.GL_TEXTURE_HEIGHT
GL_TEXTURE_BORDER = _openframeworks.GL_TEXTURE_BORDER
GL_TEXTURE_COMPONENTS = _openframeworks.GL_TEXTURE_COMPONENTS
GL_TEXTURE_RED_SIZE = _openframeworks.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _openframeworks.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _openframeworks.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _openframeworks.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_LUMINANCE_SIZE = _openframeworks.GL_TEXTURE_LUMINANCE_SIZE
GL_TEXTURE_INTENSITY_SIZE = _openframeworks.GL_TEXTURE_INTENSITY_SIZE
GL_NEAREST_MIPMAP_NEAREST = _openframeworks.GL_NEAREST_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _openframeworks.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_NEAREST = _openframeworks.GL_LINEAR_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_LINEAR = _openframeworks.GL_LINEAR_MIPMAP_LINEAR
GL_OBJECT_LINEAR = _openframeworks.GL_OBJECT_LINEAR
GL_OBJECT_PLANE = _openframeworks.GL_OBJECT_PLANE
GL_EYE_LINEAR = _openframeworks.GL_EYE_LINEAR
GL_EYE_PLANE = _openframeworks.GL_EYE_PLANE
GL_SPHERE_MAP = _openframeworks.GL_SPHERE_MAP
GL_DECAL = _openframeworks.GL_DECAL
GL_MODULATE = _openframeworks.GL_MODULATE
GL_NEAREST = _openframeworks.GL_NEAREST
GL_REPEAT = _openframeworks.GL_REPEAT
GL_CLAMP = _openframeworks.GL_CLAMP
GL_S = _openframeworks.GL_S
GL_T = _openframeworks.GL_T
GL_R = _openframeworks.GL_R
GL_Q = _openframeworks.GL_Q
GL_TEXTURE_GEN_R = _openframeworks.GL_TEXTURE_GEN_R
GL_TEXTURE_GEN_Q = _openframeworks.GL_TEXTURE_GEN_Q
GL_VENDOR = _openframeworks.GL_VENDOR
GL_RENDERER = _openframeworks.GL_RENDERER
GL_VERSION = _openframeworks.GL_VERSION
GL_EXTENSIONS = _openframeworks.GL_EXTENSIONS
GL_NO_ERROR = _openframeworks.GL_NO_ERROR
GL_INVALID_VALUE = _openframeworks.GL_INVALID_VALUE
GL_INVALID_ENUM = _openframeworks.GL_INVALID_ENUM
GL_INVALID_OPERATION = _openframeworks.GL_INVALID_OPERATION
GL_STACK_OVERFLOW = _openframeworks.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _openframeworks.GL_STACK_UNDERFLOW
GL_OUT_OF_MEMORY = _openframeworks.GL_OUT_OF_MEMORY
GL_CURRENT_BIT = _openframeworks.GL_CURRENT_BIT
GL_POINT_BIT = _openframeworks.GL_POINT_BIT
GL_LINE_BIT = _openframeworks.GL_LINE_BIT
GL_POLYGON_BIT = _openframeworks.GL_POLYGON_BIT
GL_POLYGON_STIPPLE_BIT = _openframeworks.GL_POLYGON_STIPPLE_BIT
GL_PIXEL_MODE_BIT = _openframeworks.GL_PIXEL_MODE_BIT
GL_LIGHTING_BIT = _openframeworks.GL_LIGHTING_BIT
GL_FOG_BIT = _openframeworks.GL_FOG_BIT
GL_DEPTH_BUFFER_BIT = _openframeworks.GL_DEPTH_BUFFER_BIT
GL_ACCUM_BUFFER_BIT = _openframeworks.GL_ACCUM_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _openframeworks.GL_STENCIL_BUFFER_BIT
GL_VIEWPORT_BIT = _openframeworks.GL_VIEWPORT_BIT
GL_TRANSFORM_BIT = _openframeworks.GL_TRANSFORM_BIT
GL_ENABLE_BIT = _openframeworks.GL_ENABLE_BIT
GL_COLOR_BUFFER_BIT = _openframeworks.GL_COLOR_BUFFER_BIT
GL_HINT_BIT = _openframeworks.GL_HINT_BIT
GL_EVAL_BIT = _openframeworks.GL_EVAL_BIT
GL_LIST_BIT = _openframeworks.GL_LIST_BIT
GL_TEXTURE_BIT = _openframeworks.GL_TEXTURE_BIT
GL_SCISSOR_BIT = _openframeworks.GL_SCISSOR_BIT
GL_ALL_ATTRIB_BITS = _openframeworks.GL_ALL_ATTRIB_BITS
GL_PROXY_TEXTURE_1D = _openframeworks.GL_PROXY_TEXTURE_1D
GL_PROXY_TEXTURE_2D = _openframeworks.GL_PROXY_TEXTURE_2D
GL_TEXTURE_PRIORITY = _openframeworks.GL_TEXTURE_PRIORITY
GL_TEXTURE_RESIDENT = _openframeworks.GL_TEXTURE_RESIDENT
GL_TEXTURE_BINDING_1D = _openframeworks.GL_TEXTURE_BINDING_1D
GL_TEXTURE_BINDING_2D = _openframeworks.GL_TEXTURE_BINDING_2D
GL_TEXTURE_INTERNAL_FORMAT = _openframeworks.GL_TEXTURE_INTERNAL_FORMAT
GL_ALPHA4 = _openframeworks.GL_ALPHA4
GL_ALPHA8 = _openframeworks.GL_ALPHA8
GL_ALPHA12 = _openframeworks.GL_ALPHA12
GL_ALPHA16 = _openframeworks.GL_ALPHA16
GL_LUMINANCE4 = _openframeworks.GL_LUMINANCE4
GL_LUMINANCE8 = _openframeworks.GL_LUMINANCE8
GL_LUMINANCE12 = _openframeworks.GL_LUMINANCE12
GL_LUMINANCE16 = _openframeworks.GL_LUMINANCE16
GL_LUMINANCE4_ALPHA4 = _openframeworks.GL_LUMINANCE4_ALPHA4
GL_LUMINANCE6_ALPHA2 = _openframeworks.GL_LUMINANCE6_ALPHA2
GL_LUMINANCE8_ALPHA8 = _openframeworks.GL_LUMINANCE8_ALPHA8
GL_LUMINANCE12_ALPHA4 = _openframeworks.GL_LUMINANCE12_ALPHA4
GL_LUMINANCE12_ALPHA12 = _openframeworks.GL_LUMINANCE12_ALPHA12
GL_LUMINANCE16_ALPHA16 = _openframeworks.GL_LUMINANCE16_ALPHA16
GL_INTENSITY = _openframeworks.GL_INTENSITY
GL_INTENSITY4 = _openframeworks.GL_INTENSITY4
GL_INTENSITY8 = _openframeworks.GL_INTENSITY8
GL_INTENSITY12 = _openframeworks.GL_INTENSITY12
GL_INTENSITY16 = _openframeworks.GL_INTENSITY16
GL_R3_G3_B2 = _openframeworks.GL_R3_G3_B2
GL_RGB4 = _openframeworks.GL_RGB4
GL_RGB5 = _openframeworks.GL_RGB5
GL_RGB8 = _openframeworks.GL_RGB8
GL_RGB10 = _openframeworks.GL_RGB10
GL_RGB12 = _openframeworks.GL_RGB12
GL_RGB16 = _openframeworks.GL_RGB16
GL_RGBA2 = _openframeworks.GL_RGBA2
GL_RGBA4 = _openframeworks.GL_RGBA4
GL_RGB5_A1 = _openframeworks.GL_RGB5_A1
GL_RGBA8 = _openframeworks.GL_RGBA8
GL_RGB10_A2 = _openframeworks.GL_RGB10_A2
GL_RGBA12 = _openframeworks.GL_RGBA12
GL_RGBA16 = _openframeworks.GL_RGBA16
GL_CLIENT_PIXEL_STORE_BIT = _openframeworks.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _openframeworks.GL_CLIENT_VERTEX_ARRAY_BIT
GL_ALL_CLIENT_ATTRIB_BITS = _openframeworks.GL_ALL_CLIENT_ATTRIB_BITS
GL_CLIENT_ALL_ATTRIB_BITS = _openframeworks.GL_CLIENT_ALL_ATTRIB_BITS

def glClearIndex(*args):
  return _openframeworks.glClearIndex(*args)
glClearIndex = _openframeworks.glClearIndex

def glClearColor(*args):
  return _openframeworks.glClearColor(*args)
glClearColor = _openframeworks.glClearColor

def glClear(*args):
  return _openframeworks.glClear(*args)
glClear = _openframeworks.glClear

def glIndexMask(*args):
  return _openframeworks.glIndexMask(*args)
glIndexMask = _openframeworks.glIndexMask

def glColorMask(*args):
  return _openframeworks.glColorMask(*args)
glColorMask = _openframeworks.glColorMask

def glAlphaFunc(*args):
  return _openframeworks.glAlphaFunc(*args)
glAlphaFunc = _openframeworks.glAlphaFunc

def glBlendFunc(*args):
  return _openframeworks.glBlendFunc(*args)
glBlendFunc = _openframeworks.glBlendFunc

def glLogicOp(*args):
  return _openframeworks.glLogicOp(*args)
glLogicOp = _openframeworks.glLogicOp

def glCullFace(*args):
  return _openframeworks.glCullFace(*args)
glCullFace = _openframeworks.glCullFace

def glFrontFace(*args):
  return _openframeworks.glFrontFace(*args)
glFrontFace = _openframeworks.glFrontFace

def glPointSize(*args):
  return _openframeworks.glPointSize(*args)
glPointSize = _openframeworks.glPointSize

def glLineWidth(*args):
  return _openframeworks.glLineWidth(*args)
glLineWidth = _openframeworks.glLineWidth

def glLineStipple(*args):
  return _openframeworks.glLineStipple(*args)
glLineStipple = _openframeworks.glLineStipple

def glPolygonMode(*args):
  return _openframeworks.glPolygonMode(*args)
glPolygonMode = _openframeworks.glPolygonMode

def glPolygonOffset(*args):
  return _openframeworks.glPolygonOffset(*args)
glPolygonOffset = _openframeworks.glPolygonOffset

def glPolygonStipple(*args):
  return _openframeworks.glPolygonStipple(*args)
glPolygonStipple = _openframeworks.glPolygonStipple

def glGetPolygonStipple(*args):
  return _openframeworks.glGetPolygonStipple(*args)
glGetPolygonStipple = _openframeworks.glGetPolygonStipple

def glEdgeFlag(*args):
  return _openframeworks.glEdgeFlag(*args)
glEdgeFlag = _openframeworks.glEdgeFlag

def glEdgeFlagv(*args):
  return _openframeworks.glEdgeFlagv(*args)
glEdgeFlagv = _openframeworks.glEdgeFlagv

def glScissor(*args):
  return _openframeworks.glScissor(*args)
glScissor = _openframeworks.glScissor

def glClipPlane(*args):
  return _openframeworks.glClipPlane(*args)
glClipPlane = _openframeworks.glClipPlane

def glGetClipPlane(*args):
  return _openframeworks.glGetClipPlane(*args)
glGetClipPlane = _openframeworks.glGetClipPlane

def glDrawBuffer(*args):
  return _openframeworks.glDrawBuffer(*args)
glDrawBuffer = _openframeworks.glDrawBuffer

def glReadBuffer(*args):
  return _openframeworks.glReadBuffer(*args)
glReadBuffer = _openframeworks.glReadBuffer

def glEnable(*args):
  return _openframeworks.glEnable(*args)
glEnable = _openframeworks.glEnable

def glDisable(*args):
  return _openframeworks.glDisable(*args)
glDisable = _openframeworks.glDisable

def glIsEnabled(*args):
  return _openframeworks.glIsEnabled(*args)
glIsEnabled = _openframeworks.glIsEnabled

def glEnableClientState(*args):
  return _openframeworks.glEnableClientState(*args)
glEnableClientState = _openframeworks.glEnableClientState

def glDisableClientState(*args):
  return _openframeworks.glDisableClientState(*args)
glDisableClientState = _openframeworks.glDisableClientState

def glGetBooleanv(*args):
  return _openframeworks.glGetBooleanv(*args)
glGetBooleanv = _openframeworks.glGetBooleanv

def glGetDoublev(*args):
  return _openframeworks.glGetDoublev(*args)
glGetDoublev = _openframeworks.glGetDoublev

def glGetFloatv(*args):
  return _openframeworks.glGetFloatv(*args)
glGetFloatv = _openframeworks.glGetFloatv

def glGetIntegerv(*args):
  return _openframeworks.glGetIntegerv(*args)
glGetIntegerv = _openframeworks.glGetIntegerv

def glPushAttrib(*args):
  return _openframeworks.glPushAttrib(*args)
glPushAttrib = _openframeworks.glPushAttrib

def glPopAttrib():
  return _openframeworks.glPopAttrib()
glPopAttrib = _openframeworks.glPopAttrib

def glPushClientAttrib(*args):
  return _openframeworks.glPushClientAttrib(*args)
glPushClientAttrib = _openframeworks.glPushClientAttrib

def glPopClientAttrib():
  return _openframeworks.glPopClientAttrib()
glPopClientAttrib = _openframeworks.glPopClientAttrib

def glRenderMode(*args):
  return _openframeworks.glRenderMode(*args)
glRenderMode = _openframeworks.glRenderMode

def glGetError():
  return _openframeworks.glGetError()
glGetError = _openframeworks.glGetError

def glGetString(*args):
  return _openframeworks.glGetString(*args)
glGetString = _openframeworks.glGetString

def glFinish():
  return _openframeworks.glFinish()
glFinish = _openframeworks.glFinish

def glFlush():
  return _openframeworks.glFlush()
glFlush = _openframeworks.glFlush

def glHint(*args):
  return _openframeworks.glHint(*args)
glHint = _openframeworks.glHint

def glClearDepth(*args):
  return _openframeworks.glClearDepth(*args)
glClearDepth = _openframeworks.glClearDepth

def glDepthFunc(*args):
  return _openframeworks.glDepthFunc(*args)
glDepthFunc = _openframeworks.glDepthFunc

def glDepthMask(*args):
  return _openframeworks.glDepthMask(*args)
glDepthMask = _openframeworks.glDepthMask

def glDepthRange(*args):
  return _openframeworks.glDepthRange(*args)
glDepthRange = _openframeworks.glDepthRange

def glClearAccum(*args):
  return _openframeworks.glClearAccum(*args)
glClearAccum = _openframeworks.glClearAccum

def glAccum(*args):
  return _openframeworks.glAccum(*args)
glAccum = _openframeworks.glAccum

def glMatrixMode(*args):
  return _openframeworks.glMatrixMode(*args)
glMatrixMode = _openframeworks.glMatrixMode

def glOrtho(*args):
  return _openframeworks.glOrtho(*args)
glOrtho = _openframeworks.glOrtho

def glFrustum(*args):
  return _openframeworks.glFrustum(*args)
glFrustum = _openframeworks.glFrustum

def glViewport(*args):
  return _openframeworks.glViewport(*args)
glViewport = _openframeworks.glViewport

def glPushMatrix():
  return _openframeworks.glPushMatrix()
glPushMatrix = _openframeworks.glPushMatrix

def glPopMatrix():
  return _openframeworks.glPopMatrix()
glPopMatrix = _openframeworks.glPopMatrix

def glLoadIdentity():
  return _openframeworks.glLoadIdentity()
glLoadIdentity = _openframeworks.glLoadIdentity

def glLoadMatrixd(*args):
  return _openframeworks.glLoadMatrixd(*args)
glLoadMatrixd = _openframeworks.glLoadMatrixd

def glLoadMatrixf(*args):
  return _openframeworks.glLoadMatrixf(*args)
glLoadMatrixf = _openframeworks.glLoadMatrixf

def glMultMatrixd(*args):
  return _openframeworks.glMultMatrixd(*args)
glMultMatrixd = _openframeworks.glMultMatrixd

def glMultMatrixf(*args):
  return _openframeworks.glMultMatrixf(*args)
glMultMatrixf = _openframeworks.glMultMatrixf

def glRotated(*args):
  return _openframeworks.glRotated(*args)
glRotated = _openframeworks.glRotated

def glRotatef(*args):
  return _openframeworks.glRotatef(*args)
glRotatef = _openframeworks.glRotatef

def glScaled(*args):
  return _openframeworks.glScaled(*args)
glScaled = _openframeworks.glScaled

def glScalef(*args):
  return _openframeworks.glScalef(*args)
glScalef = _openframeworks.glScalef

def glTranslated(*args):
  return _openframeworks.glTranslated(*args)
glTranslated = _openframeworks.glTranslated

def glTranslatef(*args):
  return _openframeworks.glTranslatef(*args)
glTranslatef = _openframeworks.glTranslatef

def glIsList(*args):
  return _openframeworks.glIsList(*args)
glIsList = _openframeworks.glIsList

def glDeleteLists(*args):
  return _openframeworks.glDeleteLists(*args)
glDeleteLists = _openframeworks.glDeleteLists

def glGenLists(*args):
  return _openframeworks.glGenLists(*args)
glGenLists = _openframeworks.glGenLists

def glNewList(*args):
  return _openframeworks.glNewList(*args)
glNewList = _openframeworks.glNewList

def glEndList():
  return _openframeworks.glEndList()
glEndList = _openframeworks.glEndList

def glCallList(*args):
  return _openframeworks.glCallList(*args)
glCallList = _openframeworks.glCallList

def glCallLists(*args):
  return _openframeworks.glCallLists(*args)
glCallLists = _openframeworks.glCallLists

def glListBase(*args):
  return _openframeworks.glListBase(*args)
glListBase = _openframeworks.glListBase

def glBegin(*args):
  return _openframeworks.glBegin(*args)
glBegin = _openframeworks.glBegin

def glEnd():
  return _openframeworks.glEnd()
glEnd = _openframeworks.glEnd

def glVertex2d(*args):
  return _openframeworks.glVertex2d(*args)
glVertex2d = _openframeworks.glVertex2d

def glVertex2f(*args):
  return _openframeworks.glVertex2f(*args)
glVertex2f = _openframeworks.glVertex2f

def glVertex2i(*args):
  return _openframeworks.glVertex2i(*args)
glVertex2i = _openframeworks.glVertex2i

def glVertex2s(*args):
  return _openframeworks.glVertex2s(*args)
glVertex2s = _openframeworks.glVertex2s

def glVertex3d(*args):
  return _openframeworks.glVertex3d(*args)
glVertex3d = _openframeworks.glVertex3d

def glVertex3f(*args):
  return _openframeworks.glVertex3f(*args)
glVertex3f = _openframeworks.glVertex3f

def glVertex3i(*args):
  return _openframeworks.glVertex3i(*args)
glVertex3i = _openframeworks.glVertex3i

def glVertex3s(*args):
  return _openframeworks.glVertex3s(*args)
glVertex3s = _openframeworks.glVertex3s

def glVertex4d(*args):
  return _openframeworks.glVertex4d(*args)
glVertex4d = _openframeworks.glVertex4d

def glVertex4f(*args):
  return _openframeworks.glVertex4f(*args)
glVertex4f = _openframeworks.glVertex4f

def glVertex4i(*args):
  return _openframeworks.glVertex4i(*args)
glVertex4i = _openframeworks.glVertex4i

def glVertex4s(*args):
  return _openframeworks.glVertex4s(*args)
glVertex4s = _openframeworks.glVertex4s

def glVertex2dv(*args):
  return _openframeworks.glVertex2dv(*args)
glVertex2dv = _openframeworks.glVertex2dv

def glVertex2fv(*args):
  return _openframeworks.glVertex2fv(*args)
glVertex2fv = _openframeworks.glVertex2fv

def glVertex2iv(*args):
  return _openframeworks.glVertex2iv(*args)
glVertex2iv = _openframeworks.glVertex2iv

def glVertex2sv(*args):
  return _openframeworks.glVertex2sv(*args)
glVertex2sv = _openframeworks.glVertex2sv

def glVertex3dv(*args):
  return _openframeworks.glVertex3dv(*args)
glVertex3dv = _openframeworks.glVertex3dv

def glVertex3fv(*args):
  return _openframeworks.glVertex3fv(*args)
glVertex3fv = _openframeworks.glVertex3fv

def glVertex3iv(*args):
  return _openframeworks.glVertex3iv(*args)
glVertex3iv = _openframeworks.glVertex3iv

def glVertex3sv(*args):
  return _openframeworks.glVertex3sv(*args)
glVertex3sv = _openframeworks.glVertex3sv

def glVertex4dv(*args):
  return _openframeworks.glVertex4dv(*args)
glVertex4dv = _openframeworks.glVertex4dv

def glVertex4fv(*args):
  return _openframeworks.glVertex4fv(*args)
glVertex4fv = _openframeworks.glVertex4fv

def glVertex4iv(*args):
  return _openframeworks.glVertex4iv(*args)
glVertex4iv = _openframeworks.glVertex4iv

def glVertex4sv(*args):
  return _openframeworks.glVertex4sv(*args)
glVertex4sv = _openframeworks.glVertex4sv

def glNormal3b(*args):
  return _openframeworks.glNormal3b(*args)
glNormal3b = _openframeworks.glNormal3b

def glNormal3d(*args):
  return _openframeworks.glNormal3d(*args)
glNormal3d = _openframeworks.glNormal3d

def glNormal3f(*args):
  return _openframeworks.glNormal3f(*args)
glNormal3f = _openframeworks.glNormal3f

def glNormal3i(*args):
  return _openframeworks.glNormal3i(*args)
glNormal3i = _openframeworks.glNormal3i

def glNormal3s(*args):
  return _openframeworks.glNormal3s(*args)
glNormal3s = _openframeworks.glNormal3s

def glNormal3bv(*args):
  return _openframeworks.glNormal3bv(*args)
glNormal3bv = _openframeworks.glNormal3bv

def glNormal3dv(*args):
  return _openframeworks.glNormal3dv(*args)
glNormal3dv = _openframeworks.glNormal3dv

def glNormal3fv(*args):
  return _openframeworks.glNormal3fv(*args)
glNormal3fv = _openframeworks.glNormal3fv

def glNormal3iv(*args):
  return _openframeworks.glNormal3iv(*args)
glNormal3iv = _openframeworks.glNormal3iv

def glNormal3sv(*args):
  return _openframeworks.glNormal3sv(*args)
glNormal3sv = _openframeworks.glNormal3sv

def glIndexd(*args):
  return _openframeworks.glIndexd(*args)
glIndexd = _openframeworks.glIndexd

def glIndexf(*args):
  return _openframeworks.glIndexf(*args)
glIndexf = _openframeworks.glIndexf

def glIndexi(*args):
  return _openframeworks.glIndexi(*args)
glIndexi = _openframeworks.glIndexi

def glIndexs(*args):
  return _openframeworks.glIndexs(*args)
glIndexs = _openframeworks.glIndexs

def glIndexub(*args):
  return _openframeworks.glIndexub(*args)
glIndexub = _openframeworks.glIndexub

def glIndexdv(*args):
  return _openframeworks.glIndexdv(*args)
glIndexdv = _openframeworks.glIndexdv

def glIndexfv(*args):
  return _openframeworks.glIndexfv(*args)
glIndexfv = _openframeworks.glIndexfv

def glIndexiv(*args):
  return _openframeworks.glIndexiv(*args)
glIndexiv = _openframeworks.glIndexiv

def glIndexsv(*args):
  return _openframeworks.glIndexsv(*args)
glIndexsv = _openframeworks.glIndexsv

def glIndexubv(*args):
  return _openframeworks.glIndexubv(*args)
glIndexubv = _openframeworks.glIndexubv

def glColor3b(*args):
  return _openframeworks.glColor3b(*args)
glColor3b = _openframeworks.glColor3b

def glColor3d(*args):
  return _openframeworks.glColor3d(*args)
glColor3d = _openframeworks.glColor3d

def glColor3f(*args):
  return _openframeworks.glColor3f(*args)
glColor3f = _openframeworks.glColor3f

def glColor3i(*args):
  return _openframeworks.glColor3i(*args)
glColor3i = _openframeworks.glColor3i

def glColor3s(*args):
  return _openframeworks.glColor3s(*args)
glColor3s = _openframeworks.glColor3s

def glColor3ub(*args):
  return _openframeworks.glColor3ub(*args)
glColor3ub = _openframeworks.glColor3ub

def glColor3ui(*args):
  return _openframeworks.glColor3ui(*args)
glColor3ui = _openframeworks.glColor3ui

def glColor3us(*args):
  return _openframeworks.glColor3us(*args)
glColor3us = _openframeworks.glColor3us

def glColor4b(*args):
  return _openframeworks.glColor4b(*args)
glColor4b = _openframeworks.glColor4b

def glColor4d(*args):
  return _openframeworks.glColor4d(*args)
glColor4d = _openframeworks.glColor4d

def glColor4f(*args):
  return _openframeworks.glColor4f(*args)
glColor4f = _openframeworks.glColor4f

def glColor4i(*args):
  return _openframeworks.glColor4i(*args)
glColor4i = _openframeworks.glColor4i

def glColor4s(*args):
  return _openframeworks.glColor4s(*args)
glColor4s = _openframeworks.glColor4s

def glColor4ub(*args):
  return _openframeworks.glColor4ub(*args)
glColor4ub = _openframeworks.glColor4ub

def glColor4ui(*args):
  return _openframeworks.glColor4ui(*args)
glColor4ui = _openframeworks.glColor4ui

def glColor4us(*args):
  return _openframeworks.glColor4us(*args)
glColor4us = _openframeworks.glColor4us

def glColor3bv(*args):
  return _openframeworks.glColor3bv(*args)
glColor3bv = _openframeworks.glColor3bv

def glColor3dv(*args):
  return _openframeworks.glColor3dv(*args)
glColor3dv = _openframeworks.glColor3dv

def glColor3fv(*args):
  return _openframeworks.glColor3fv(*args)
glColor3fv = _openframeworks.glColor3fv

def glColor3iv(*args):
  return _openframeworks.glColor3iv(*args)
glColor3iv = _openframeworks.glColor3iv

def glColor3sv(*args):
  return _openframeworks.glColor3sv(*args)
glColor3sv = _openframeworks.glColor3sv

def glColor3ubv(*args):
  return _openframeworks.glColor3ubv(*args)
glColor3ubv = _openframeworks.glColor3ubv

def glColor3uiv(*args):
  return _openframeworks.glColor3uiv(*args)
glColor3uiv = _openframeworks.glColor3uiv

def glColor3usv(*args):
  return _openframeworks.glColor3usv(*args)
glColor3usv = _openframeworks.glColor3usv

def glColor4bv(*args):
  return _openframeworks.glColor4bv(*args)
glColor4bv = _openframeworks.glColor4bv

def glColor4dv(*args):
  return _openframeworks.glColor4dv(*args)
glColor4dv = _openframeworks.glColor4dv

def glColor4fv(*args):
  return _openframeworks.glColor4fv(*args)
glColor4fv = _openframeworks.glColor4fv

def glColor4iv(*args):
  return _openframeworks.glColor4iv(*args)
glColor4iv = _openframeworks.glColor4iv

def glColor4sv(*args):
  return _openframeworks.glColor4sv(*args)
glColor4sv = _openframeworks.glColor4sv

def glColor4ubv(*args):
  return _openframeworks.glColor4ubv(*args)
glColor4ubv = _openframeworks.glColor4ubv

def glColor4uiv(*args):
  return _openframeworks.glColor4uiv(*args)
glColor4uiv = _openframeworks.glColor4uiv

def glColor4usv(*args):
  return _openframeworks.glColor4usv(*args)
glColor4usv = _openframeworks.glColor4usv

def glTexCoord1d(*args):
  return _openframeworks.glTexCoord1d(*args)
glTexCoord1d = _openframeworks.glTexCoord1d

def glTexCoord1f(*args):
  return _openframeworks.glTexCoord1f(*args)
glTexCoord1f = _openframeworks.glTexCoord1f

def glTexCoord1i(*args):
  return _openframeworks.glTexCoord1i(*args)
glTexCoord1i = _openframeworks.glTexCoord1i

def glTexCoord1s(*args):
  return _openframeworks.glTexCoord1s(*args)
glTexCoord1s = _openframeworks.glTexCoord1s

def glTexCoord2d(*args):
  return _openframeworks.glTexCoord2d(*args)
glTexCoord2d = _openframeworks.glTexCoord2d

def glTexCoord2f(*args):
  return _openframeworks.glTexCoord2f(*args)
glTexCoord2f = _openframeworks.glTexCoord2f

def glTexCoord2i(*args):
  return _openframeworks.glTexCoord2i(*args)
glTexCoord2i = _openframeworks.glTexCoord2i

def glTexCoord2s(*args):
  return _openframeworks.glTexCoord2s(*args)
glTexCoord2s = _openframeworks.glTexCoord2s

def glTexCoord3d(*args):
  return _openframeworks.glTexCoord3d(*args)
glTexCoord3d = _openframeworks.glTexCoord3d

def glTexCoord3f(*args):
  return _openframeworks.glTexCoord3f(*args)
glTexCoord3f = _openframeworks.glTexCoord3f

def glTexCoord3i(*args):
  return _openframeworks.glTexCoord3i(*args)
glTexCoord3i = _openframeworks.glTexCoord3i

def glTexCoord3s(*args):
  return _openframeworks.glTexCoord3s(*args)
glTexCoord3s = _openframeworks.glTexCoord3s

def glTexCoord4d(*args):
  return _openframeworks.glTexCoord4d(*args)
glTexCoord4d = _openframeworks.glTexCoord4d

def glTexCoord4f(*args):
  return _openframeworks.glTexCoord4f(*args)
glTexCoord4f = _openframeworks.glTexCoord4f

def glTexCoord4i(*args):
  return _openframeworks.glTexCoord4i(*args)
glTexCoord4i = _openframeworks.glTexCoord4i

def glTexCoord4s(*args):
  return _openframeworks.glTexCoord4s(*args)
glTexCoord4s = _openframeworks.glTexCoord4s

def glTexCoord1dv(*args):
  return _openframeworks.glTexCoord1dv(*args)
glTexCoord1dv = _openframeworks.glTexCoord1dv

def glTexCoord1fv(*args):
  return _openframeworks.glTexCoord1fv(*args)
glTexCoord1fv = _openframeworks.glTexCoord1fv

def glTexCoord1iv(*args):
  return _openframeworks.glTexCoord1iv(*args)
glTexCoord1iv = _openframeworks.glTexCoord1iv

def glTexCoord1sv(*args):
  return _openframeworks.glTexCoord1sv(*args)
glTexCoord1sv = _openframeworks.glTexCoord1sv

def glTexCoord2dv(*args):
  return _openframeworks.glTexCoord2dv(*args)
glTexCoord2dv = _openframeworks.glTexCoord2dv

def glTexCoord2fv(*args):
  return _openframeworks.glTexCoord2fv(*args)
glTexCoord2fv = _openframeworks.glTexCoord2fv

def glTexCoord2iv(*args):
  return _openframeworks.glTexCoord2iv(*args)
glTexCoord2iv = _openframeworks.glTexCoord2iv

def glTexCoord2sv(*args):
  return _openframeworks.glTexCoord2sv(*args)
glTexCoord2sv = _openframeworks.glTexCoord2sv

def glTexCoord3dv(*args):
  return _openframeworks.glTexCoord3dv(*args)
glTexCoord3dv = _openframeworks.glTexCoord3dv

def glTexCoord3fv(*args):
  return _openframeworks.glTexCoord3fv(*args)
glTexCoord3fv = _openframeworks.glTexCoord3fv

def glTexCoord3iv(*args):
  return _openframeworks.glTexCoord3iv(*args)
glTexCoord3iv = _openframeworks.glTexCoord3iv

def glTexCoord3sv(*args):
  return _openframeworks.glTexCoord3sv(*args)
glTexCoord3sv = _openframeworks.glTexCoord3sv

def glTexCoord4dv(*args):
  return _openframeworks.glTexCoord4dv(*args)
glTexCoord4dv = _openframeworks.glTexCoord4dv

def glTexCoord4fv(*args):
  return _openframeworks.glTexCoord4fv(*args)
glTexCoord4fv = _openframeworks.glTexCoord4fv

def glTexCoord4iv(*args):
  return _openframeworks.glTexCoord4iv(*args)
glTexCoord4iv = _openframeworks.glTexCoord4iv

def glTexCoord4sv(*args):
  return _openframeworks.glTexCoord4sv(*args)
glTexCoord4sv = _openframeworks.glTexCoord4sv

def glRasterPos2d(*args):
  return _openframeworks.glRasterPos2d(*args)
glRasterPos2d = _openframeworks.glRasterPos2d

def glRasterPos2f(*args):
  return _openframeworks.glRasterPos2f(*args)
glRasterPos2f = _openframeworks.glRasterPos2f

def glRasterPos2i(*args):
  return _openframeworks.glRasterPos2i(*args)
glRasterPos2i = _openframeworks.glRasterPos2i

def glRasterPos2s(*args):
  return _openframeworks.glRasterPos2s(*args)
glRasterPos2s = _openframeworks.glRasterPos2s

def glRasterPos3d(*args):
  return _openframeworks.glRasterPos3d(*args)
glRasterPos3d = _openframeworks.glRasterPos3d

def glRasterPos3f(*args):
  return _openframeworks.glRasterPos3f(*args)
glRasterPos3f = _openframeworks.glRasterPos3f

def glRasterPos3i(*args):
  return _openframeworks.glRasterPos3i(*args)
glRasterPos3i = _openframeworks.glRasterPos3i

def glRasterPos3s(*args):
  return _openframeworks.glRasterPos3s(*args)
glRasterPos3s = _openframeworks.glRasterPos3s

def glRasterPos4d(*args):
  return _openframeworks.glRasterPos4d(*args)
glRasterPos4d = _openframeworks.glRasterPos4d

def glRasterPos4f(*args):
  return _openframeworks.glRasterPos4f(*args)
glRasterPos4f = _openframeworks.glRasterPos4f

def glRasterPos4i(*args):
  return _openframeworks.glRasterPos4i(*args)
glRasterPos4i = _openframeworks.glRasterPos4i

def glRasterPos4s(*args):
  return _openframeworks.glRasterPos4s(*args)
glRasterPos4s = _openframeworks.glRasterPos4s

def glRasterPos2dv(*args):
  return _openframeworks.glRasterPos2dv(*args)
glRasterPos2dv = _openframeworks.glRasterPos2dv

def glRasterPos2fv(*args):
  return _openframeworks.glRasterPos2fv(*args)
glRasterPos2fv = _openframeworks.glRasterPos2fv

def glRasterPos2iv(*args):
  return _openframeworks.glRasterPos2iv(*args)
glRasterPos2iv = _openframeworks.glRasterPos2iv

def glRasterPos2sv(*args):
  return _openframeworks.glRasterPos2sv(*args)
glRasterPos2sv = _openframeworks.glRasterPos2sv

def glRasterPos3dv(*args):
  return _openframeworks.glRasterPos3dv(*args)
glRasterPos3dv = _openframeworks.glRasterPos3dv

def glRasterPos3fv(*args):
  return _openframeworks.glRasterPos3fv(*args)
glRasterPos3fv = _openframeworks.glRasterPos3fv

def glRasterPos3iv(*args):
  return _openframeworks.glRasterPos3iv(*args)
glRasterPos3iv = _openframeworks.glRasterPos3iv

def glRasterPos3sv(*args):
  return _openframeworks.glRasterPos3sv(*args)
glRasterPos3sv = _openframeworks.glRasterPos3sv

def glRasterPos4dv(*args):
  return _openframeworks.glRasterPos4dv(*args)
glRasterPos4dv = _openframeworks.glRasterPos4dv

def glRasterPos4fv(*args):
  return _openframeworks.glRasterPos4fv(*args)
glRasterPos4fv = _openframeworks.glRasterPos4fv

def glRasterPos4iv(*args):
  return _openframeworks.glRasterPos4iv(*args)
glRasterPos4iv = _openframeworks.glRasterPos4iv

def glRasterPos4sv(*args):
  return _openframeworks.glRasterPos4sv(*args)
glRasterPos4sv = _openframeworks.glRasterPos4sv

def glRectd(*args):
  return _openframeworks.glRectd(*args)
glRectd = _openframeworks.glRectd

def glRectf(*args):
  return _openframeworks.glRectf(*args)
glRectf = _openframeworks.glRectf

def glRecti(*args):
  return _openframeworks.glRecti(*args)
glRecti = _openframeworks.glRecti

def glRects(*args):
  return _openframeworks.glRects(*args)
glRects = _openframeworks.glRects

def glRectdv(*args):
  return _openframeworks.glRectdv(*args)
glRectdv = _openframeworks.glRectdv

def glRectfv(*args):
  return _openframeworks.glRectfv(*args)
glRectfv = _openframeworks.glRectfv

def glRectiv(*args):
  return _openframeworks.glRectiv(*args)
glRectiv = _openframeworks.glRectiv

def glRectsv(*args):
  return _openframeworks.glRectsv(*args)
glRectsv = _openframeworks.glRectsv

def glShadeModel(*args):
  return _openframeworks.glShadeModel(*args)
glShadeModel = _openframeworks.glShadeModel

def glLightf(*args):
  return _openframeworks.glLightf(*args)
glLightf = _openframeworks.glLightf

def glLighti(*args):
  return _openframeworks.glLighti(*args)
glLighti = _openframeworks.glLighti

def glLightfv(*args):
  return _openframeworks.glLightfv(*args)
glLightfv = _openframeworks.glLightfv

def glLightiv(*args):
  return _openframeworks.glLightiv(*args)
glLightiv = _openframeworks.glLightiv

def glGetLightfv(*args):
  return _openframeworks.glGetLightfv(*args)
glGetLightfv = _openframeworks.glGetLightfv

def glGetLightiv(*args):
  return _openframeworks.glGetLightiv(*args)
glGetLightiv = _openframeworks.glGetLightiv

def glLightModelf(*args):
  return _openframeworks.glLightModelf(*args)
glLightModelf = _openframeworks.glLightModelf

def glLightModeli(*args):
  return _openframeworks.glLightModeli(*args)
glLightModeli = _openframeworks.glLightModeli

def glLightModelfv(*args):
  return _openframeworks.glLightModelfv(*args)
glLightModelfv = _openframeworks.glLightModelfv

def glLightModeliv(*args):
  return _openframeworks.glLightModeliv(*args)
glLightModeliv = _openframeworks.glLightModeliv

def glMaterialf(*args):
  return _openframeworks.glMaterialf(*args)
glMaterialf = _openframeworks.glMaterialf

def glMateriali(*args):
  return _openframeworks.glMateriali(*args)
glMateriali = _openframeworks.glMateriali

def glMaterialfv(*args):
  return _openframeworks.glMaterialfv(*args)
glMaterialfv = _openframeworks.glMaterialfv

def glMaterialiv(*args):
  return _openframeworks.glMaterialiv(*args)
glMaterialiv = _openframeworks.glMaterialiv

def glGetMaterialfv(*args):
  return _openframeworks.glGetMaterialfv(*args)
glGetMaterialfv = _openframeworks.glGetMaterialfv

def glGetMaterialiv(*args):
  return _openframeworks.glGetMaterialiv(*args)
glGetMaterialiv = _openframeworks.glGetMaterialiv

def glColorMaterial(*args):
  return _openframeworks.glColorMaterial(*args)
glColorMaterial = _openframeworks.glColorMaterial

def glPixelZoom(*args):
  return _openframeworks.glPixelZoom(*args)
glPixelZoom = _openframeworks.glPixelZoom

def glPixelStoref(*args):
  return _openframeworks.glPixelStoref(*args)
glPixelStoref = _openframeworks.glPixelStoref

def glPixelStorei(*args):
  return _openframeworks.glPixelStorei(*args)
glPixelStorei = _openframeworks.glPixelStorei

def glPixelTransferf(*args):
  return _openframeworks.glPixelTransferf(*args)
glPixelTransferf = _openframeworks.glPixelTransferf

def glPixelTransferi(*args):
  return _openframeworks.glPixelTransferi(*args)
glPixelTransferi = _openframeworks.glPixelTransferi

def glPixelMapfv(*args):
  return _openframeworks.glPixelMapfv(*args)
glPixelMapfv = _openframeworks.glPixelMapfv

def glPixelMapuiv(*args):
  return _openframeworks.glPixelMapuiv(*args)
glPixelMapuiv = _openframeworks.glPixelMapuiv

def glPixelMapusv(*args):
  return _openframeworks.glPixelMapusv(*args)
glPixelMapusv = _openframeworks.glPixelMapusv

def glGetPixelMapfv(*args):
  return _openframeworks.glGetPixelMapfv(*args)
glGetPixelMapfv = _openframeworks.glGetPixelMapfv

def glGetPixelMapuiv(*args):
  return _openframeworks.glGetPixelMapuiv(*args)
glGetPixelMapuiv = _openframeworks.glGetPixelMapuiv

def glGetPixelMapusv(*args):
  return _openframeworks.glGetPixelMapusv(*args)
glGetPixelMapusv = _openframeworks.glGetPixelMapusv

def glBitmap(*args):
  return _openframeworks.glBitmap(*args)
glBitmap = _openframeworks.glBitmap

def glReadPixels(*args):
  return _openframeworks.glReadPixels(*args)
glReadPixels = _openframeworks.glReadPixels

def glDrawPixels(*args):
  return _openframeworks.glDrawPixels(*args)
glDrawPixels = _openframeworks.glDrawPixels

def glCopyPixels(*args):
  return _openframeworks.glCopyPixels(*args)
glCopyPixels = _openframeworks.glCopyPixels

def glStencilFunc(*args):
  return _openframeworks.glStencilFunc(*args)
glStencilFunc = _openframeworks.glStencilFunc

def glStencilMask(*args):
  return _openframeworks.glStencilMask(*args)
glStencilMask = _openframeworks.glStencilMask

def glStencilOp(*args):
  return _openframeworks.glStencilOp(*args)
glStencilOp = _openframeworks.glStencilOp

def glClearStencil(*args):
  return _openframeworks.glClearStencil(*args)
glClearStencil = _openframeworks.glClearStencil

def glTexGend(*args):
  return _openframeworks.glTexGend(*args)
glTexGend = _openframeworks.glTexGend

def glTexGenf(*args):
  return _openframeworks.glTexGenf(*args)
glTexGenf = _openframeworks.glTexGenf

def glTexGeni(*args):
  return _openframeworks.glTexGeni(*args)
glTexGeni = _openframeworks.glTexGeni

def glTexGendv(*args):
  return _openframeworks.glTexGendv(*args)
glTexGendv = _openframeworks.glTexGendv

def glTexGenfv(*args):
  return _openframeworks.glTexGenfv(*args)
glTexGenfv = _openframeworks.glTexGenfv

def glTexGeniv(*args):
  return _openframeworks.glTexGeniv(*args)
glTexGeniv = _openframeworks.glTexGeniv

def glGetTexGendv(*args):
  return _openframeworks.glGetTexGendv(*args)
glGetTexGendv = _openframeworks.glGetTexGendv

def glGetTexGenfv(*args):
  return _openframeworks.glGetTexGenfv(*args)
glGetTexGenfv = _openframeworks.glGetTexGenfv

def glGetTexGeniv(*args):
  return _openframeworks.glGetTexGeniv(*args)
glGetTexGeniv = _openframeworks.glGetTexGeniv

def glTexEnvf(*args):
  return _openframeworks.glTexEnvf(*args)
glTexEnvf = _openframeworks.glTexEnvf

def glTexEnvi(*args):
  return _openframeworks.glTexEnvi(*args)
glTexEnvi = _openframeworks.glTexEnvi

def glTexEnvfv(*args):
  return _openframeworks.glTexEnvfv(*args)
glTexEnvfv = _openframeworks.glTexEnvfv

def glTexEnviv(*args):
  return _openframeworks.glTexEnviv(*args)
glTexEnviv = _openframeworks.glTexEnviv

def glGetTexEnvfv(*args):
  return _openframeworks.glGetTexEnvfv(*args)
glGetTexEnvfv = _openframeworks.glGetTexEnvfv

def glGetTexEnviv(*args):
  return _openframeworks.glGetTexEnviv(*args)
glGetTexEnviv = _openframeworks.glGetTexEnviv

def glTexParameterf(*args):
  return _openframeworks.glTexParameterf(*args)
glTexParameterf = _openframeworks.glTexParameterf

def glTexParameteri(*args):
  return _openframeworks.glTexParameteri(*args)
glTexParameteri = _openframeworks.glTexParameteri

def glTexParameterfv(*args):
  return _openframeworks.glTexParameterfv(*args)
glTexParameterfv = _openframeworks.glTexParameterfv

def glTexParameteriv(*args):
  return _openframeworks.glTexParameteriv(*args)
glTexParameteriv = _openframeworks.glTexParameteriv

def glGetTexParameterfv(*args):
  return _openframeworks.glGetTexParameterfv(*args)
glGetTexParameterfv = _openframeworks.glGetTexParameterfv

def glGetTexParameteriv(*args):
  return _openframeworks.glGetTexParameteriv(*args)
glGetTexParameteriv = _openframeworks.glGetTexParameteriv

def glGetTexLevelParameterfv(*args):
  return _openframeworks.glGetTexLevelParameterfv(*args)
glGetTexLevelParameterfv = _openframeworks.glGetTexLevelParameterfv

def glGetTexLevelParameteriv(*args):
  return _openframeworks.glGetTexLevelParameteriv(*args)
glGetTexLevelParameteriv = _openframeworks.glGetTexLevelParameteriv

def glTexImage1D(*args):
  return _openframeworks.glTexImage1D(*args)
glTexImage1D = _openframeworks.glTexImage1D

def glTexImage2D(*args):
  return _openframeworks.glTexImage2D(*args)
glTexImage2D = _openframeworks.glTexImage2D

def glGetTexImage(*args):
  return _openframeworks.glGetTexImage(*args)
glGetTexImage = _openframeworks.glGetTexImage

def glMap1d(*args):
  return _openframeworks.glMap1d(*args)
glMap1d = _openframeworks.glMap1d

def glMap1f(*args):
  return _openframeworks.glMap1f(*args)
glMap1f = _openframeworks.glMap1f

def glMap2d(*args):
  return _openframeworks.glMap2d(*args)
glMap2d = _openframeworks.glMap2d

def glMap2f(*args):
  return _openframeworks.glMap2f(*args)
glMap2f = _openframeworks.glMap2f

def glGetMapdv(*args):
  return _openframeworks.glGetMapdv(*args)
glGetMapdv = _openframeworks.glGetMapdv

def glGetMapfv(*args):
  return _openframeworks.glGetMapfv(*args)
glGetMapfv = _openframeworks.glGetMapfv

def glGetMapiv(*args):
  return _openframeworks.glGetMapiv(*args)
glGetMapiv = _openframeworks.glGetMapiv

def glEvalCoord1d(*args):
  return _openframeworks.glEvalCoord1d(*args)
glEvalCoord1d = _openframeworks.glEvalCoord1d

def glEvalCoord1f(*args):
  return _openframeworks.glEvalCoord1f(*args)
glEvalCoord1f = _openframeworks.glEvalCoord1f

def glEvalCoord1dv(*args):
  return _openframeworks.glEvalCoord1dv(*args)
glEvalCoord1dv = _openframeworks.glEvalCoord1dv

def glEvalCoord1fv(*args):
  return _openframeworks.glEvalCoord1fv(*args)
glEvalCoord1fv = _openframeworks.glEvalCoord1fv

def glEvalCoord2d(*args):
  return _openframeworks.glEvalCoord2d(*args)
glEvalCoord2d = _openframeworks.glEvalCoord2d

def glEvalCoord2f(*args):
  return _openframeworks.glEvalCoord2f(*args)
glEvalCoord2f = _openframeworks.glEvalCoord2f

def glEvalCoord2dv(*args):
  return _openframeworks.glEvalCoord2dv(*args)
glEvalCoord2dv = _openframeworks.glEvalCoord2dv

def glEvalCoord2fv(*args):
  return _openframeworks.glEvalCoord2fv(*args)
glEvalCoord2fv = _openframeworks.glEvalCoord2fv

def glMapGrid1d(*args):
  return _openframeworks.glMapGrid1d(*args)
glMapGrid1d = _openframeworks.glMapGrid1d

def glMapGrid1f(*args):
  return _openframeworks.glMapGrid1f(*args)
glMapGrid1f = _openframeworks.glMapGrid1f

def glMapGrid2d(*args):
  return _openframeworks.glMapGrid2d(*args)
glMapGrid2d = _openframeworks.glMapGrid2d

def glMapGrid2f(*args):
  return _openframeworks.glMapGrid2f(*args)
glMapGrid2f = _openframeworks.glMapGrid2f

def glEvalPoint1(*args):
  return _openframeworks.glEvalPoint1(*args)
glEvalPoint1 = _openframeworks.glEvalPoint1

def glEvalPoint2(*args):
  return _openframeworks.glEvalPoint2(*args)
glEvalPoint2 = _openframeworks.glEvalPoint2

def glEvalMesh1(*args):
  return _openframeworks.glEvalMesh1(*args)
glEvalMesh1 = _openframeworks.glEvalMesh1

def glEvalMesh2(*args):
  return _openframeworks.glEvalMesh2(*args)
glEvalMesh2 = _openframeworks.glEvalMesh2

def glFogf(*args):
  return _openframeworks.glFogf(*args)
glFogf = _openframeworks.glFogf

def glFogi(*args):
  return _openframeworks.glFogi(*args)
glFogi = _openframeworks.glFogi

def glFogfv(*args):
  return _openframeworks.glFogfv(*args)
glFogfv = _openframeworks.glFogfv

def glFogiv(*args):
  return _openframeworks.glFogiv(*args)
glFogiv = _openframeworks.glFogiv

def glFeedbackBuffer(*args):
  return _openframeworks.glFeedbackBuffer(*args)
glFeedbackBuffer = _openframeworks.glFeedbackBuffer

def glPassThrough(*args):
  return _openframeworks.glPassThrough(*args)
glPassThrough = _openframeworks.glPassThrough

def glSelectBuffer(*args):
  return _openframeworks.glSelectBuffer(*args)
glSelectBuffer = _openframeworks.glSelectBuffer

def glInitNames():
  return _openframeworks.glInitNames()
glInitNames = _openframeworks.glInitNames

def glLoadName(*args):
  return _openframeworks.glLoadName(*args)
glLoadName = _openframeworks.glLoadName

def glPushName(*args):
  return _openframeworks.glPushName(*args)
glPushName = _openframeworks.glPushName

def glPopName():
  return _openframeworks.glPopName()
glPopName = _openframeworks.glPopName

def glGenTextures(*args):
  return _openframeworks.glGenTextures(*args)
glGenTextures = _openframeworks.glGenTextures

def glDeleteTextures(*args):
  return _openframeworks.glDeleteTextures(*args)
glDeleteTextures = _openframeworks.glDeleteTextures

def glBindTexture(*args):
  return _openframeworks.glBindTexture(*args)
glBindTexture = _openframeworks.glBindTexture

def glPrioritizeTextures(*args):
  return _openframeworks.glPrioritizeTextures(*args)
glPrioritizeTextures = _openframeworks.glPrioritizeTextures

def glAreTexturesResident(*args):
  return _openframeworks.glAreTexturesResident(*args)
glAreTexturesResident = _openframeworks.glAreTexturesResident

def glIsTexture(*args):
  return _openframeworks.glIsTexture(*args)
glIsTexture = _openframeworks.glIsTexture

def glTexSubImage1D(*args):
  return _openframeworks.glTexSubImage1D(*args)
glTexSubImage1D = _openframeworks.glTexSubImage1D

def glTexSubImage2D(*args):
  return _openframeworks.glTexSubImage2D(*args)
glTexSubImage2D = _openframeworks.glTexSubImage2D

def glCopyTexImage1D(*args):
  return _openframeworks.glCopyTexImage1D(*args)
glCopyTexImage1D = _openframeworks.glCopyTexImage1D

def glCopyTexImage2D(*args):
  return _openframeworks.glCopyTexImage2D(*args)
glCopyTexImage2D = _openframeworks.glCopyTexImage2D

def glCopyTexSubImage1D(*args):
  return _openframeworks.glCopyTexSubImage1D(*args)
glCopyTexSubImage1D = _openframeworks.glCopyTexSubImage1D

def glCopyTexSubImage2D(*args):
  return _openframeworks.glCopyTexSubImage2D(*args)
glCopyTexSubImage2D = _openframeworks.glCopyTexSubImage2D

def glVertexPointer(*args):
  return _openframeworks.glVertexPointer(*args)
glVertexPointer = _openframeworks.glVertexPointer

def glNormalPointer(*args):
  return _openframeworks.glNormalPointer(*args)
glNormalPointer = _openframeworks.glNormalPointer

def glColorPointer(*args):
  return _openframeworks.glColorPointer(*args)
glColorPointer = _openframeworks.glColorPointer

def glIndexPointer(*args):
  return _openframeworks.glIndexPointer(*args)
glIndexPointer = _openframeworks.glIndexPointer

def glTexCoordPointer(*args):
  return _openframeworks.glTexCoordPointer(*args)
glTexCoordPointer = _openframeworks.glTexCoordPointer

def glEdgeFlagPointer(*args):
  return _openframeworks.glEdgeFlagPointer(*args)
glEdgeFlagPointer = _openframeworks.glEdgeFlagPointer

def glGetPointerv(*args):
  return _openframeworks.glGetPointerv(*args)
glGetPointerv = _openframeworks.glGetPointerv

def glArrayElement(*args):
  return _openframeworks.glArrayElement(*args)
glArrayElement = _openframeworks.glArrayElement

def glDrawArrays(*args):
  return _openframeworks.glDrawArrays(*args)
glDrawArrays = _openframeworks.glDrawArrays

def glDrawElements(*args):
  return _openframeworks.glDrawElements(*args)
glDrawElements = _openframeworks.glDrawElements

def glInterleavedArrays(*args):
  return _openframeworks.glInterleavedArrays(*args)
glInterleavedArrays = _openframeworks.glInterleavedArrays
class ofBaseApp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseApp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseApp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofBaseApp:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseApp(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBaseApp
    __del__ = lambda self : None;
    def setup(self): return _openframeworks.ofBaseApp_setup(self)
    def update(self): return _openframeworks.ofBaseApp_update(self)
    def draw(self): return _openframeworks.ofBaseApp_draw(self)
    def exit(self): return _openframeworks.ofBaseApp_exit(self)
    def windowResized(self, *args): return _openframeworks.ofBaseApp_windowResized(self, *args)
    def keyPressed(self, *args): return _openframeworks.ofBaseApp_keyPressed(self, *args)
    def keyReleased(self, *args): return _openframeworks.ofBaseApp_keyReleased(self, *args)
    def mouseMoved(self, *args): return _openframeworks.ofBaseApp_mouseMoved(self, *args)
    def mouseDragged(self, *args): return _openframeworks.ofBaseApp_mouseDragged(self, *args)
    def mousePressed(self, *args): return _openframeworks.ofBaseApp_mousePressed(self, *args)
    def mouseReleased(self, *args): return _openframeworks.ofBaseApp_mouseReleased(self, *args)
    def audioReceived(self, *args): return _openframeworks.ofBaseApp_audioReceived(self, *args)
    def audioRequested(self, *args): return _openframeworks.ofBaseApp_audioRequested(self, *args)
    __swig_setmethods__["mouseX"] = _openframeworks.ofBaseApp_mouseX_set
    __swig_getmethods__["mouseX"] = _openframeworks.ofBaseApp_mouseX_get
    if _newclass:mouseX = _swig_property(_openframeworks.ofBaseApp_mouseX_get, _openframeworks.ofBaseApp_mouseX_set)
    __swig_setmethods__["mouseY"] = _openframeworks.ofBaseApp_mouseY_set
    __swig_getmethods__["mouseY"] = _openframeworks.ofBaseApp_mouseY_get
    if _newclass:mouseY = _swig_property(_openframeworks.ofBaseApp_mouseY_get, _openframeworks.ofBaseApp_mouseY_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseApp(self)
        return weakref_proxy(self)
ofBaseApp_swigregister = _openframeworks.ofBaseApp_swigregister
ofBaseApp_swigregister(ofBaseApp)

def ofArrayRead(*args):
  return _openframeworks.ofArrayRead(*args)
ofArrayRead = _openframeworks.ofArrayRead

def ofArrayWrite(*args):
  return _openframeworks.ofArrayWrite(*args)
ofArrayWrite = _openframeworks.ofArrayWrite

OF_VERSION = _openframeworks.OF_VERSION
OF_LOOP_NONE = _openframeworks.OF_LOOP_NONE
OF_LOOP_PALINDROME = _openframeworks.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _openframeworks.OF_LOOP_NORMAL
_WIN32_WINNT = _openframeworks._WIN32_WINNT
GL_BGR_EXT = _openframeworks.GL_BGR_EXT
OF_LOG_VERBOSE = _openframeworks.OF_LOG_VERBOSE
OF_LOG_NOTICE = _openframeworks.OF_LOG_NOTICE
OF_LOG_WARNING = _openframeworks.OF_LOG_WARNING
OF_LOG_ERROR = _openframeworks.OF_LOG_ERROR
OF_LOG_FATAL_ERROR = _openframeworks.OF_LOG_FATAL_ERROR
OF_LOG_SILENT = _openframeworks.OF_LOG_SILENT
OF_SERIAL_NO_DATA = _openframeworks.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _openframeworks.OF_SERIAL_ERROR
PI = _openframeworks.PI
TWO_PI = _openframeworks.TWO_PI
M_TWO_PI = _openframeworks.M_TWO_PI
FOUR_PI = _openframeworks.FOUR_PI
HALF_PI = _openframeworks.HALF_PI
DEG_TO_RAD = _openframeworks.DEG_TO_RAD
RAD_TO_DEG = _openframeworks.RAD_TO_DEG
OF_FILLED = _openframeworks.OF_FILLED
OF_OUTLINE = _openframeworks.OF_OUTLINE
OF_WINDOW = _openframeworks.OF_WINDOW
OF_FULLSCREEN = _openframeworks.OF_FULLSCREEN
OF_GAME_MODE = _openframeworks.OF_GAME_MODE
OF_RECTMODE_CORNER = _openframeworks.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _openframeworks.OF_RECTMODE_CENTER
OF_IMAGE_GRAYSCALE = _openframeworks.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _openframeworks.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _openframeworks.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _openframeworks.OF_IMAGE_UNDEFINED
OF_MAX_STYLE_HISTORY = _openframeworks.OF_MAX_STYLE_HISTORY
OF_MAX_CIRCLE_PTS = _openframeworks.OF_MAX_CIRCLE_PTS
OF_POLY_WINDING_ODD = _openframeworks.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _openframeworks.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _openframeworks.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _openframeworks.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _openframeworks.OF_POLY_WINDING_ABS_GEQ_TWO
OF_KEY_MODIFIER = _openframeworks.OF_KEY_MODIFIER
OF_KEY_RETURN = _openframeworks.OF_KEY_RETURN
OF_KEY_ESC = _openframeworks.OF_KEY_ESC
OF_KEY_BACKSPACE = _openframeworks.OF_KEY_BACKSPACE
OF_KEY_DEL = _openframeworks.OF_KEY_DEL
OF_KEY_F1 = _openframeworks.OF_KEY_F1
OF_KEY_F2 = _openframeworks.OF_KEY_F2
OF_KEY_F3 = _openframeworks.OF_KEY_F3
OF_KEY_F4 = _openframeworks.OF_KEY_F4
OF_KEY_F5 = _openframeworks.OF_KEY_F5
OF_KEY_F6 = _openframeworks.OF_KEY_F6
OF_KEY_F7 = _openframeworks.OF_KEY_F7
OF_KEY_F8 = _openframeworks.OF_KEY_F8
OF_KEY_F9 = _openframeworks.OF_KEY_F9
OF_KEY_F10 = _openframeworks.OF_KEY_F10
OF_KEY_F11 = _openframeworks.OF_KEY_F11
OF_KEY_F12 = _openframeworks.OF_KEY_F12
OF_KEY_LEFT = _openframeworks.OF_KEY_LEFT
OF_KEY_UP = _openframeworks.OF_KEY_UP
OF_KEY_RIGHT = _openframeworks.OF_KEY_RIGHT
OF_KEY_DOWN = _openframeworks.OF_KEY_DOWN
OF_KEY_PAGE_UP = _openframeworks.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _openframeworks.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _openframeworks.OF_KEY_HOME
OF_KEY_END = _openframeworks.OF_KEY_END
OF_KEY_INSERT = _openframeworks.OF_KEY_INSERT
OF_CONSOLE_COLOR_BLACK = _openframeworks.OF_CONSOLE_COLOR_BLACK
class ofPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofPoint
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == ofPoint:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofPoint(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofPoint_set(self, *args)
    def __neg__(self): return _openframeworks.ofPoint___neg__(self)
    def __eq__(self, *args): return _openframeworks.ofPoint___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofPoint___ne__(self, *args)
    def __add__(self, *args): return _openframeworks.ofPoint___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofPoint___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofPoint___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofPoint___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofPoint___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofPoint___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofPoint___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofPoint___idiv__(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofPoint(self)
        return weakref_proxy(self)
ofPoint_swigregister = _openframeworks.ofPoint_swigregister
ofPoint_swigregister(ofPoint)

class ofRectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofRectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ofRectangle:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofRectangle(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofRectangle
    __del__ = lambda self : None;
    __swig_setmethods__["x"] = _openframeworks.ofRectangle_x_set
    __swig_getmethods__["x"] = _openframeworks.ofRectangle_x_get
    if _newclass:x = _swig_property(_openframeworks.ofRectangle_x_get, _openframeworks.ofRectangle_x_set)
    __swig_setmethods__["y"] = _openframeworks.ofRectangle_y_set
    __swig_getmethods__["y"] = _openframeworks.ofRectangle_y_get
    if _newclass:y = _swig_property(_openframeworks.ofRectangle_y_get, _openframeworks.ofRectangle_y_set)
    __swig_setmethods__["width"] = _openframeworks.ofRectangle_width_set
    __swig_getmethods__["width"] = _openframeworks.ofRectangle_width_get
    if _newclass:width = _swig_property(_openframeworks.ofRectangle_width_get, _openframeworks.ofRectangle_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofRectangle_height_set
    __swig_getmethods__["height"] = _openframeworks.ofRectangle_height_get
    if _newclass:height = _swig_property(_openframeworks.ofRectangle_height_get, _openframeworks.ofRectangle_height_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofRectangle(self)
        return weakref_proxy(self)
ofRectangle_swigregister = _openframeworks.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

class ofColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofColor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofColor:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofColor(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofColor
    __del__ = lambda self : None;
    __swig_setmethods__["r"] = _openframeworks.ofColor_r_set
    __swig_getmethods__["r"] = _openframeworks.ofColor_r_get
    if _newclass:r = _swig_property(_openframeworks.ofColor_r_get, _openframeworks.ofColor_r_set)
    __swig_setmethods__["g"] = _openframeworks.ofColor_g_set
    __swig_getmethods__["g"] = _openframeworks.ofColor_g_get
    if _newclass:g = _swig_property(_openframeworks.ofColor_g_get, _openframeworks.ofColor_g_set)
    __swig_setmethods__["b"] = _openframeworks.ofColor_b_set
    __swig_getmethods__["b"] = _openframeworks.ofColor_b_get
    if _newclass:b = _swig_property(_openframeworks.ofColor_b_get, _openframeworks.ofColor_b_set)
    __swig_setmethods__["a"] = _openframeworks.ofColor_a_set
    __swig_getmethods__["a"] = _openframeworks.ofColor_a_get
    if _newclass:a = _swig_property(_openframeworks.ofColor_a_get, _openframeworks.ofColor_a_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofColor(self)
        return weakref_proxy(self)
ofColor_swigregister = _openframeworks.ofColor_swigregister
ofColor_swigregister(ofColor)

class ofStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofStyle:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofStyle(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofStyle
    __del__ = lambda self : None;
    __swig_setmethods__["color"] = _openframeworks.ofStyle_color_set
    __swig_getmethods__["color"] = _openframeworks.ofStyle_color_get
    if _newclass:color = _swig_property(_openframeworks.ofStyle_color_get, _openframeworks.ofStyle_color_set)
    __swig_setmethods__["polyMode"] = _openframeworks.ofStyle_polyMode_set
    __swig_getmethods__["polyMode"] = _openframeworks.ofStyle_polyMode_get
    if _newclass:polyMode = _swig_property(_openframeworks.ofStyle_polyMode_get, _openframeworks.ofStyle_polyMode_set)
    __swig_setmethods__["rectMode"] = _openframeworks.ofStyle_rectMode_set
    __swig_getmethods__["rectMode"] = _openframeworks.ofStyle_rectMode_get
    if _newclass:rectMode = _swig_property(_openframeworks.ofStyle_rectMode_get, _openframeworks.ofStyle_rectMode_set)
    __swig_setmethods__["bFill"] = _openframeworks.ofStyle_bFill_set
    __swig_getmethods__["bFill"] = _openframeworks.ofStyle_bFill_get
    if _newclass:bFill = _swig_property(_openframeworks.ofStyle_bFill_get, _openframeworks.ofStyle_bFill_set)
    __swig_setmethods__["blending"] = _openframeworks.ofStyle_blending_set
    __swig_getmethods__["blending"] = _openframeworks.ofStyle_blending_get
    if _newclass:blending = _swig_property(_openframeworks.ofStyle_blending_get, _openframeworks.ofStyle_blending_set)
    __swig_setmethods__["smoothing"] = _openframeworks.ofStyle_smoothing_set
    __swig_getmethods__["smoothing"] = _openframeworks.ofStyle_smoothing_get
    if _newclass:smoothing = _swig_property(_openframeworks.ofStyle_smoothing_get, _openframeworks.ofStyle_smoothing_set)
    __swig_setmethods__["circleResolution"] = _openframeworks.ofStyle_circleResolution_set
    __swig_getmethods__["circleResolution"] = _openframeworks.ofStyle_circleResolution_get
    if _newclass:circleResolution = _swig_property(_openframeworks.ofStyle_circleResolution_get, _openframeworks.ofStyle_circleResolution_set)
    __swig_setmethods__["lineWidth"] = _openframeworks.ofStyle_lineWidth_set
    __swig_getmethods__["lineWidth"] = _openframeworks.ofStyle_lineWidth_get
    if _newclass:lineWidth = _swig_property(_openframeworks.ofStyle_lineWidth_get, _openframeworks.ofStyle_lineWidth_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofStyle(self)
        return weakref_proxy(self)
ofStyle_swigregister = _openframeworks.ofStyle_swigregister
ofStyle_swigregister(ofStyle)

class ofBaseDraws(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseDraws, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseDraws, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseDraws
    __del__ = lambda self : None;
    def draw(self, *args): return _openframeworks.ofBaseDraws_draw(self, *args)
    def getHeight(self): return _openframeworks.ofBaseDraws_getHeight(self)
    def getWidth(self): return _openframeworks.ofBaseDraws_getWidth(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofBaseDraws_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofBaseDraws_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofBaseDraws_resetAnchor(self)
    def __init__(self): 
        if self.__class__ == ofBaseDraws:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseDraws(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseDraws(self)
        return weakref_proxy(self)
ofBaseDraws_swigregister = _openframeworks.ofBaseDraws_swigregister
ofBaseDraws_swigregister(ofBaseDraws)

class ofBaseUpdates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseUpdates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseUpdates, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseUpdates
    __del__ = lambda self : None;
    def update(self): return _openframeworks.ofBaseUpdates_update(self)
    def __init__(self): 
        if self.__class__ == ofBaseUpdates:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseUpdates(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseUpdates(self)
        return weakref_proxy(self)
ofBaseUpdates_swigregister = _openframeworks.ofBaseUpdates_swigregister
ofBaseUpdates_swigregister(ofBaseUpdates)

class ofBaseHasTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseHasTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseHasTexture, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseHasTexture
    __del__ = lambda self : None;
    def getTextureReference(self): return _openframeworks.ofBaseHasTexture_getTextureReference(self)
    def setUseTexture(self, *args): return _openframeworks.ofBaseHasTexture_setUseTexture(self, *args)
    def __init__(self): 
        if self.__class__ == ofBaseHasTexture:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseHasTexture(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseHasTexture(self)
        return weakref_proxy(self)
ofBaseHasTexture_swigregister = _openframeworks.ofBaseHasTexture_swigregister
ofBaseHasTexture_swigregister(ofBaseHasTexture)

class ofBaseHasPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseHasPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseHasPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseHasPixels
    __del__ = lambda self : None;
    def getPixels(self): return _openframeworks.ofBaseHasPixels_getPixels(self)
    def __init__(self): 
        if self.__class__ == ofBaseHasPixels:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseHasPixels(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseHasPixels(self)
        return weakref_proxy(self)
ofBaseHasPixels_swigregister = _openframeworks.ofBaseHasPixels_swigregister
ofBaseHasPixels_swigregister(ofBaseHasPixels)

class ofBaseImage(ofBaseDraws,ofBaseHasTexture,ofBaseHasPixels):
    __swig_setmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture,ofBaseHasPixels]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseImage, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseDraws,ofBaseHasTexture,ofBaseHasPixels]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseImage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofBaseImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseImage(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBaseImage
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseImage(self)
        return weakref_proxy(self)
ofBaseImage_swigregister = _openframeworks.ofBaseImage_swigregister
ofBaseImage_swigregister(ofBaseImage)

class ofBaseVideo(ofBaseImage,ofBaseUpdates):
    __swig_setmethods__ = {}
    for _s in [ofBaseImage,ofBaseUpdates]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBaseVideo, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseImage,ofBaseUpdates]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofBaseVideo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseVideo
    __del__ = lambda self : None;
    def getPixels(self): return _openframeworks.ofBaseVideo_getPixels(self)
    def isFrameNew(self): return _openframeworks.ofBaseVideo_isFrameNew(self)
    def close(self): return _openframeworks.ofBaseVideo_close(self)
    def __init__(self): 
        if self.__class__ == ofBaseVideo:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofBaseVideo(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofBaseVideo(self)
        return weakref_proxy(self)
ofBaseVideo_swigregister = _openframeworks.ofBaseVideo_swigregister
ofBaseVideo_swigregister(ofBaseVideo)


def ofNextPow2(*args):
  return _openframeworks.ofNextPow2(*args)
ofNextPow2 = _openframeworks.ofNextPow2

def ofRandom(*args):
  return _openframeworks.ofRandom(*args)
ofRandom = _openframeworks.ofRandom

def ofRandomf():
  return _openframeworks.ofRandomf()
ofRandomf = _openframeworks.ofRandomf

def ofRandomuf():
  return _openframeworks.ofRandomuf()
ofRandomuf = _openframeworks.ofRandomuf

def ofNormalize(*args):
  return _openframeworks.ofNormalize(*args)
ofNormalize = _openframeworks.ofNormalize

def ofClamp(*args):
  return _openframeworks.ofClamp(*args)
ofClamp = _openframeworks.ofClamp

def ofLerp(*args):
  return _openframeworks.ofLerp(*args)
ofLerp = _openframeworks.ofLerp

def ofDist(*args):
  return _openframeworks.ofDist(*args)
ofDist = _openframeworks.ofDist

def ofDistSquared(*args):
  return _openframeworks.ofDistSquared(*args)
ofDistSquared = _openframeworks.ofDistSquared

def ofSign(*args):
  return _openframeworks.ofSign(*args)
ofSign = _openframeworks.ofSign

def ofInRange(*args):
  return _openframeworks.ofInRange(*args)
ofInRange = _openframeworks.ofInRange

def ofRadToDeg(*args):
  return _openframeworks.ofRadToDeg(*args)
ofRadToDeg = _openframeworks.ofRadToDeg

def ofDegToRad(*args):
  return _openframeworks.ofDegToRad(*args)
ofDegToRad = _openframeworks.ofDegToRad

def ofRandomWidth():
  return _openframeworks.ofRandomWidth()
ofRandomWidth = _openframeworks.ofRandomWidth

def ofRandomHeight():
  return _openframeworks.ofRandomHeight()
ofRandomHeight = _openframeworks.ofRandomHeight

def ofResetElapsedTimeCounter():
  return _openframeworks.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _openframeworks.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
  return _openframeworks.ofGetElapsedTimef()
ofGetElapsedTimef = _openframeworks.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
  return _openframeworks.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _openframeworks.ofGetElapsedTimeMillis

def ofGetFrameNum():
  return _openframeworks.ofGetFrameNum()
ofGetFrameNum = _openframeworks.ofGetFrameNum

def ofGetSeconds():
  return _openframeworks.ofGetSeconds()
ofGetSeconds = _openframeworks.ofGetSeconds

def ofGetMinutes():
  return _openframeworks.ofGetMinutes()
ofGetMinutes = _openframeworks.ofGetMinutes

def ofGetHours():
  return _openframeworks.ofGetHours()
ofGetHours = _openframeworks.ofGetHours

def ofGetSystemTime():
  return _openframeworks.ofGetSystemTime()
ofGetSystemTime = _openframeworks.ofGetSystemTime

def ofGetYear():
  return _openframeworks.ofGetYear()
ofGetYear = _openframeworks.ofGetYear

def ofGetMonth():
  return _openframeworks.ofGetMonth()
ofGetMonth = _openframeworks.ofGetMonth

def ofGetDay():
  return _openframeworks.ofGetDay()
ofGetDay = _openframeworks.ofGetDay

def ofGetWeekday():
  return _openframeworks.ofGetWeekday()
ofGetWeekday = _openframeworks.ofGetWeekday

def ofLaunchBrowser(*args):
  return _openframeworks.ofLaunchBrowser(*args)
ofLaunchBrowser = _openframeworks.ofLaunchBrowser

def ofEnableDataPath():
  return _openframeworks.ofEnableDataPath()
ofEnableDataPath = _openframeworks.ofEnableDataPath

def ofDisableDataPath():
  return _openframeworks.ofDisableDataPath()
ofDisableDataPath = _openframeworks.ofDisableDataPath

def ofSetDataPathRoot(*args):
  return _openframeworks.ofSetDataPathRoot(*args)
ofSetDataPathRoot = _openframeworks.ofSetDataPathRoot

def ofToInt(*args):
  return _openframeworks.ofToInt(*args)
ofToInt = _openframeworks.ofToInt

def ofToFloat(*args):
  return _openframeworks.ofToFloat(*args)
ofToFloat = _openframeworks.ofToFloat

def ofGetVersionInfo():
  return _openframeworks.ofGetVersionInfo()
ofGetVersionInfo = _openframeworks.ofGetVersionInfo

def ofSaveScreen(*args):
  return _openframeworks.ofSaveScreen(*args)
ofSaveScreen = _openframeworks.ofSaveScreen

def ofSaveFrame():
  return _openframeworks.ofSaveFrame()
ofSaveFrame = _openframeworks.ofSaveFrame

def ofSplitString(*args):
  return _openframeworks.ofSplitString(*args)
ofSplitString = _openframeworks.ofSplitString

def ofSetLogLevel(*args):
  return _openframeworks.ofSetLogLevel(*args)
ofSetLogLevel = _openframeworks.ofSetLogLevel

def ofSetConsoleColor(*args):
  return _openframeworks.ofSetConsoleColor(*args)
ofSetConsoleColor = _openframeworks.ofSetConsoleColor

def ofRestoreConsoleColor():
  return _openframeworks.ofRestoreConsoleColor()
ofRestoreConsoleColor = _openframeworks.ofRestoreConsoleColor
MAX_SERIAL_PORTS = _openframeworks.MAX_SERIAL_PORTS
class ofSerial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSerial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSerial, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofSerial:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofSerial(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSerial
    __del__ = lambda self : None;
    def enumerateDevices(self): return _openframeworks.ofSerial_enumerateDevices(self)
    def close(self): return _openframeworks.ofSerial_close(self)
    def setup(self, *args): return _openframeworks.ofSerial_setup(self, *args)
    def readBytes(self, *args): return _openframeworks.ofSerial_readBytes(self, *args)
    def writeBytes(self, *args): return _openframeworks.ofSerial_writeBytes(self, *args)
    def writeByte(self, *args): return _openframeworks.ofSerial_writeByte(self, *args)
    def readByte(self): return _openframeworks.ofSerial_readByte(self)
    def flush(self, flushIn = True, flushOut = True): return _openframeworks.ofSerial_flush(self, flushIn, flushOut)
    def available(self): return _openframeworks.ofSerial_available(self)
    __swig_setmethods__["bVerbose"] = _openframeworks.ofSerial_bVerbose_set
    __swig_getmethods__["bVerbose"] = _openframeworks.ofSerial_bVerbose_get
    if _newclass:bVerbose = _swig_property(_openframeworks.ofSerial_bVerbose_get, _openframeworks.ofSerial_bVerbose_set)
    def setVerbose(self, *args): return _openframeworks.ofSerial_setVerbose(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofSerial(self)
        return weakref_proxy(self)
ofSerial_swigregister = _openframeworks.ofSerial_swigregister
ofSerial_swigregister(ofSerial)

def ofSeedRandom(*args):
  return _openframeworks.ofSeedRandom(*args)
ofSeedRandom = _openframeworks.ofSeedRandom

def ofMap(*args):
  return _openframeworks.ofMap(*args)
ofMap = _openframeworks.ofMap

def ofNoise(*args):
  return _openframeworks.ofNoise(*args)
ofNoise = _openframeworks.ofNoise

def ofSignedNoise(*args):
  return _openframeworks.ofSignedNoise(*args)
ofSignedNoise = _openframeworks.ofSignedNoise

def ofToDataPath(*args):
  return _openframeworks.ofToDataPath(*args)
ofToDataPath = _openframeworks.ofToDataPath

def ofToString(*args):
  return _openframeworks.ofToString(*args)
ofToString = _openframeworks.ofToString

def ofLog(*args):
  return _openframeworks.ofLog(*args)
ofLog = _openframeworks.ofLog

class ofTextureData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTextureData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTextureData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAllocated"] = _openframeworks.ofTextureData_bAllocated_set
    __swig_getmethods__["bAllocated"] = _openframeworks.ofTextureData_bAllocated_get
    if _newclass:bAllocated = _swig_property(_openframeworks.ofTextureData_bAllocated_get, _openframeworks.ofTextureData_bAllocated_set)
    __swig_setmethods__["glType"] = _openframeworks.ofTextureData_glType_set
    __swig_getmethods__["glType"] = _openframeworks.ofTextureData_glType_get
    if _newclass:glType = _swig_property(_openframeworks.ofTextureData_glType_get, _openframeworks.ofTextureData_glType_set)
    __swig_setmethods__["glTypeInternal"] = _openframeworks.ofTextureData_glTypeInternal_set
    __swig_getmethods__["glTypeInternal"] = _openframeworks.ofTextureData_glTypeInternal_get
    if _newclass:glTypeInternal = _swig_property(_openframeworks.ofTextureData_glTypeInternal_get, _openframeworks.ofTextureData_glTypeInternal_set)
    __swig_setmethods__["textureTarget"] = _openframeworks.ofTextureData_textureTarget_set
    __swig_getmethods__["textureTarget"] = _openframeworks.ofTextureData_textureTarget_get
    if _newclass:textureTarget = _swig_property(_openframeworks.ofTextureData_textureTarget_get, _openframeworks.ofTextureData_textureTarget_set)
    __swig_setmethods__["pixelType"] = _openframeworks.ofTextureData_pixelType_set
    __swig_getmethods__["pixelType"] = _openframeworks.ofTextureData_pixelType_get
    if _newclass:pixelType = _swig_property(_openframeworks.ofTextureData_pixelType_get, _openframeworks.ofTextureData_pixelType_set)
    __swig_setmethods__["tex_t"] = _openframeworks.ofTextureData_tex_t_set
    __swig_getmethods__["tex_t"] = _openframeworks.ofTextureData_tex_t_get
    if _newclass:tex_t = _swig_property(_openframeworks.ofTextureData_tex_t_get, _openframeworks.ofTextureData_tex_t_set)
    __swig_setmethods__["tex_u"] = _openframeworks.ofTextureData_tex_u_set
    __swig_getmethods__["tex_u"] = _openframeworks.ofTextureData_tex_u_get
    if _newclass:tex_u = _swig_property(_openframeworks.ofTextureData_tex_u_get, _openframeworks.ofTextureData_tex_u_set)
    __swig_setmethods__["tex_w"] = _openframeworks.ofTextureData_tex_w_set
    __swig_getmethods__["tex_w"] = _openframeworks.ofTextureData_tex_w_get
    if _newclass:tex_w = _swig_property(_openframeworks.ofTextureData_tex_w_get, _openframeworks.ofTextureData_tex_w_set)
    __swig_setmethods__["tex_h"] = _openframeworks.ofTextureData_tex_h_set
    __swig_getmethods__["tex_h"] = _openframeworks.ofTextureData_tex_h_get
    if _newclass:tex_h = _swig_property(_openframeworks.ofTextureData_tex_h_get, _openframeworks.ofTextureData_tex_h_set)
    __swig_setmethods__["width"] = _openframeworks.ofTextureData_width_set
    __swig_getmethods__["width"] = _openframeworks.ofTextureData_width_get
    if _newclass:width = _swig_property(_openframeworks.ofTextureData_width_get, _openframeworks.ofTextureData_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofTextureData_height_set
    __swig_getmethods__["height"] = _openframeworks.ofTextureData_height_get
    if _newclass:height = _swig_property(_openframeworks.ofTextureData_height_get, _openframeworks.ofTextureData_height_set)
    __swig_setmethods__["bFlipTexture"] = _openframeworks.ofTextureData_bFlipTexture_set
    __swig_getmethods__["bFlipTexture"] = _openframeworks.ofTextureData_bFlipTexture_get
    if _newclass:bFlipTexture = _swig_property(_openframeworks.ofTextureData_bFlipTexture_get, _openframeworks.ofTextureData_bFlipTexture_set)
    __swig_setmethods__["textureID"] = _openframeworks.ofTextureData_textureID_set
    __swig_getmethods__["textureID"] = _openframeworks.ofTextureData_textureID_get
    if _newclass:textureID = _swig_property(_openframeworks.ofTextureData_textureID_get, _openframeworks.ofTextureData_textureID_set)
    def __init__(self): 
        this = _openframeworks.new_ofTextureData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTextureData
    __del__ = lambda self : None;
ofTextureData_swigregister = _openframeworks.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)


def ofEnableTextureEdgeHack():
  return _openframeworks.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _openframeworks.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
  return _openframeworks.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _openframeworks.ofDisableTextureEdgeHack
class ofTexture(ofBaseDraws):
    __swig_setmethods__ = {}
    for _s in [ofBaseDraws]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseDraws]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofTexture, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofTexture
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == ofTexture:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofTexture(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _openframeworks.ofTexture_allocate(self, *args)
    def clear(self): return _openframeworks.ofTexture_clear(self)
    def loadData(self, *args): return _openframeworks.ofTexture_loadData(self, *args)
    def loadScreenData(self, *args): return _openframeworks.ofTexture_loadScreenData(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofTexture_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofTexture_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofTexture_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofTexture_draw(self, *args)
    def bind(self): return _openframeworks.ofTexture_bind(self)
    def unbind(self): return _openframeworks.ofTexture_unbind(self)
    def getCoordFromPoint(self, *args): return _openframeworks.ofTexture_getCoordFromPoint(self, *args)
    def getCoordFromPercent(self, *args): return _openframeworks.ofTexture_getCoordFromPercent(self, *args)
    def setTextureWrap(self, *args): return _openframeworks.ofTexture_setTextureWrap(self, *args)
    def setTextureMinMagFilter(self, *args): return _openframeworks.ofTexture_setTextureMinMagFilter(self, *args)
    def bAllocated(self): return _openframeworks.ofTexture_bAllocated(self)
    def getTextureData(self): return _openframeworks.ofTexture_getTextureData(self)
    def getHeight(self): return _openframeworks.ofTexture_getHeight(self)
    def getWidth(self): return _openframeworks.ofTexture_getWidth(self)
    __swig_setmethods__["texData"] = _openframeworks.ofTexture_texData_set
    __swig_getmethods__["texData"] = _openframeworks.ofTexture_texData_get
    if _newclass:texData = _swig_property(_openframeworks.ofTexture_texData_get, _openframeworks.ofTexture_texData_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofTexture(self)
        return weakref_proxy(self)
ofTexture_swigregister = _openframeworks.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

class charProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _openframeworks.charProps_value_set
    __swig_getmethods__["value"] = _openframeworks.charProps_value_get
    if _newclass:value = _swig_property(_openframeworks.charProps_value_get, _openframeworks.charProps_value_set)
    __swig_setmethods__["height"] = _openframeworks.charProps_height_set
    __swig_getmethods__["height"] = _openframeworks.charProps_height_get
    if _newclass:height = _swig_property(_openframeworks.charProps_height_get, _openframeworks.charProps_height_set)
    __swig_setmethods__["width"] = _openframeworks.charProps_width_set
    __swig_getmethods__["width"] = _openframeworks.charProps_width_get
    if _newclass:width = _swig_property(_openframeworks.charProps_width_get, _openframeworks.charProps_width_set)
    __swig_setmethods__["setWidth"] = _openframeworks.charProps_setWidth_set
    __swig_getmethods__["setWidth"] = _openframeworks.charProps_setWidth_get
    if _newclass:setWidth = _swig_property(_openframeworks.charProps_setWidth_get, _openframeworks.charProps_setWidth_set)
    __swig_setmethods__["topExtent"] = _openframeworks.charProps_topExtent_set
    __swig_getmethods__["topExtent"] = _openframeworks.charProps_topExtent_get
    if _newclass:topExtent = _swig_property(_openframeworks.charProps_topExtent_get, _openframeworks.charProps_topExtent_set)
    __swig_setmethods__["leftExtent"] = _openframeworks.charProps_leftExtent_set
    __swig_getmethods__["leftExtent"] = _openframeworks.charProps_leftExtent_get
    if _newclass:leftExtent = _swig_property(_openframeworks.charProps_leftExtent_get, _openframeworks.charProps_leftExtent_set)
    __swig_setmethods__["tTex"] = _openframeworks.charProps_tTex_set
    __swig_getmethods__["tTex"] = _openframeworks.charProps_tTex_get
    if _newclass:tTex = _swig_property(_openframeworks.charProps_tTex_get, _openframeworks.charProps_tTex_set)
    __swig_setmethods__["vTex"] = _openframeworks.charProps_vTex_set
    __swig_getmethods__["vTex"] = _openframeworks.charProps_vTex_get
    if _newclass:vTex = _swig_property(_openframeworks.charProps_vTex_get, _openframeworks.charProps_vTex_set)
    __swig_setmethods__["xOff"] = _openframeworks.charProps_xOff_set
    __swig_getmethods__["xOff"] = _openframeworks.charProps_xOff_get
    if _newclass:xOff = _swig_property(_openframeworks.charProps_xOff_get, _openframeworks.charProps_xOff_set)
    __swig_setmethods__["yOff"] = _openframeworks.charProps_yOff_set
    __swig_getmethods__["yOff"] = _openframeworks.charProps_yOff_get
    if _newclass:yOff = _swig_property(_openframeworks.charProps_yOff_get, _openframeworks.charProps_yOff_set)
    def __init__(self): 
        this = _openframeworks.new_charProps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_charProps
    __del__ = lambda self : None;
charProps_swigregister = _openframeworks.charProps_swigregister
charProps_swigregister(charProps)

TTF_SHAPE_SIMPLIFICATION_AMNT = _openframeworks.TTF_SHAPE_SIMPLIFICATION_AMNT
class ofTTFContour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTTFContour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTTFContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pts"] = _openframeworks.ofTTFContour_pts_set
    __swig_getmethods__["pts"] = _openframeworks.ofTTFContour_pts_get
    if _newclass:pts = _swig_property(_openframeworks.ofTTFContour_pts_get, _openframeworks.ofTTFContour_pts_set)
    def __init__(self): 
        this = _openframeworks.new_ofTTFContour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTTFContour
    __del__ = lambda self : None;
ofTTFContour_swigregister = _openframeworks.ofTTFContour_swigregister
ofTTFContour_swigregister(ofTTFContour)

class ofTTFCharacter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTTFCharacter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTTFCharacter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contours"] = _openframeworks.ofTTFCharacter_contours_set
    __swig_getmethods__["contours"] = _openframeworks.ofTTFCharacter_contours_get
    if _newclass:contours = _swig_property(_openframeworks.ofTTFCharacter_contours_get, _openframeworks.ofTTFCharacter_contours_set)
    def __init__(self): 
        this = _openframeworks.new_ofTTFCharacter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTTFCharacter
    __del__ = lambda self : None;
ofTTFCharacter_swigregister = _openframeworks.ofTTFCharacter_swigregister
ofTTFCharacter_swigregister(ofTTFCharacter)

NUM_CHARACTER_TO_START = _openframeworks.NUM_CHARACTER_TO_START
class ofTrueTypeFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTrueTypeFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTrueTypeFont, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofTrueTypeFont:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofTrueTypeFont(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTrueTypeFont
    __del__ = lambda self : None;
    def loadFont(self, *args): return _openframeworks.ofTrueTypeFont_loadFont(self, *args)
    __swig_setmethods__["bLoadedOk"] = _openframeworks.ofTrueTypeFont_bLoadedOk_set
    __swig_getmethods__["bLoadedOk"] = _openframeworks.ofTrueTypeFont_bLoadedOk_get
    if _newclass:bLoadedOk = _swig_property(_openframeworks.ofTrueTypeFont_bLoadedOk_get, _openframeworks.ofTrueTypeFont_bLoadedOk_set)
    __swig_setmethods__["bAntiAlised"] = _openframeworks.ofTrueTypeFont_bAntiAlised_set
    __swig_getmethods__["bAntiAlised"] = _openframeworks.ofTrueTypeFont_bAntiAlised_get
    if _newclass:bAntiAlised = _swig_property(_openframeworks.ofTrueTypeFont_bAntiAlised_get, _openframeworks.ofTrueTypeFont_bAntiAlised_set)
    __swig_setmethods__["bFullCharacterSet"] = _openframeworks.ofTrueTypeFont_bFullCharacterSet_set
    __swig_getmethods__["bFullCharacterSet"] = _openframeworks.ofTrueTypeFont_bFullCharacterSet_get
    if _newclass:bFullCharacterSet = _swig_property(_openframeworks.ofTrueTypeFont_bFullCharacterSet_get, _openframeworks.ofTrueTypeFont_bFullCharacterSet_set)
    def getLineHeight(self): return _openframeworks.ofTrueTypeFont_getLineHeight(self)
    def setLineHeight(self, *args): return _openframeworks.ofTrueTypeFont_setLineHeight(self, *args)
    def stringWidth(self, *args): return _openframeworks.ofTrueTypeFont_stringWidth(self, *args)
    def stringHeight(self, *args): return _openframeworks.ofTrueTypeFont_stringHeight(self, *args)
    def getStringBoundingBox(self, *args): return _openframeworks.ofTrueTypeFont_getStringBoundingBox(self, *args)
    def drawString(self, *args): return _openframeworks.ofTrueTypeFont_drawString(self, *args)
    def drawStringAsShapes(self, *args): return _openframeworks.ofTrueTypeFont_drawStringAsShapes(self, *args)
    __swig_setmethods__["nCharacters"] = _openframeworks.ofTrueTypeFont_nCharacters_set
    __swig_getmethods__["nCharacters"] = _openframeworks.ofTrueTypeFont_nCharacters_get
    if _newclass:nCharacters = _swig_property(_openframeworks.ofTrueTypeFont_nCharacters_get, _openframeworks.ofTrueTypeFont_nCharacters_set)
    def getCharacterAsPoints(self, *args): return _openframeworks.ofTrueTypeFont_getCharacterAsPoints(self, *args)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofTrueTypeFont(self)
        return weakref_proxy(self)
ofTrueTypeFont_swigregister = _openframeworks.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)

CIRC_RESOLUTION = _openframeworks.CIRC_RESOLUTION

def ofBgColorPtr():
  return _openframeworks.ofBgColorPtr()
ofBgColorPtr = _openframeworks.ofBgColorPtr

def ofBackground(*args):
  return _openframeworks.ofBackground(*args)
ofBackground = _openframeworks.ofBackground

def ofSetBackgroundAuto(*args):
  return _openframeworks.ofSetBackgroundAuto(*args)
ofSetBackgroundAuto = _openframeworks.ofSetBackgroundAuto

def ofSetRectMode(*args):
  return _openframeworks.ofSetRectMode(*args)
ofSetRectMode = _openframeworks.ofSetRectMode

def ofGetUsingArbTex():
  return _openframeworks.ofGetUsingArbTex()
ofGetUsingArbTex = _openframeworks.ofGetUsingArbTex

def ofEnableArbTex():
  return _openframeworks.ofEnableArbTex()
ofEnableArbTex = _openframeworks.ofEnableArbTex

def ofDisableArbTex():
  return _openframeworks.ofDisableArbTex()
ofDisableArbTex = _openframeworks.ofDisableArbTex

def ofGetUsingCustomTextureWrap():
  return _openframeworks.ofGetUsingCustomTextureWrap()
ofGetUsingCustomTextureWrap = _openframeworks.ofGetUsingCustomTextureWrap

def ofRestoreTextureWrap():
  return _openframeworks.ofRestoreTextureWrap()
ofRestoreTextureWrap = _openframeworks.ofRestoreTextureWrap

def ofGetUsingCustomMinMagFilters():
  return _openframeworks.ofGetUsingCustomMinMagFilters()
ofGetUsingCustomMinMagFilters = _openframeworks.ofGetUsingCustomMinMagFilters

def ofRestoreMinMagFilters():
  return _openframeworks.ofRestoreMinMagFilters()
ofRestoreMinMagFilters = _openframeworks.ofRestoreMinMagFilters

def ofbClearBg():
  return _openframeworks.ofbClearBg()
ofbClearBg = _openframeworks.ofbClearBg

def ofGetRectMode():
  return _openframeworks.ofGetRectMode()
ofGetRectMode = _openframeworks.ofGetRectMode

def ofSetCurveResolution(*args):
  return _openframeworks.ofSetCurveResolution(*args)
ofSetCurveResolution = _openframeworks.ofSetCurveResolution

def ofTriangle(*args):
  return _openframeworks.ofTriangle(*args)
ofTriangle = _openframeworks.ofTriangle

def ofCircle(*args):
  return _openframeworks.ofCircle(*args)
ofCircle = _openframeworks.ofCircle

def ofEllipse(*args):
  return _openframeworks.ofEllipse(*args)
ofEllipse = _openframeworks.ofEllipse

def ofLine(*args):
  return _openframeworks.ofLine(*args)
ofLine = _openframeworks.ofLine

def ofRect(*args):
  return _openframeworks.ofRect(*args)
ofRect = _openframeworks.ofRect

def ofSetCircleResolution(*args):
  return _openframeworks.ofSetCircleResolution(*args)
ofSetCircleResolution = _openframeworks.ofSetCircleResolution

def ofCurve(*args):
  return _openframeworks.ofCurve(*args)
ofCurve = _openframeworks.ofCurve

def ofBezier(*args):
  return _openframeworks.ofBezier(*args)
ofBezier = _openframeworks.ofBezier

def ofNoFill():
  return _openframeworks.ofNoFill()
ofNoFill = _openframeworks.ofNoFill

def ofFill():
  return _openframeworks.ofFill()
ofFill = _openframeworks.ofFill

def ofSetLineWidth(*args):
  return _openframeworks.ofSetLineWidth(*args)
ofSetLineWidth = _openframeworks.ofSetLineWidth

def ofEnableAlphaBlending():
  return _openframeworks.ofEnableAlphaBlending()
ofEnableAlphaBlending = _openframeworks.ofEnableAlphaBlending

def ofDisableAlphaBlending():
  return _openframeworks.ofDisableAlphaBlending()
ofDisableAlphaBlending = _openframeworks.ofDisableAlphaBlending

def ofEnableSmoothing():
  return _openframeworks.ofEnableSmoothing()
ofEnableSmoothing = _openframeworks.ofEnableSmoothing

def ofDisableSmoothing():
  return _openframeworks.ofDisableSmoothing()
ofDisableSmoothing = _openframeworks.ofDisableSmoothing

def ofGetStyle():
  return _openframeworks.ofGetStyle()
ofGetStyle = _openframeworks.ofGetStyle

def ofSetStyle(*args):
  return _openframeworks.ofSetStyle(*args)
ofSetStyle = _openframeworks.ofSetStyle

def ofPushStyle():
  return _openframeworks.ofPushStyle()
ofPushStyle = _openframeworks.ofPushStyle

def ofPopStyle():
  return _openframeworks.ofPopStyle()
ofPopStyle = _openframeworks.ofPopStyle

def ofPushMatrix():
  return _openframeworks.ofPushMatrix()
ofPushMatrix = _openframeworks.ofPushMatrix

def ofPopMatrix():
  return _openframeworks.ofPopMatrix()
ofPopMatrix = _openframeworks.ofPopMatrix

def ofRotateX(*args):
  return _openframeworks.ofRotateX(*args)
ofRotateX = _openframeworks.ofRotateX

def ofRotateY(*args):
  return _openframeworks.ofRotateY(*args)
ofRotateY = _openframeworks.ofRotateY

def ofRotateZ(*args):
  return _openframeworks.ofRotateZ(*args)
ofRotateZ = _openframeworks.ofRotateZ

def ofDrawBitmapString(*args):
  return _openframeworks.ofDrawBitmapString(*args)
ofDrawBitmapString = _openframeworks.ofDrawBitmapString

def ofSetupGraphicDefaults():
  return _openframeworks.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _openframeworks.ofSetupGraphicDefaults

def ofSetupScreen():
  return _openframeworks.ofSetupScreen()
ofSetupScreen = _openframeworks.ofSetupScreen

def ofCurveVertex(*args):
  return _openframeworks.ofCurveVertex(*args)
ofCurveVertex = _openframeworks.ofCurveVertex

def ofBezierVertex(*args):
  return _openframeworks.ofBezierVertex(*args)
ofBezierVertex = _openframeworks.ofBezierVertex

def ofSetPolyMode(*args):
  return _openframeworks.ofSetPolyMode(*args)
ofSetPolyMode = _openframeworks.ofSetPolyMode

def ofBeginShape():
  return _openframeworks.ofBeginShape()
ofBeginShape = _openframeworks.ofBeginShape

def ofVertex(*args):
  return _openframeworks.ofVertex(*args)
ofVertex = _openframeworks.ofVertex
class ofPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPixels, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixels"] = _openframeworks.ofPixels_pixels_set
    __swig_getmethods__["pixels"] = _openframeworks.ofPixels_pixels_get
    if _newclass:pixels = _swig_property(_openframeworks.ofPixels_pixels_get, _openframeworks.ofPixels_pixels_set)
    __swig_setmethods__["width"] = _openframeworks.ofPixels_width_set
    __swig_getmethods__["width"] = _openframeworks.ofPixels_width_get
    if _newclass:width = _swig_property(_openframeworks.ofPixels_width_get, _openframeworks.ofPixels_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofPixels_height_set
    __swig_getmethods__["height"] = _openframeworks.ofPixels_height_get
    if _newclass:height = _swig_property(_openframeworks.ofPixels_height_get, _openframeworks.ofPixels_height_set)
    __swig_setmethods__["bitsPerPixel"] = _openframeworks.ofPixels_bitsPerPixel_set
    __swig_getmethods__["bitsPerPixel"] = _openframeworks.ofPixels_bitsPerPixel_get
    if _newclass:bitsPerPixel = _swig_property(_openframeworks.ofPixels_bitsPerPixel_get, _openframeworks.ofPixels_bitsPerPixel_set)
    __swig_setmethods__["bytesPerPixel"] = _openframeworks.ofPixels_bytesPerPixel_set
    __swig_getmethods__["bytesPerPixel"] = _openframeworks.ofPixels_bytesPerPixel_get
    if _newclass:bytesPerPixel = _swig_property(_openframeworks.ofPixels_bytesPerPixel_get, _openframeworks.ofPixels_bytesPerPixel_set)
    __swig_setmethods__["glDataType"] = _openframeworks.ofPixels_glDataType_set
    __swig_getmethods__["glDataType"] = _openframeworks.ofPixels_glDataType_get
    if _newclass:glDataType = _swig_property(_openframeworks.ofPixels_glDataType_get, _openframeworks.ofPixels_glDataType_set)
    __swig_setmethods__["ofImageType"] = _openframeworks.ofPixels_ofImageType_set
    __swig_getmethods__["ofImageType"] = _openframeworks.ofPixels_ofImageType_get
    if _newclass:ofImageType = _swig_property(_openframeworks.ofPixels_ofImageType_get, _openframeworks.ofPixels_ofImageType_set)
    __swig_setmethods__["bAllocated"] = _openframeworks.ofPixels_bAllocated_set
    __swig_getmethods__["bAllocated"] = _openframeworks.ofPixels_bAllocated_get
    if _newclass:bAllocated = _swig_property(_openframeworks.ofPixels_bAllocated_get, _openframeworks.ofPixels_bAllocated_set)
    def __init__(self): 
        this = _openframeworks.new_ofPixels()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofPixels
    __del__ = lambda self : None;
ofPixels_swigregister = _openframeworks.ofPixels_swigregister
ofPixels_swigregister(ofPixels)

def ofSetTextureWrap(*args):
  return _openframeworks.ofSetTextureWrap(*args)
ofSetTextureWrap = _openframeworks.ofSetTextureWrap

def ofSetMinMagFilters(minFilter = 0x2601, maxFilter = 0x2601):
  return _openframeworks.ofSetMinMagFilters(minFilter, maxFilter)
ofSetMinMagFilters = _openframeworks.ofSetMinMagFilters

def ofSetColor(*args):
  return _openframeworks.ofSetColor(*args)
ofSetColor = _openframeworks.ofSetColor

def ofTranslate(*args):
  return _openframeworks.ofTranslate(*args)
ofTranslate = _openframeworks.ofTranslate

def ofScale(*args):
  return _openframeworks.ofScale(*args)
ofScale = _openframeworks.ofScale

def ofRotate(*args):
  return _openframeworks.ofRotate(*args)
ofRotate = _openframeworks.ofRotate

def ofEndShape(bClose = False):
  return _openframeworks.ofEndShape(bClose)
ofEndShape = _openframeworks.ofEndShape

def ofNextContour(bClose = False):
  return _openframeworks.ofNextContour(bClose)
ofNextContour = _openframeworks.ofNextContour


def ofCloseFreeImage():
  return _openframeworks.ofCloseFreeImage()
ofCloseFreeImage = _openframeworks.ofCloseFreeImage
class ofImage(ofBaseImage):
    __swig_setmethods__ = {}
    for _s in [ofBaseImage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofImage, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseImage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofImage_clear(self)
    def __init__(self, *args): 
        if self.__class__ == ofImage:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofImage(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self, *args): return _openframeworks.ofImage_clone(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofImage_setUseTexture(self, *args)
    def getTextureReference(self): return _openframeworks.ofImage_getTextureReference(self)
    def loadImage(self, *args): return _openframeworks.ofImage_loadImage(self, *args)
    def saveImage(self, *args): return _openframeworks.ofImage_saveImage(self, *args)
    def getPixels(self): return _openframeworks.ofImage_getPixels(self)
    def setFromPixels(self, *args): return _openframeworks.ofImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _openframeworks.ofImage_setImageType(self, *args)
    def resize(self, *args): return _openframeworks.ofImage_resize(self, *args)
    def grabScreen(self, *args): return _openframeworks.ofImage_grabScreen(self, *args)
    def update(self): return _openframeworks.ofImage_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofImage_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofImage_draw(self, *args)
    def getHeight(self): return _openframeworks.ofImage_getHeight(self)
    def getWidth(self): return _openframeworks.ofImage_getWidth(self)
    __swig_setmethods__["width"] = _openframeworks.ofImage_width_set
    __swig_getmethods__["width"] = _openframeworks.ofImage_width_get
    if _newclass:width = _swig_property(_openframeworks.ofImage_width_get, _openframeworks.ofImage_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofImage_height_set
    __swig_getmethods__["height"] = _openframeworks.ofImage_height_get
    if _newclass:height = _swig_property(_openframeworks.ofImage_height_get, _openframeworks.ofImage_height_set)
    __swig_setmethods__["bpp"] = _openframeworks.ofImage_bpp_set
    __swig_getmethods__["bpp"] = _openframeworks.ofImage_bpp_get
    if _newclass:bpp = _swig_property(_openframeworks.ofImage_bpp_get, _openframeworks.ofImage_bpp_set)
    __swig_setmethods__["type"] = _openframeworks.ofImage_type_set
    __swig_getmethods__["type"] = _openframeworks.ofImage_type_get
    if _newclass:type = _swig_property(_openframeworks.ofImage_type_get, _openframeworks.ofImage_type_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofImage(self)
        return weakref_proxy(self)
ofImage_swigregister = _openframeworks.ofImage_swigregister
ofImage_swigregister(ofImage)


def ofGetAppPtr():
  return _openframeworks.ofGetAppPtr()
ofGetAppPtr = _openframeworks.ofGetAppPtr

def ofGetFrameRate():
  return _openframeworks.ofGetFrameRate()
ofGetFrameRate = _openframeworks.ofGetFrameRate

def ofSetFrameRate(*args):
  return _openframeworks.ofSetFrameRate(*args)
ofSetFrameRate = _openframeworks.ofSetFrameRate

def ofSleepMillis(*args):
  return _openframeworks.ofSleepMillis(*args)
ofSleepMillis = _openframeworks.ofSleepMillis

def ofGetLastFrameTime():
  return _openframeworks.ofGetLastFrameTime()
ofGetLastFrameTime = _openframeworks.ofGetLastFrameTime

def ofHideCursor():
  return _openframeworks.ofHideCursor()
ofHideCursor = _openframeworks.ofHideCursor

def ofShowCursor():
  return _openframeworks.ofShowCursor()
ofShowCursor = _openframeworks.ofShowCursor

def ofGetWindowPositionX():
  return _openframeworks.ofGetWindowPositionX()
ofGetWindowPositionX = _openframeworks.ofGetWindowPositionX

def ofGetWindowPositionY():
  return _openframeworks.ofGetWindowPositionY()
ofGetWindowPositionY = _openframeworks.ofGetWindowPositionY

def ofGetScreenWidth():
  return _openframeworks.ofGetScreenWidth()
ofGetScreenWidth = _openframeworks.ofGetScreenWidth

def ofGetScreenHeight():
  return _openframeworks.ofGetScreenHeight()
ofGetScreenHeight = _openframeworks.ofGetScreenHeight

def ofGetWindowMode():
  return _openframeworks.ofGetWindowMode()
ofGetWindowMode = _openframeworks.ofGetWindowMode

def ofGetWidth():
  return _openframeworks.ofGetWidth()
ofGetWidth = _openframeworks.ofGetWidth

def ofGetHeight():
  return _openframeworks.ofGetHeight()
ofGetHeight = _openframeworks.ofGetHeight

def ofSetWindowPosition(*args):
  return _openframeworks.ofSetWindowPosition(*args)
ofSetWindowPosition = _openframeworks.ofSetWindowPosition

def ofSetWindowShape(*args):
  return _openframeworks.ofSetWindowShape(*args)
ofSetWindowShape = _openframeworks.ofSetWindowShape

def ofSetWindowTitle(*args):
  return _openframeworks.ofSetWindowTitle(*args)
ofSetWindowTitle = _openframeworks.ofSetWindowTitle

def ofEnableSetupScreen():
  return _openframeworks.ofEnableSetupScreen()
ofEnableSetupScreen = _openframeworks.ofEnableSetupScreen

def ofDisableSetupScreen():
  return _openframeworks.ofDisableSetupScreen()
ofDisableSetupScreen = _openframeworks.ofDisableSetupScreen

def ofSetFullscreen(*args):
  return _openframeworks.ofSetFullscreen(*args)
ofSetFullscreen = _openframeworks.ofSetFullscreen

def ofToggleFullscreen():
  return _openframeworks.ofToggleFullscreen()
ofToggleFullscreen = _openframeworks.ofToggleFullscreen

def ofSetVerticalSync(*args):
  return _openframeworks.ofSetVerticalSync(*args)
ofSetVerticalSync = _openframeworks.ofSetVerticalSync

def ofSoundStreamStop():
  return _openframeworks.ofSoundStreamStop()
ofSoundStreamStop = _openframeworks.ofSoundStreamStop

def ofSoundStreamStart():
  return _openframeworks.ofSoundStreamStart()
ofSoundStreamStart = _openframeworks.ofSoundStreamStart

def ofSoundStreamClose():
  return _openframeworks.ofSoundStreamClose()
ofSoundStreamClose = _openframeworks.ofSoundStreamClose

def ofSoundStreamListDevices():
  return _openframeworks.ofSoundStreamListDevices()
ofSoundStreamListDevices = _openframeworks.ofSoundStreamListDevices

def ofSoundStopAll():
  return _openframeworks.ofSoundStopAll()
ofSoundStopAll = _openframeworks.ofSoundStopAll

def ofSoundSetVolume(*args):
  return _openframeworks.ofSoundSetVolume(*args)
ofSoundSetVolume = _openframeworks.ofSoundSetVolume

def ofSoundUpdate():
  return _openframeworks.ofSoundUpdate()
ofSoundUpdate = _openframeworks.ofSoundUpdate

def ofSoundGetSpectrum(*args):
  return _openframeworks.ofSoundGetSpectrum(*args)
ofSoundGetSpectrum = _openframeworks.ofSoundGetSpectrum
class ofSoundPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSoundPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSoundPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofSoundPlayer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofSoundPlayer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSoundPlayer
    __del__ = lambda self : None;
    def loadSound(self, *args): return _openframeworks.ofSoundPlayer_loadSound(self, *args)
    def unloadSound(self): return _openframeworks.ofSoundPlayer_unloadSound(self)
    def play(self): return _openframeworks.ofSoundPlayer_play(self)
    def stop(self): return _openframeworks.ofSoundPlayer_stop(self)
    def setVolume(self, *args): return _openframeworks.ofSoundPlayer_setVolume(self, *args)
    def setPan(self, *args): return _openframeworks.ofSoundPlayer_setPan(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofSoundPlayer_setSpeed(self, *args)
    def setPaused(self, *args): return _openframeworks.ofSoundPlayer_setPaused(self, *args)
    def setLoop(self, *args): return _openframeworks.ofSoundPlayer_setLoop(self, *args)
    def setMultiPlay(self, *args): return _openframeworks.ofSoundPlayer_setMultiPlay(self, *args)
    def setPosition(self, *args): return _openframeworks.ofSoundPlayer_setPosition(self, *args)
    def getPosition(self): return _openframeworks.ofSoundPlayer_getPosition(self)
    def getIsPlaying(self): return _openframeworks.ofSoundPlayer_getIsPlaying(self)
    def getSpeed(self): return _openframeworks.ofSoundPlayer_getSpeed(self)
    def getPan(self): return _openframeworks.ofSoundPlayer_getPan(self)
    __swig_getmethods__["initializeFmod"] = lambda x: _openframeworks.ofSoundPlayer_initializeFmod
    if _newclass:initializeFmod = staticmethod(_openframeworks.ofSoundPlayer_initializeFmod)
    __swig_getmethods__["closeFmod"] = lambda x: _openframeworks.ofSoundPlayer_closeFmod
    if _newclass:closeFmod = staticmethod(_openframeworks.ofSoundPlayer_closeFmod)
    __swig_setmethods__["isStreaming"] = _openframeworks.ofSoundPlayer_isStreaming_set
    __swig_getmethods__["isStreaming"] = _openframeworks.ofSoundPlayer_isStreaming_get
    if _newclass:isStreaming = _swig_property(_openframeworks.ofSoundPlayer_isStreaming_get, _openframeworks.ofSoundPlayer_isStreaming_set)
    __swig_setmethods__["bMultiPlay"] = _openframeworks.ofSoundPlayer_bMultiPlay_set
    __swig_getmethods__["bMultiPlay"] = _openframeworks.ofSoundPlayer_bMultiPlay_get
    if _newclass:bMultiPlay = _swig_property(_openframeworks.ofSoundPlayer_bMultiPlay_get, _openframeworks.ofSoundPlayer_bMultiPlay_set)
    __swig_setmethods__["bLoop"] = _openframeworks.ofSoundPlayer_bLoop_set
    __swig_getmethods__["bLoop"] = _openframeworks.ofSoundPlayer_bLoop_get
    if _newclass:bLoop = _swig_property(_openframeworks.ofSoundPlayer_bLoop_get, _openframeworks.ofSoundPlayer_bLoop_set)
    __swig_setmethods__["bLoadedOk"] = _openframeworks.ofSoundPlayer_bLoadedOk_set
    __swig_getmethods__["bLoadedOk"] = _openframeworks.ofSoundPlayer_bLoadedOk_get
    if _newclass:bLoadedOk = _swig_property(_openframeworks.ofSoundPlayer_bLoadedOk_get, _openframeworks.ofSoundPlayer_bLoadedOk_set)
    __swig_setmethods__["bPaused"] = _openframeworks.ofSoundPlayer_bPaused_set
    __swig_getmethods__["bPaused"] = _openframeworks.ofSoundPlayer_bPaused_get
    if _newclass:bPaused = _swig_property(_openframeworks.ofSoundPlayer_bPaused_get, _openframeworks.ofSoundPlayer_bPaused_set)
    __swig_setmethods__["pan"] = _openframeworks.ofSoundPlayer_pan_set
    __swig_getmethods__["pan"] = _openframeworks.ofSoundPlayer_pan_get
    if _newclass:pan = _swig_property(_openframeworks.ofSoundPlayer_pan_get, _openframeworks.ofSoundPlayer_pan_set)
    __swig_setmethods__["volume"] = _openframeworks.ofSoundPlayer_volume_set
    __swig_getmethods__["volume"] = _openframeworks.ofSoundPlayer_volume_get
    if _newclass:volume = _swig_property(_openframeworks.ofSoundPlayer_volume_get, _openframeworks.ofSoundPlayer_volume_set)
    __swig_setmethods__["internalFreq"] = _openframeworks.ofSoundPlayer_internalFreq_set
    __swig_getmethods__["internalFreq"] = _openframeworks.ofSoundPlayer_internalFreq_get
    if _newclass:internalFreq = _swig_property(_openframeworks.ofSoundPlayer_internalFreq_get, _openframeworks.ofSoundPlayer_internalFreq_set)
    __swig_setmethods__["speed"] = _openframeworks.ofSoundPlayer_speed_set
    __swig_getmethods__["speed"] = _openframeworks.ofSoundPlayer_speed_get
    if _newclass:speed = _swig_property(_openframeworks.ofSoundPlayer_speed_get, _openframeworks.ofSoundPlayer_speed_set)
    __swig_setmethods__["length"] = _openframeworks.ofSoundPlayer_length_set
    __swig_getmethods__["length"] = _openframeworks.ofSoundPlayer_length_get
    if _newclass:length = _swig_property(_openframeworks.ofSoundPlayer_length_get, _openframeworks.ofSoundPlayer_length_set)
    __swig_setmethods__["result"] = _openframeworks.ofSoundPlayer_result_set
    __swig_getmethods__["result"] = _openframeworks.ofSoundPlayer_result_get
    if _newclass:result = _swig_property(_openframeworks.ofSoundPlayer_result_get, _openframeworks.ofSoundPlayer_result_set)
    __swig_setmethods__["channel"] = _openframeworks.ofSoundPlayer_channel_set
    __swig_getmethods__["channel"] = _openframeworks.ofSoundPlayer_channel_get
    if _newclass:channel = _swig_property(_openframeworks.ofSoundPlayer_channel_get, _openframeworks.ofSoundPlayer_channel_set)
    __swig_setmethods__["sound"] = _openframeworks.ofSoundPlayer_sound_set
    __swig_getmethods__["sound"] = _openframeworks.ofSoundPlayer_sound_get
    if _newclass:sound = _swig_property(_openframeworks.ofSoundPlayer_sound_get, _openframeworks.ofSoundPlayer_sound_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofSoundPlayer(self)
        return weakref_proxy(self)
ofSoundPlayer_swigregister = _openframeworks.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)

def ofSetupOpenGL(*args):
  return _openframeworks.ofSetupOpenGL(*args)
ofSetupOpenGL = _openframeworks.ofSetupOpenGL

def ofRunApp(OFSA = None):
  return _openframeworks.ofRunApp(OFSA)
ofRunApp = _openframeworks.ofRunApp

def ofSoundStreamSetup(*args):
  return _openframeworks.ofSoundStreamSetup(*args)
ofSoundStreamSetup = _openframeworks.ofSoundStreamSetup

def ofSoundPlayer_initializeFmod():
  return _openframeworks.ofSoundPlayer_initializeFmod()
ofSoundPlayer_initializeFmod = _openframeworks.ofSoundPlayer_initializeFmod

def ofSoundPlayer_closeFmod():
  return _openframeworks.ofSoundPlayer_closeFmod()
ofSoundPlayer_closeFmod = _openframeworks.ofSoundPlayer_closeFmod

class ofVideoPlayer(ofBaseVideo):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofVideoPlayer:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofVideoPlayer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVideoPlayer
    __del__ = lambda self : None;
    def loadMovie(self, *args): return _openframeworks.ofVideoPlayer_loadMovie(self, *args)
    def closeMovie(self): return _openframeworks.ofVideoPlayer_closeMovie(self)
    def close(self): return _openframeworks.ofVideoPlayer_close(self)
    def update(self): return _openframeworks.ofVideoPlayer_update(self)
    def idleMovie(self): return _openframeworks.ofVideoPlayer_idleMovie(self)
    def play(self): return _openframeworks.ofVideoPlayer_play(self)
    def stop(self): return _openframeworks.ofVideoPlayer_stop(self)
    __swig_setmethods__["width"] = _openframeworks.ofVideoPlayer_width_set
    __swig_getmethods__["width"] = _openframeworks.ofVideoPlayer_width_get
    if _newclass:width = _swig_property(_openframeworks.ofVideoPlayer_width_get, _openframeworks.ofVideoPlayer_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofVideoPlayer_height_set
    __swig_getmethods__["height"] = _openframeworks.ofVideoPlayer_height_get
    if _newclass:height = _swig_property(_openframeworks.ofVideoPlayer_height_get, _openframeworks.ofVideoPlayer_height_set)
    __swig_setmethods__["speed"] = _openframeworks.ofVideoPlayer_speed_set
    __swig_getmethods__["speed"] = _openframeworks.ofVideoPlayer_speed_get
    if _newclass:speed = _swig_property(_openframeworks.ofVideoPlayer_speed_get, _openframeworks.ofVideoPlayer_speed_set)
    __swig_setmethods__["bLoaded"] = _openframeworks.ofVideoPlayer_bLoaded_set
    __swig_getmethods__["bLoaded"] = _openframeworks.ofVideoPlayer_bLoaded_get
    if _newclass:bLoaded = _swig_property(_openframeworks.ofVideoPlayer_bLoaded_get, _openframeworks.ofVideoPlayer_bLoaded_set)
    def isFrameNew(self): return _openframeworks.ofVideoPlayer_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofVideoPlayer_getPixels(self)
    def getPosition(self): return _openframeworks.ofVideoPlayer_getPosition(self)
    def getSpeed(self): return _openframeworks.ofVideoPlayer_getSpeed(self)
    def getDuration(self): return _openframeworks.ofVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _openframeworks.ofVideoPlayer_getIsMovieDone(self)
    def setPosition(self, *args): return _openframeworks.ofVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _openframeworks.ofVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _openframeworks.ofVideoPlayer_setLoopState(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _openframeworks.ofVideoPlayer_setFrame(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoPlayer_setUseTexture(self, *args)
    def getTextureReference(self): return _openframeworks.ofVideoPlayer_getTextureReference(self)
    def draw(self, *args): return _openframeworks.ofVideoPlayer_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoPlayer_resetAnchor(self)
    def setPaused(self, *args): return _openframeworks.ofVideoPlayer_setPaused(self, *args)
    def getCurrentFrame(self): return _openframeworks.ofVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _openframeworks.ofVideoPlayer_getTotalNumFrames(self)
    def firstFrame(self): return _openframeworks.ofVideoPlayer_firstFrame(self)
    def nextFrame(self): return _openframeworks.ofVideoPlayer_nextFrame(self)
    def previousFrame(self): return _openframeworks.ofVideoPlayer_previousFrame(self)
    def getHeight(self): return _openframeworks.ofVideoPlayer_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoPlayer_getWidth(self)
    __swig_setmethods__["myDrawCompleteProc"] = _openframeworks.ofVideoPlayer_myDrawCompleteProc_set
    __swig_getmethods__["myDrawCompleteProc"] = _openframeworks.ofVideoPlayer_myDrawCompleteProc_get
    if _newclass:myDrawCompleteProc = _swig_property(_openframeworks.ofVideoPlayer_myDrawCompleteProc_get, _openframeworks.ofVideoPlayer_myDrawCompleteProc_set)
    __swig_setmethods__["thePlayer"] = _openframeworks.ofVideoPlayer_thePlayer_set
    __swig_getmethods__["thePlayer"] = _openframeworks.ofVideoPlayer_thePlayer_get
    if _newclass:thePlayer = _swig_property(_openframeworks.ofVideoPlayer_thePlayer_get, _openframeworks.ofVideoPlayer_thePlayer_set)
    __swig_setmethods__["offscreenGWorld"] = _openframeworks.ofVideoPlayer_offscreenGWorld_set
    __swig_getmethods__["offscreenGWorld"] = _openframeworks.ofVideoPlayer_offscreenGWorld_get
    if _newclass:offscreenGWorld = _swig_property(_openframeworks.ofVideoPlayer_offscreenGWorld_get, _openframeworks.ofVideoPlayer_offscreenGWorld_set)
    __swig_setmethods__["moviePtr"] = _openframeworks.ofVideoPlayer_moviePtr_set
    __swig_getmethods__["moviePtr"] = _openframeworks.ofVideoPlayer_moviePtr_get
    if _newclass:moviePtr = _swig_property(_openframeworks.ofVideoPlayer_moviePtr_get, _openframeworks.ofVideoPlayer_moviePtr_set)
    __swig_setmethods__["offscreenGWorldPixels"] = _openframeworks.ofVideoPlayer_offscreenGWorldPixels_set
    __swig_getmethods__["offscreenGWorldPixels"] = _openframeworks.ofVideoPlayer_offscreenGWorldPixels_get
    if _newclass:offscreenGWorldPixels = _swig_property(_openframeworks.ofVideoPlayer_offscreenGWorldPixels_get, _openframeworks.ofVideoPlayer_offscreenGWorldPixels_set)
    __swig_setmethods__["nFrames"] = _openframeworks.ofVideoPlayer_nFrames_set
    __swig_getmethods__["nFrames"] = _openframeworks.ofVideoPlayer_nFrames_get
    if _newclass:nFrames = _swig_property(_openframeworks.ofVideoPlayer_nFrames_get, _openframeworks.ofVideoPlayer_nFrames_set)
    __swig_setmethods__["pixels"] = _openframeworks.ofVideoPlayer_pixels_set
    __swig_getmethods__["pixels"] = _openframeworks.ofVideoPlayer_pixels_get
    if _newclass:pixels = _swig_property(_openframeworks.ofVideoPlayer_pixels_get, _openframeworks.ofVideoPlayer_pixels_set)
    __swig_setmethods__["bHavePixelsChanged"] = _openframeworks.ofVideoPlayer_bHavePixelsChanged_set
    __swig_getmethods__["bHavePixelsChanged"] = _openframeworks.ofVideoPlayer_bHavePixelsChanged_get
    if _newclass:bHavePixelsChanged = _swig_property(_openframeworks.ofVideoPlayer_bHavePixelsChanged_get, _openframeworks.ofVideoPlayer_bHavePixelsChanged_set)
    __swig_setmethods__["tex"] = _openframeworks.ofVideoPlayer_tex_set
    __swig_getmethods__["tex"] = _openframeworks.ofVideoPlayer_tex_get
    if _newclass:tex = _swig_property(_openframeworks.ofVideoPlayer_tex_get, _openframeworks.ofVideoPlayer_tex_set)
    __swig_setmethods__["bUseTexture"] = _openframeworks.ofVideoPlayer_bUseTexture_set
    __swig_getmethods__["bUseTexture"] = _openframeworks.ofVideoPlayer_bUseTexture_get
    if _newclass:bUseTexture = _swig_property(_openframeworks.ofVideoPlayer_bUseTexture_get, _openframeworks.ofVideoPlayer_bUseTexture_set)
    __swig_setmethods__["allocated"] = _openframeworks.ofVideoPlayer_allocated_set
    __swig_getmethods__["allocated"] = _openframeworks.ofVideoPlayer_allocated_get
    if _newclass:allocated = _swig_property(_openframeworks.ofVideoPlayer_allocated_get, _openframeworks.ofVideoPlayer_allocated_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofVideoPlayer(self)
        return weakref_proxy(self)
ofVideoPlayer_swigregister = _openframeworks.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)

class ofVideoGrabber(ofBaseVideo):
    __swig_setmethods__ = {}
    for _s in [ofBaseVideo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoGrabber, name, value)
    __swig_getmethods__ = {}
    for _s in [ofBaseVideo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoGrabber, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ofVideoGrabber:
            _self = None
        else:
            _self = self
        this = _openframeworks.new_ofVideoGrabber(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVideoGrabber
    __del__ = lambda self : None;
    def listDevices(self): return _openframeworks.ofVideoGrabber_listDevices(self)
    def isFrameNew(self): return _openframeworks.ofVideoGrabber_isFrameNew(self)
    def grabFrame(self): return _openframeworks.ofVideoGrabber_grabFrame(self)
    def close(self): return _openframeworks.ofVideoGrabber_close(self)
    def initGrabber(self, *args): return _openframeworks.ofVideoGrabber_initGrabber(self, *args)
    def videoSettings(self): return _openframeworks.ofVideoGrabber_videoSettings(self)
    def getPixels(self): return _openframeworks.ofVideoGrabber_getPixels(self)
    def getTextureReference(self): return _openframeworks.ofVideoGrabber_getTextureReference(self)
    def setVerbose(self, *args): return _openframeworks.ofVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _openframeworks.ofVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _openframeworks.ofVideoGrabber_setDesiredFrameRate(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoGrabber_setUseTexture(self, *args)
    def draw(self, *args): return _openframeworks.ofVideoGrabber_draw(self, *args)
    def update(self): return _openframeworks.ofVideoGrabber_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoGrabber_resetAnchor(self)
    def getHeight(self): return _openframeworks.ofVideoGrabber_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoGrabber_getWidth(self)
    __swig_setmethods__["height"] = _openframeworks.ofVideoGrabber_height_set
    __swig_getmethods__["height"] = _openframeworks.ofVideoGrabber_height_get
    if _newclass:height = _swig_property(_openframeworks.ofVideoGrabber_height_get, _openframeworks.ofVideoGrabber_height_set)
    __swig_setmethods__["width"] = _openframeworks.ofVideoGrabber_width_set
    __swig_getmethods__["width"] = _openframeworks.ofVideoGrabber_width_get
    if _newclass:width = _swig_property(_openframeworks.ofVideoGrabber_width_get, _openframeworks.ofVideoGrabber_width_set)
    def __disown__(self):
        self.this.disown()
        _openframeworks.disown_ofVideoGrabber(self)
        return weakref_proxy(self)
ofVideoGrabber_swigregister = _openframeworks.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)



