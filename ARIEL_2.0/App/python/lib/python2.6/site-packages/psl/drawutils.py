
from psl import *
import time
import math
from openframeworks import *

colorStack = [(1,1,1,1)]

from psl import geom

class BezierCache:

    def __init__(self):
        self.cache = {}

    def get(self,key):
        try:
            return self.cache[key]
        except:
            return None

    def set(self, key, value):
        self.cache[key] = value

bezierCache = BezierCache()

#This doesn't work yet. Just call slow bezier
def drawBezier( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3, res, pct=100):
    global bezierCache
    key =  (int(x0),  int(y0),  int(x1),  int(y1), int(x2), int(y2), int(x3), int(y3), int(res))
    if bezierCache.get(key):
        pass
    else:
        verts = slowBezier( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3, res, pct)
        bezierCache.set(key, value)

def slowBezier( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3, res, pct=100):

    cx = 3.0 * (x1 - x0)
    bx = 3.0 * (x2 - x1) - cx
    ax = x3 - x0 - cx - bx

    cy = 3.0 * (y1 - y0)
    by = 3.0 * (y2 - y1) - cy
    ay = y3 - y0 - cy - by

    resolution = res

    for i in range(int(resolution*pct/100)):
    	t = i / float(resolution-1)
    	t2 = t * t
    	t3 = t2 * t
        x = (ax * t3) + (bx * t2) + (cx * t) + x0
    	y = (ay * t3) + (by * t2) + (cy * t) + y0
    	glVertex3f(x,y,0)

    vertsToReturn = []

    for i in range(int(resolution*pct/100)-2, int(resolution*pct/100)):
    	t = i / float(resolution-1)
    	t2 = t * t
    	t3 = t2 * t
        x = (ax * t3) + (bx * t2) + (cx * t) + x0
    	y = (ay * t3) + (by * t2) + (cy * t) + y0
        vertsToReturn.append((x,y))
    return vertsToReturn

def setOpacity(val):
    col = glGetFloatv(GL_CURRENT_COLOR)
    glColor4f(col[0],col[1],col[2],val)

def scaleOpacity(fac):
    #Dont call this EVER
    
    #col = glGetFloatv(GL_CURRENT_COLOR)
    glColor4f(1,1,1,fac)

def scaleColor(fac):
    #Dont call this EVER
        
    col = glGetFloatv(GL_CURRENT_COLOR)
    glColor4f(col[0]*fac,col[1]*fac,col[2]*fac,col[3])

def getColor():
    return glGetFloatv(GL_CURRENT_COLOR)

def pushColor(col):
    global colorStack
    if col:
        colorStack.append(col)
    else:
        colorStack.append(glGetFloatv(GL_CURRENT_COLOR))
        
def popColor():
    global colorStack
    apply(glColor4f,colorStack[-1])
    del(colorStack[-1])


def drawRoundRectangle(x1,y1,x2,y2,r):
    glBegin(GL_QUAD_STRIP)
    roundRectangleVertices(x1,y1,x2,y2,r)
    glEnd()

# def drawRoundRectangle(x1, y1, x2, y2, r):
#     w = x2 - x1
#     h = y2 - y1
#     xc = x1 + (x2 - x1)/2
#     yc = y1 + (y2 - y1)/2
#     ofBeginShape()
#     ofVertex(xc + w/2 - r, yc - h/2)
#     ofBezierVertex(xc + w/2 - r, yc - h/2, xc + w/2, yc - h/2, xc + w/2, yc - h/2 + r)
#     ofVertex(xc + w/2, yc + h/2 - r)
#     ofBezierVertex(xc + w/2, yc + h/2, xc + w/2 - r, yc + h/2, xc + w/2 - r, yc + h/2)
#     ofVertex(xc - w/2 + r, yc + h/2)
#     ofBezierVertex(xc - w/2, yc + h/2, xc - w/2, yc + h/2 - r, xc - w/2, yc + h/2 - r)
#     ofVertex(xc - w/2, yc - h/2 + r)
#     ofBezierVertex(xc - w/2, yc - h/2, xc - w/2 + r, yc - h/2, xc - w/2 + r, yc - h/2)
#     ofEndShape(True)
    
def roundRectangleVertices(x1,y1,x2,y2,r):

    x1 += r
    x2 -= r
    y1 += r
    y2 -= r
    
    lines = 10
    step = math.pi / 2
    step /= (lines - 1)
    for n in range(lines):
        p1 = geom.getPoint((x1,y2), math.pi - step*n, r)
        glVertex3f(p1[0],p1[1],0)
        p1 = geom.getPoint((x1,y1), math.pi + step*n, r)
        glVertex3f(p1[0],p1[1],0)
    for n in range(lines):
        p1 = geom.getPoint((x2,y2), math.pi/2 - step*n, r)
        glVertex3f(p1[0],p1[1],0)                
        p1 = geom.getPoint((x2,y1), math.pi*3/2 + step*n, r)
        glVertex3f(p1[0],p1[1],0)
    

def drawCircle(x,y,r,n):
#    print "Draw Circle should be sped up!"
    glPushMatrix()
    glTranslatef(x,y,0)
    glBegin(GL_POLYGON)
    n = 360/n
    k = 3.1415926535 / 180
    if n == 0:
	n = 1
    for p in range(0,360,n):
	glVertex3f(r*math.sin(p*k),r*math.cos(p*k),0)
    glEnd()
    glPopMatrix()

def drawSemiCircle(x,y,r,n,start,end):
#    print "Draw Circle should be sped up!"
    start = int(start)
    end = int(end)
    glPushMatrix()
    glTranslatef(x,y,0)
    n = int(abs(end-start)/n)
    k = 3.1415926535 / 180
    if n == 0:
	n = 1
#    print "dc",start,end,n
    glBegin(GL_POLYGON)
    glVertex3f(0,0,0)
    for p in range(start,end,n):
	glVertex3f(r*math.sin(p*k),r*math.cos(p*k),0)
    glVertex3f(r*math.sin(end*k),r*math.cos(end*k),0)
    glEnd()
    glPopMatrix()

def drawArc(x,y,r1,r2,n,start,end):
#    print "Draw Circle should be sped up!"
    start = int(start)
    end = int(end)
    glPushMatrix()
    glTranslatef(x,y,0)
    n = int(abs(end-start)/n)
    k = 3.1415926535 / 180
    if n == 0:
	n = 1
#    print "dc",start,end,n
    glBegin(GL_QUAD_STRIP)
    for p in range(start,end,n):
	glVertex3f(r1*math.sin(p*k),r1*math.cos(p*k),0)
	glVertex3f(r2*math.sin(p*k),r2*math.cos(p*k),0)
    glEnd()
    glPopMatrix()

