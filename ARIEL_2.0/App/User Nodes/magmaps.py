# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_magmaps', [dirname(__file__)])
        except ImportError:
            import _magmaps
            return _magmaps
        if fp is not None:
            try:
                _mod = imp.load_module('_magmaps', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _magmaps = swig_import_helper()
    del swig_import_helper
else:
    import _magmaps
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MagMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["masterField"] = _magmaps.MagMap_masterField_set
    __swig_getmethods__["masterField"] = _magmaps.MagMap_masterField_get
    if _newclass:masterField = _swig_property(_magmaps.MagMap_masterField_get, _magmaps.MagMap_masterField_set)
    __swig_setmethods__["m1"] = _magmaps.MagMap_m1_set
    __swig_getmethods__["m1"] = _magmaps.MagMap_m1_get
    if _newclass:m1 = _swig_property(_magmaps.MagMap_m1_get, _magmaps.MagMap_m1_set)
    __swig_setmethods__["m2"] = _magmaps.MagMap_m2_set
    __swig_getmethods__["m2"] = _magmaps.MagMap_m2_get
    if _newclass:m2 = _swig_property(_magmaps.MagMap_m2_get, _magmaps.MagMap_m2_set)
    def __init__(self, *args): 
        this = _magmaps.new_MagMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["uWidth"] = _magmaps.MagMap_uWidth_set
    __swig_getmethods__["uWidth"] = _magmaps.MagMap_uWidth_get
    if _newclass:uWidth = _swig_property(_magmaps.MagMap_uWidth_get, _magmaps.MagMap_uWidth_set)
    __swig_setmethods__["uHeight"] = _magmaps.MagMap_uHeight_set
    __swig_getmethods__["uHeight"] = _magmaps.MagMap_uHeight_get
    if _newclass:uHeight = _swig_property(_magmaps.MagMap_uHeight_get, _magmaps.MagMap_uHeight_set)
    __swig_setmethods__["v1ang"] = _magmaps.MagMap_v1ang_set
    __swig_getmethods__["v1ang"] = _magmaps.MagMap_v1ang_get
    if _newclass:v1ang = _swig_property(_magmaps.MagMap_v1ang_get, _magmaps.MagMap_v1ang_set)
    __swig_setmethods__["v2ang"] = _magmaps.MagMap_v2ang_set
    __swig_getmethods__["v2ang"] = _magmaps.MagMap_v2ang_get
    if _newclass:v2ang = _swig_property(_magmaps.MagMap_v2ang_get, _magmaps.MagMap_v2ang_set)
    def draw(self): return _magmaps.MagMap_draw(self)
    def pinConv(self): return _magmaps.MagMap_pinConv(self)
    def setAngles(self, *args): return _magmaps.MagMap_setAngles(self, *args)
    def getVectors(self): return _magmaps.MagMap_getVectors(self)
    __swig_destroy__ = _magmaps.delete_MagMap
    __del__ = lambda self : None;
MagMap_swigregister = _magmaps.MagMap_swigregister
MagMap_swigregister(MagMap)

class ShadedVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadedVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadedVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _magmaps.ShadedVector_r_set
    __swig_getmethods__["r"] = _magmaps.ShadedVector_r_get
    if _newclass:r = _swig_property(_magmaps.ShadedVector_r_get, _magmaps.ShadedVector_r_set)
    __swig_setmethods__["g"] = _magmaps.ShadedVector_g_set
    __swig_getmethods__["g"] = _magmaps.ShadedVector_g_get
    if _newclass:g = _swig_property(_magmaps.ShadedVector_g_get, _magmaps.ShadedVector_g_set)
    __swig_setmethods__["b"] = _magmaps.ShadedVector_b_set
    __swig_getmethods__["b"] = _magmaps.ShadedVector_b_get
    if _newclass:b = _swig_property(_magmaps.ShadedVector_b_get, _magmaps.ShadedVector_b_set)
    __swig_setmethods__["r2"] = _magmaps.ShadedVector_r2_set
    __swig_getmethods__["r2"] = _magmaps.ShadedVector_r2_get
    if _newclass:r2 = _swig_property(_magmaps.ShadedVector_r2_get, _magmaps.ShadedVector_r2_set)
    __swig_setmethods__["g2"] = _magmaps.ShadedVector_g2_set
    __swig_getmethods__["g2"] = _magmaps.ShadedVector_g2_get
    if _newclass:g2 = _swig_property(_magmaps.ShadedVector_g2_get, _magmaps.ShadedVector_g2_set)
    __swig_setmethods__["b2"] = _magmaps.ShadedVector_b2_set
    __swig_getmethods__["b2"] = _magmaps.ShadedVector_b2_get
    if _newclass:b2 = _swig_property(_magmaps.ShadedVector_b2_get, _magmaps.ShadedVector_b2_set)
    __swig_setmethods__["x1"] = _magmaps.ShadedVector_x1_set
    __swig_getmethods__["x1"] = _magmaps.ShadedVector_x1_get
    if _newclass:x1 = _swig_property(_magmaps.ShadedVector_x1_get, _magmaps.ShadedVector_x1_set)
    __swig_setmethods__["x2"] = _magmaps.ShadedVector_x2_set
    __swig_getmethods__["x2"] = _magmaps.ShadedVector_x2_get
    if _newclass:x2 = _swig_property(_magmaps.ShadedVector_x2_get, _magmaps.ShadedVector_x2_set)
    __swig_setmethods__["y1"] = _magmaps.ShadedVector_y1_set
    __swig_getmethods__["y1"] = _magmaps.ShadedVector_y1_get
    if _newclass:y1 = _swig_property(_magmaps.ShadedVector_y1_get, _magmaps.ShadedVector_y1_set)
    __swig_setmethods__["y2"] = _magmaps.ShadedVector_y2_set
    __swig_getmethods__["y2"] = _magmaps.ShadedVector_y2_get
    if _newclass:y2 = _swig_property(_magmaps.ShadedVector_y2_get, _magmaps.ShadedVector_y2_set)
    __swig_setmethods__["hasArrowhead"] = _magmaps.ShadedVector_hasArrowhead_set
    __swig_getmethods__["hasArrowhead"] = _magmaps.ShadedVector_hasArrowhead_get
    if _newclass:hasArrowhead = _swig_property(_magmaps.ShadedVector_hasArrowhead_get, _magmaps.ShadedVector_hasArrowhead_set)
    def __init__(self): 
        this = _magmaps.new_ShadedVector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _magmaps.delete_ShadedVector
    __del__ = lambda self : None;
ShadedVector_swigregister = _magmaps.ShadedVector_swigregister
ShadedVector_swigregister(ShadedVector)

class VectorField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorField, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _magmaps.VectorField_v_set
    __swig_getmethods__["v"] = _magmaps.VectorField_v_get
    if _newclass:v = _swig_property(_magmaps.VectorField_v_get, _magmaps.VectorField_v_set)
    __swig_setmethods__["m1pos"] = _magmaps.VectorField_m1pos_set
    __swig_getmethods__["m1pos"] = _magmaps.VectorField_m1pos_get
    if _newclass:m1pos = _swig_property(_magmaps.VectorField_m1pos_get, _magmaps.VectorField_m1pos_set)
    __swig_setmethods__["m2pos"] = _magmaps.VectorField_m2pos_set
    __swig_getmethods__["m2pos"] = _magmaps.VectorField_m2pos_get
    if _newclass:m2pos = _swig_property(_magmaps.VectorField_m2pos_get, _magmaps.VectorField_m2pos_set)
    __swig_setmethods__["m1dir"] = _magmaps.VectorField_m1dir_set
    __swig_getmethods__["m1dir"] = _magmaps.VectorField_m1dir_get
    if _newclass:m1dir = _swig_property(_magmaps.VectorField_m1dir_get, _magmaps.VectorField_m1dir_set)
    __swig_setmethods__["m2dir"] = _magmaps.VectorField_m2dir_set
    __swig_getmethods__["m2dir"] = _magmaps.VectorField_m2dir_get
    if _newclass:m2dir = _swig_property(_magmaps.VectorField_m2dir_get, _magmaps.VectorField_m2dir_set)
    __swig_setmethods__["m1posPos"] = _magmaps.VectorField_m1posPos_set
    __swig_getmethods__["m1posPos"] = _magmaps.VectorField_m1posPos_get
    if _newclass:m1posPos = _swig_property(_magmaps.VectorField_m1posPos_get, _magmaps.VectorField_m1posPos_set)
    __swig_setmethods__["m1posNeg"] = _magmaps.VectorField_m1posNeg_set
    __swig_getmethods__["m1posNeg"] = _magmaps.VectorField_m1posNeg_get
    if _newclass:m1posNeg = _swig_property(_magmaps.VectorField_m1posNeg_get, _magmaps.VectorField_m1posNeg_set)
    __swig_setmethods__["m2posPos"] = _magmaps.VectorField_m2posPos_set
    __swig_getmethods__["m2posPos"] = _magmaps.VectorField_m2posPos_get
    if _newclass:m2posPos = _swig_property(_magmaps.VectorField_m2posPos_get, _magmaps.VectorField_m2posPos_set)
    __swig_setmethods__["m2posNeg"] = _magmaps.VectorField_m2posNeg_set
    __swig_getmethods__["m2posNeg"] = _magmaps.VectorField_m2posNeg_get
    if _newclass:m2posNeg = _swig_property(_magmaps.VectorField_m2posNeg_get, _magmaps.VectorField_m2posNeg_set)
    __swig_setmethods__["lines"] = _magmaps.VectorField_lines_set
    __swig_getmethods__["lines"] = _magmaps.VectorField_lines_get
    if _newclass:lines = _swig_property(_magmaps.VectorField_lines_get, _magmaps.VectorField_lines_set)
    __swig_setmethods__["Bx"] = _magmaps.VectorField_Bx_set
    __swig_getmethods__["Bx"] = _magmaps.VectorField_Bx_get
    if _newclass:Bx = _swig_property(_magmaps.VectorField_Bx_get, _magmaps.VectorField_Bx_set)
    __swig_setmethods__["By"] = _magmaps.VectorField_By_set
    __swig_getmethods__["By"] = _magmaps.VectorField_By_get
    if _newclass:By = _swig_property(_magmaps.VectorField_By_get, _magmaps.VectorField_By_set)
    __swig_setmethods__["RefBx"] = _magmaps.VectorField_RefBx_set
    __swig_getmethods__["RefBx"] = _magmaps.VectorField_RefBx_get
    if _newclass:RefBx = _swig_property(_magmaps.VectorField_RefBx_get, _magmaps.VectorField_RefBx_set)
    __swig_setmethods__["RefBy"] = _magmaps.VectorField_RefBy_set
    __swig_getmethods__["RefBy"] = _magmaps.VectorField_RefBy_get
    if _newclass:RefBy = _swig_property(_magmaps.VectorField_RefBy_get, _magmaps.VectorField_RefBy_set)
    __swig_setmethods__["fieldlineP"] = _magmaps.VectorField_fieldlineP_set
    __swig_getmethods__["fieldlineP"] = _magmaps.VectorField_fieldlineP_get
    if _newclass:fieldlineP = _swig_property(_magmaps.VectorField_fieldlineP_get, _magmaps.VectorField_fieldlineP_set)
    __swig_setmethods__["fieldlineN"] = _magmaps.VectorField_fieldlineN_set
    __swig_getmethods__["fieldlineN"] = _magmaps.VectorField_fieldlineN_get
    if _newclass:fieldlineN = _swig_property(_magmaps.VectorField_fieldlineN_get, _magmaps.VectorField_fieldlineN_set)
    def lookupData(self, *args): return _magmaps.VectorField_lookupData(self, *args)
    def showfromFile(self): return _magmaps.VectorField_showfromFile(self)
    def showArrows(self): return _magmaps.VectorField_showArrows(self)
    def showGrid(self): return _magmaps.VectorField_showGrid(self)
    def interpB(self, *args): return _magmaps.VectorField_interpB(self, *args)
    def interpB2(self, *args): return _magmaps.VectorField_interpB2(self, *args)
    def mouseFieldLine(self): return _magmaps.VectorField_mouseFieldLine(self)
    def fieldlines(self): return _magmaps.VectorField_fieldlines(self)
    def magnetbox(self, *args): return _magmaps.VectorField_magnetbox(self, *args)
    def plotlines(self, *args): return _magmaps.VectorField_plotlines(self, *args)
    def arrowhead(self, *args): return _magmaps.VectorField_arrowhead(self, *args)
    def arrow2(self, *args): return _magmaps.VectorField_arrow2(self, *args)
    def proxtest(self, *args): return _magmaps.VectorField_proxtest(self, *args)
    def readMagFile(self, *args): return _magmaps.VectorField_readMagFile(self, *args)
    def getLine(self, *args): return _magmaps.VectorField_getLine(self, *args)
    def getNumLines(self): return _magmaps.VectorField_getNumLines(self)
    def __init__(self): 
        this = _magmaps.new_VectorField()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _magmaps.delete_VectorField
    __del__ = lambda self : None;
VectorField_swigregister = _magmaps.VectorField_swigregister
VectorField_swigregister(VectorField)

class Magnet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Magnet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Magnet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vf"] = _magmaps.Magnet_vf_set
    __swig_getmethods__["vf"] = _magmaps.Magnet_vf_get
    if _newclass:vf = _swig_property(_magmaps.Magnet_vf_get, _magmaps.Magnet_vf_set)
    __swig_setmethods__["pos"] = _magmaps.Magnet_pos_set
    __swig_getmethods__["pos"] = _magmaps.Magnet_pos_get
    if _newclass:pos = _swig_property(_magmaps.Magnet_pos_get, _magmaps.Magnet_pos_set)
    __swig_setmethods__["dir"] = _magmaps.Magnet_dir_set
    __swig_getmethods__["dir"] = _magmaps.Magnet_dir_get
    if _newclass:dir = _swig_property(_magmaps.Magnet_dir_get, _magmaps.Magnet_dir_set)
    __swig_setmethods__["posNeg"] = _magmaps.Magnet_posNeg_set
    __swig_getmethods__["posNeg"] = _magmaps.Magnet_posNeg_get
    if _newclass:posNeg = _swig_property(_magmaps.Magnet_posNeg_get, _magmaps.Magnet_posNeg_set)
    __swig_setmethods__["posPos"] = _magmaps.Magnet_posPos_set
    __swig_getmethods__["posPos"] = _magmaps.Magnet_posPos_get
    if _newclass:posPos = _swig_property(_magmaps.Magnet_posPos_get, _magmaps.Magnet_posPos_set)
    def __init__(self): 
        this = _magmaps.new_Magnet()
        try: self.this.append(this)
        except: self.this = this
    def update(self): return _magmaps.Magnet_update(self)
    def show(self): return _magmaps.Magnet_show(self)
    __swig_destroy__ = _magmaps.delete_Magnet
    __del__ = lambda self : None;
Magnet_swigregister = _magmaps.Magnet_swigregister
Magnet_swigregister(Magnet)

# This file is compatible with both classic and new-style classes.


